// Generated from SR.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var SRListener = require('./SRListener').SRListener;
var grammarFileName = "SR.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003k\u03d0\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004",
    "V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004\\\t\\\u0004",
    "]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004c\tc\u0004",
    "d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004j\tj\u0004",
    "k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004q\tq\u0004",
    "r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004x\tx\u0003",
    "\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0005",
    "\u0002\u00f7\n\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0005\u0003\u00fd\n\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0005\u0005\u0106\n\u0005",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u010c\n",
    "\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u0111\n\u0007",
    "\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u0117\n\b\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0005\t\u011d\n\t\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n",
    "\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0005\n\u012f\n\n\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\f\u0003\f\u0003\f\u0005\f\u0138\n\f\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u0143",
    "\n\r\u0003\u000e\u0003\u000e\u0005\u000e\u0147\n\u000e\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005",
    "\u0010\u0156\n\u0010\u0003\u0011\u0003\u0011\u0005\u0011\u015a\n\u0011",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u016b\n\u0013\u0003",
    "\u0014\u0003\u0014\u0005\u0014\u016f\n\u0014\u0003\u0015\u0003\u0015",
    "\u0005\u0015\u0173\n\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005",
    "\u0019\u018a\n\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0005\u001d\u01ba\n\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u01c8\n\u001f\u0003 \u0003",
    " \u0003 \u0003 \u0003!\u0003!\u0003!\u0003!\u0003\"\u0003\"\u0003#\u0003",
    "#\u0003#\u0003$\u0003$\u0003$\u0005$\u01da\n$\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0003&\u0003&\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0003",
    "\'\u0005\'\u01ea\n\'\u0003(\u0003(\u0003(\u0005(\u01ef\n(\u0003)\u0003",
    ")\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0005",
    "*\u01fc\n*\u0003+\u0003+\u0005+\u0200\n+\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0003-\u0003-\u0003-\u0003-\u0003-\u0005-\u020c\n-\u0003.\u0003",
    ".\u0003/\u0003/\u0003/\u0005/\u0213\n/\u00030\u00030\u00030\u00030\u0003",
    "0\u00030\u00030\u00050\u021c\n0\u00031\u00031\u00031\u00031\u00051\u0222",
    "\n1\u00032\u00032\u00032\u00032\u00032\u00052\u0229\n2\u00033\u0003",
    "3\u00033\u00053\u022e\n3\u00034\u00034\u00034\u00054\u0233\n4\u0003",
    "5\u00035\u00035\u00055\u0238\n5\u00036\u00036\u00036\u00056\u023d\n",
    "6\u00037\u00037\u00037\u00037\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00058\u024e\n8\u00039\u00039\u0003",
    "9\u00039\u00059\u0254\n9\u0003:\u0003:\u0003:\u0003:\u0003:\u0005:\u025b",
    "\n:\u0003;\u0003;\u0005;\u025f\n;\u0003<\u0003<\u0005<\u0263\n<\u0003",
    "=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0005=\u026c\n=\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0005>\u0277\n>\u0003",
    "?\u0003?\u0003?\u0003?\u0005?\u027d\n?\u0003@\u0003@\u0003@\u0005@\u0282",
    "\n@\u0003A\u0003A\u0003A\u0005A\u0287\nA\u0003B\u0003B\u0003B\u0003",
    "B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003",
    "B\u0003B\u0003B\u0003B\u0003B\u0005B\u029b\nB\u0003C\u0003C\u0003C\u0003",
    "C\u0003C\u0003C\u0003C\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u02b0\nD\u0003E\u0003E\u0003",
    "F\u0003F\u0003G\u0003G\u0003H\u0003H\u0005H\u02ba\nH\u0003I\u0003I\u0003",
    "J\u0003J\u0003K\u0003K\u0003L\u0003L\u0003L\u0005L\u02c5\nL\u0003M\u0003",
    "M\u0005M\u02c9\nM\u0003N\u0003N\u0003N\u0003O\u0003O\u0003O\u0005O\u02d1",
    "\nO\u0003P\u0003P\u0003P\u0005P\u02d6\nP\u0003Q\u0003Q\u0003Q\u0003",
    "R\u0003R\u0003S\u0003S\u0003S\u0003S\u0003S\u0005S\u02e2\nS\u0003T\u0003",
    "T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0005",
    "T\u02ef\nT\u0003U\u0003U\u0003U\u0003U\u0003U\u0005U\u02f6\nU\u0003",
    "V\u0003V\u0003V\u0003V\u0005V\u02fc\nV\u0003W\u0003W\u0003W\u0003X\u0003",
    "X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003",
    "X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0005X\u0314\nX\u0003",
    "Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0005Y\u031e\nY\u0003",
    "Z\u0003Z\u0003Z\u0003[\u0003[\u0003[\u0005[\u0326\n[\u0003\\\u0003\\",
    "\u0003\\\u0003\\\u0003]\u0003]\u0003]\u0003]\u0003]\u0005]\u0331\n]",
    "\u0003^\u0003^\u0003^\u0003^\u0005^\u0337\n^\u0003_\u0003_\u0003_\u0005",
    "_\u033c\n_\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003",
    "`\u0005`\u0347\n`\u0003a\u0003a\u0003a\u0003a\u0005a\u034d\na\u0003",
    "b\u0003b\u0005b\u0351\nb\u0003c\u0003c\u0003c\u0003d\u0003d\u0003d\u0003",
    "d\u0005d\u035a\nd\u0003e\u0003e\u0003f\u0003f\u0003f\u0003f\u0003f\u0003",
    "f\u0003f\u0003f\u0005f\u0366\nf\u0003g\u0003g\u0003g\u0003g\u0003g\u0003",
    "g\u0003h\u0003h\u0003h\u0003h\u0003i\u0003i\u0003i\u0005i\u0375\ni\u0003",
    "j\u0003j\u0003j\u0003j\u0003j\u0005j\u037c\nj\u0003k\u0003k\u0003k\u0005",
    "k\u0381\nk\u0003l\u0003l\u0005l\u0385\nl\u0003m\u0003m\u0003m\u0003",
    "m\u0003m\u0003n\u0003n\u0003n\u0005n\u038f\nn\u0003o\u0003o\u0003o\u0003",
    "p\u0003p\u0003p\u0005p\u0397\np\u0003q\u0003q\u0003q\u0003q\u0003q\u0003",
    "q\u0005q\u039f\nq\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0005",
    "r\u03a8\nr\u0003s\u0003s\u0003s\u0003s\u0003s\u0003s\u0003s\u0005s\u03b1",
    "\ns\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0005t\u03b9\nt\u0003",
    "u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0005u\u03c2\nu\u0003v\u0003",
    "v\u0003w\u0003w\u0003w\u0005w\u03c9\nw\u0003x\u0003x\u0003x\u0005x\u03ce",
    "\nx\u0003x\u0002\u0002y\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014",
    "\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bd",
    "fhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090",
    "\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8",
    "\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0",
    "\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8",
    "\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u0002",
    "\t\u0004\u0002\u001c\u001c  \u0005\u00022277HH\u0005\u0002\u0019\u0019",
    "//44\u0003\u0002\u000e\u000f\u0003\u0002DE\u0006\u0002JKYY__bc\u0007",
    "\u0002\u0004\u0004\u001a\u001a%%--33\u0002\u03dc\u0002\u00f6\u0003\u0002",
    "\u0002\u0002\u0004\u00fc\u0003\u0002\u0002\u0002\u0006\u00fe\u0003\u0002",
    "\u0002\u0002\b\u0105\u0003\u0002\u0002\u0002\n\u010b\u0003\u0002\u0002",
    "\u0002\f\u0110\u0003\u0002\u0002\u0002\u000e\u0116\u0003\u0002\u0002",
    "\u0002\u0010\u011c\u0003\u0002\u0002\u0002\u0012\u012e\u0003\u0002\u0002",
    "\u0002\u0014\u0130\u0003\u0002\u0002\u0002\u0016\u0137\u0003\u0002\u0002",
    "\u0002\u0018\u0142\u0003\u0002\u0002\u0002\u001a\u0146\u0003\u0002\u0002",
    "\u0002\u001c\u0148\u0003\u0002\u0002\u0002\u001e\u0155\u0003\u0002\u0002",
    "\u0002 \u0159\u0003\u0002\u0002\u0002\"\u015b\u0003\u0002\u0002\u0002",
    "$\u016a\u0003\u0002\u0002\u0002&\u016e\u0003\u0002\u0002\u0002(\u0172",
    "\u0003\u0002\u0002\u0002*\u0174\u0003\u0002\u0002\u0002,\u017a\u0003",
    "\u0002\u0002\u0002.\u017d\u0003\u0002\u0002\u00020\u0189\u0003\u0002",
    "\u0002\u00022\u018b\u0003\u0002\u0002\u00024\u0196\u0003\u0002\u0002",
    "\u00026\u019e\u0003\u0002\u0002\u00028\u01b9\u0003\u0002\u0002\u0002",
    ":\u01bb\u0003\u0002\u0002\u0002<\u01c7\u0003\u0002\u0002\u0002>\u01c9",
    "\u0003\u0002\u0002\u0002@\u01cd\u0003\u0002\u0002\u0002B\u01d1\u0003",
    "\u0002\u0002\u0002D\u01d3\u0003\u0002\u0002\u0002F\u01d9\u0003\u0002",
    "\u0002\u0002H\u01db\u0003\u0002\u0002\u0002J\u01e1\u0003\u0002\u0002",
    "\u0002L\u01e9\u0003\u0002\u0002\u0002N\u01ee\u0003\u0002\u0002\u0002",
    "P\u01f0\u0003\u0002\u0002\u0002R\u01fb\u0003\u0002\u0002\u0002T\u01ff",
    "\u0003\u0002\u0002\u0002V\u0201\u0003\u0002\u0002\u0002X\u020b\u0003",
    "\u0002\u0002\u0002Z\u020d\u0003\u0002\u0002\u0002\\\u0212\u0003\u0002",
    "\u0002\u0002^\u021b\u0003\u0002\u0002\u0002`\u0221\u0003\u0002\u0002",
    "\u0002b\u0228\u0003\u0002\u0002\u0002d\u022d\u0003\u0002\u0002\u0002",
    "f\u0232\u0003\u0002\u0002\u0002h\u0237\u0003\u0002\u0002\u0002j\u023c",
    "\u0003\u0002\u0002\u0002l\u023e\u0003\u0002\u0002\u0002n\u024d\u0003",
    "\u0002\u0002\u0002p\u0253\u0003\u0002\u0002\u0002r\u025a\u0003\u0002",
    "\u0002\u0002t\u025e\u0003\u0002\u0002\u0002v\u0262\u0003\u0002\u0002",
    "\u0002x\u026b\u0003\u0002\u0002\u0002z\u0276\u0003\u0002\u0002\u0002",
    "|\u027c\u0003\u0002\u0002\u0002~\u0281\u0003\u0002\u0002\u0002\u0080",
    "\u0286\u0003\u0002\u0002\u0002\u0082\u029a\u0003\u0002\u0002\u0002\u0084",
    "\u029c\u0003\u0002\u0002\u0002\u0086\u02af\u0003\u0002\u0002\u0002\u0088",
    "\u02b1\u0003\u0002\u0002\u0002\u008a\u02b3\u0003\u0002\u0002\u0002\u008c",
    "\u02b5\u0003\u0002\u0002\u0002\u008e\u02b9\u0003\u0002\u0002\u0002\u0090",
    "\u02bb\u0003\u0002\u0002\u0002\u0092\u02bd\u0003\u0002\u0002\u0002\u0094",
    "\u02bf\u0003\u0002\u0002\u0002\u0096\u02c4\u0003\u0002\u0002\u0002\u0098",
    "\u02c8\u0003\u0002\u0002\u0002\u009a\u02ca\u0003\u0002\u0002\u0002\u009c",
    "\u02d0\u0003\u0002\u0002\u0002\u009e\u02d5\u0003\u0002\u0002\u0002\u00a0",
    "\u02d7\u0003\u0002\u0002\u0002\u00a2\u02da\u0003\u0002\u0002\u0002\u00a4",
    "\u02e1\u0003\u0002\u0002\u0002\u00a6\u02ee\u0003\u0002\u0002\u0002\u00a8",
    "\u02f5\u0003\u0002\u0002\u0002\u00aa\u02fb\u0003\u0002\u0002\u0002\u00ac",
    "\u02fd\u0003\u0002\u0002\u0002\u00ae\u0313\u0003\u0002\u0002\u0002\u00b0",
    "\u031d\u0003\u0002\u0002\u0002\u00b2\u031f\u0003\u0002\u0002\u0002\u00b4",
    "\u0325\u0003\u0002\u0002\u0002\u00b6\u0327\u0003\u0002\u0002\u0002\u00b8",
    "\u0330\u0003\u0002\u0002\u0002\u00ba\u0336\u0003\u0002\u0002\u0002\u00bc",
    "\u033b\u0003\u0002\u0002\u0002\u00be\u0346\u0003\u0002\u0002\u0002\u00c0",
    "\u034c\u0003\u0002\u0002\u0002\u00c2\u0350\u0003\u0002\u0002\u0002\u00c4",
    "\u0352\u0003\u0002\u0002\u0002\u00c6\u0359\u0003\u0002\u0002\u0002\u00c8",
    "\u035b\u0003\u0002\u0002\u0002\u00ca\u0365\u0003\u0002\u0002\u0002\u00cc",
    "\u0367\u0003\u0002\u0002\u0002\u00ce\u036d\u0003\u0002\u0002\u0002\u00d0",
    "\u0374\u0003\u0002\u0002\u0002\u00d2\u037b\u0003\u0002\u0002\u0002\u00d4",
    "\u0380\u0003\u0002\u0002\u0002\u00d6\u0384\u0003\u0002\u0002\u0002\u00d8",
    "\u0386\u0003\u0002\u0002\u0002\u00da\u038e\u0003\u0002\u0002\u0002\u00dc",
    "\u0390\u0003\u0002\u0002\u0002\u00de\u0396\u0003\u0002\u0002\u0002\u00e0",
    "\u039e\u0003\u0002\u0002\u0002\u00e2\u03a7\u0003\u0002\u0002\u0002\u00e4",
    "\u03b0\u0003\u0002\u0002\u0002\u00e6\u03b8\u0003\u0002\u0002\u0002\u00e8",
    "\u03c1\u0003\u0002\u0002\u0002\u00ea\u03c3\u0003\u0002\u0002\u0002\u00ec",
    "\u03c8\u0003\u0002\u0002\u0002\u00ee\u03cd\u0003\u0002\u0002\u0002\u00f0",
    "\u00f1\u0005\u0006\u0004\u0002\u00f1\u00f2\u0005\u0004\u0003\u0002\u00f2",
    "\u00f7\u0003\u0002\u0002\u0002\u00f3\u00f4\u0005\u0004\u0003\u0002\u00f4",
    "\u00f5\u0005\u0006\u0004\u0002\u00f5\u00f7\u0003\u0002\u0002\u0002\u00f6",
    "\u00f0\u0003\u0002\u0002\u0002\u00f6\u00f3\u0003\u0002\u0002\u0002\u00f7",
    "\u0003\u0003\u0002\u0002\u0002\u00f8\u00f9\u0005\u0006\u0004\u0002\u00f9",
    "\u00fa\u0005\u0004\u0003\u0002\u00fa\u00fd\u0003\u0002\u0002\u0002\u00fb",
    "\u00fd\u0003\u0002\u0002\u0002\u00fc\u00f8\u0003\u0002\u0002\u0002\u00fc",
    "\u00fb\u0003\u0002\u0002\u0002\u00fd\u0005\u0003\u0002\u0002\u0002\u00fe",
    "\u00ff\u0007(\u0002\u0002\u00ff\u0100\u0007I\u0002\u0002\u0100\u0101",
    "\u0005\n\u0006\u0002\u0101\u0102\u0005\b\u0005\u0002\u0102\u0007\u0003",
    "\u0002\u0002\u0002\u0103\u0106\u00076\u0002\u0002\u0104\u0106\u0003",
    "\u0002\u0002\u0002\u0105\u0103\u0003\u0002\u0002\u0002\u0105\u0104\u0003",
    "\u0002\u0002\u0002\u0106\t\u0003\u0002\u0002\u0002\u0107\u010c\u0005",
    "\u000e\b\u0002\u0108\u0109\u0007Z\u0002\u0002\u0109\u010a\u0007[\u0002",
    "\u0002\u010a\u010c\u0005\f\u0007\u0002\u010b\u0107\u0003\u0002\u0002",
    "\u0002\u010b\u0108\u0003\u0002\u0002\u0002\u010c\u000b\u0003\u0002\u0002",
    "\u0002\u010d\u0111\u0005\u000e\b\u0002\u010e\u010f\u0007`\u0002\u0002",
    "\u010f\u0111\u0005\u000e\b\u0002\u0110\u010d\u0003\u0002\u0002\u0002",
    "\u0110\u010e\u0003\u0002\u0002\u0002\u0111\r\u0003\u0002\u0002\u0002",
    "\u0112\u0113\u0005\u0012\n\u0002\u0113\u0114\u0005\u0010\t\u0002\u0114",
    "\u0117\u0003\u0002\u0002\u0002\u0115\u0117\u00058\u001d\u0002\u0116",
    "\u0112\u0003\u0002\u0002\u0002\u0116\u0115\u0003\u0002\u0002\u0002\u0117",
    "\u000f\u0003\u0002\u0002\u0002\u0118\u0119\u0005\u0012\n\u0002\u0119",
    "\u011a\u0005\u0010\t\u0002\u011a\u011d\u0003\u0002\u0002\u0002\u011b",
    "\u011d\u0003\u0002\u0002\u0002\u011c\u0118\u0003\u0002\u0002\u0002\u011c",
    "\u011b\u0003\u0002\u0002\u0002\u011d\u0011\u0003\u0002\u0002\u0002\u011e",
    "\u012f\u0005*\u0016\u0002\u011f\u012f\u0005,\u0017\u0002\u0120\u012f",
    "\u00058\u001d\u0002\u0121\u012f\u0005\u001c\u000f\u0002\u0122\u012f",
    "\u00052\u001a\u0002\u0123\u012f\u00056\u001c\u0002\u0124\u012f\u0005",
    ".\u0018\u0002\u0125\u012f\u00054\u001b\u0002\u0126\u012f\u0005:\u001e",
    "\u0002\u0127\u012f\u0005\"\u0012\u0002\u0128\u012f\u0005\u00b6\\\u0002",
    "\u0129\u012f\u0005\u00a4S\u0002\u012a\u012f\u0005\u0080A\u0002\u012b",
    "\u012f\u0005\u0014\u000b\u0002\u012c\u012f\u0005> \u0002\u012d\u012f",
    "\u0005@!\u0002\u012e\u011e\u0003\u0002\u0002\u0002\u012e\u011f\u0003",
    "\u0002\u0002\u0002\u012e\u0120\u0003\u0002\u0002\u0002\u012e\u0121\u0003",
    "\u0002\u0002\u0002\u012e\u0122\u0003\u0002\u0002\u0002\u012e\u0123\u0003",
    "\u0002\u0002\u0002\u012e\u0124\u0003\u0002\u0002\u0002\u012e\u0125\u0003",
    "\u0002\u0002\u0002\u012e\u0126\u0003\u0002\u0002\u0002\u012e\u0127\u0003",
    "\u0002\u0002\u0002\u012e\u0128\u0003\u0002\u0002\u0002\u012e\u0129\u0003",
    "\u0002\u0002\u0002\u012e\u012a\u0003\u0002\u0002\u0002\u012e\u012b\u0003",
    "\u0002\u0002\u0002\u012e\u012c\u0003\u0002\u0002\u0002\u012e\u012d\u0003",
    "\u0002\u0002\u0002\u012f\u0013\u0003\u0002\u0002\u0002\u0130\u0131\u0007",
    "\u0005\u0002\u0002\u0131\u0132\u0007I\u0002\u0002\u0132\u0133\u0005",
    "\u0016\f\u0002\u0133\u0015\u0003\u0002\u0002\u0002\u0134\u0135\u0007",
    "Z\u0002\u0002\u0135\u0138\u0005\u0018\r\u0002\u0136\u0138\u0003\u0002",
    "\u0002\u0002\u0137\u0134\u0003\u0002\u0002\u0002\u0137\u0136\u0003\u0002",
    "\u0002\u0002\u0138\u0017\u0003\u0002\u0002\u0002\u0139\u013a\u0005\\",
    "/\u0002\u013a\u013b\u0007[\u0002\u0002\u013b\u013c\u0005\u000e\b\u0002",
    "\u013c\u013d\u00076\u0002\u0002\u013d\u0143\u0003\u0002\u0002\u0002",
    "\u013e\u013f\u0007[\u0002\u0002\u013f\u0140\u0005\u000e\b\u0002\u0140",
    "\u0141\u00076\u0002\u0002\u0141\u0143\u0003\u0002\u0002\u0002\u0142",
    "\u0139\u0003\u0002\u0002\u0002\u0142\u013e\u0003\u0002\u0002\u0002\u0143",
    "\u0019\u0003\u0002\u0002\u0002\u0144\u0147\u0005\u00b6\\\u0002\u0145",
    "\u0147\u0005*\u0016\u0002\u0146\u0144\u0003\u0002\u0002\u0002\u0146",
    "\u0145\u0003\u0002\u0002\u0002\u0147\u001b\u0003\u0002\u0002\u0002\u0148",
    "\u0149\u0007\u0003\u0002\u0002\u0149\u014a\u0007I\u0002\u0002\u014a",
    "\u014b\u0005 \u0011\u0002\u014b\u014c\u0005\u001e\u0010\u0002\u014c",
    "\u014d\u00076\u0002\u0002\u014d\u001d\u0003\u0002\u0002\u0002\u014e",
    "\u014f\u0005*\u0016\u0002\u014f\u0150\u0005\u001e\u0010\u0002\u0150",
    "\u0156\u0003\u0002\u0002\u0002\u0151\u0152\u00054\u001b\u0002\u0152",
    "\u0153\u0005\u001e\u0010\u0002\u0153\u0156\u0003\u0002\u0002\u0002\u0154",
    "\u0156\u0003\u0002\u0002\u0002\u0155\u014e\u0003\u0002\u0002\u0002\u0155",
    "\u0151\u0003\u0002\u0002\u0002\u0155\u0154\u0003\u0002\u0002\u0002\u0156",
    "\u001f\u0003\u0002\u0002\u0002\u0157\u015a\u0005*\u0016\u0002\u0158",
    "\u015a\u00054\u001b\u0002\u0159\u0157\u0003\u0002\u0002\u0002\u0159",
    "\u0158\u0003\u0002\u0002\u0002\u015a!\u0003\u0002\u0002\u0002\u015b",
    "\u015c\u0007#\u0002\u0002\u015c\u015d\u0007I\u0002\u0002\u015d\u015e",
    "\u0005&\u0014\u0002\u015e\u015f\u0005$\u0013\u0002\u015f\u0160\u0007",
    "(\u0002\u0002\u0160\u0161\u0007I\u0002\u0002\u0161\u0162\u0007Z\u0002",
    "\u0002\u0162\u0163\u0005\u00d0i\u0002\u0163\u0164\u0007[\u0002\u0002",
    "\u0164\u0165\u0005(\u0015\u0002\u0165#\u0003\u0002\u0002\u0002\u0166",
    "\u016b\u0005*\u0016\u0002\u0167\u016b\u0005.\u0018\u0002\u0168\u016b",
    "\u00054\u001b\u0002\u0169\u016b\u0003\u0002\u0002\u0002\u016a\u0166",
    "\u0003\u0002\u0002\u0002\u016a\u0167\u0003\u0002\u0002\u0002\u016a\u0168",
    "\u0003\u0002\u0002\u0002\u016a\u0169\u0003\u0002\u0002\u0002\u016b%",
    "\u0003\u0002\u0002\u0002\u016c\u016f\u0005,\u0017\u0002\u016d\u016f",
    "\u0003\u0002\u0002\u0002\u016e\u016c\u0003\u0002\u0002\u0002\u016e\u016d",
    "\u0003\u0002\u0002\u0002\u016f\'\u0003\u0002\u0002\u0002\u0170\u0173",
    "\u0007`\u0002\u0002\u0171\u0173\u0003\u0002\u0002\u0002\u0172\u0170",
    "\u0003\u0002\u0002\u0002\u0172\u0171\u0003\u0002\u0002\u0002\u0173)",
    "\u0003\u0002\u0002\u0002\u0174\u0175\u0007\u0006\u0002\u0002\u0175\u0176",
    "\u0007I\u0002\u0002\u0176\u0177\u0007L\u0002\u0002\u0177\u0178\u0005",
    "\u00be`\u0002\u0178\u0179\u0005\u00c0a\u0002\u0179+\u0003\u0002\u0002",
    "\u0002\u017a\u017b\u0007\u0017\u0002\u0002\u017b\u017c\u0005\u00dco",
    "\u0002\u017c-\u0003\u0002\u0002\u0002\u017d\u017e\u0007?\u0002\u0002",
    "\u017e\u017f\u0007I\u0002\u0002\u017f\u0180\u00050\u0019\u0002\u0180",
    "/\u0003\u0002\u0002\u0002\u0181\u0182\u0007Z\u0002\u0002\u0182\u0183",
    "\u0005\\/\u0002\u0183\u0184\u0007[\u0002\u0002\u0184\u0185\u0005R*\u0002",
    "\u0185\u018a\u0003\u0002\u0002\u0002\u0186\u0187\u0005`1\u0002\u0187",
    "\u0188\u0005R*\u0002\u0188\u018a\u0003\u0002\u0002\u0002\u0189\u0181",
    "\u0003\u0002\u0002\u0002\u0189\u0186\u0003\u0002\u0002\u0002\u018a1",
    "\u0003\u0002\u0002\u0002\u018b\u018c\u0007>\u0002\u0002\u018c\u018d",
    "\u0007I\u0002\u0002\u018d\u018e\u0007U\u0002\u0002\u018e\u018f\u0007",
    "Z\u0002\u0002\u018f\u0190\u0005Z.\u0002\u0190\u0191\u0007[\u0002\u0002",
    "\u0191\u0192\u0007)\u0002\u0002\u0192\u0193\u0007I\u0002\u0002\u0193",
    "\u0194\u0007S\u0002\u0002\u0194\u0195\u0005\u00eav\u0002\u01953\u0003",
    "\u0002\u0002\u0002\u0196\u0197\u0007G\u0002\u0002\u0197\u0198\u0007",
    "I\u0002\u0002\u0198\u0199\u0007U\u0002\u0002\u0199\u019a\u0007\u0011",
    "\u0002\u0002\u019a\u019b\u0007Z\u0002\u0002\u019b\u019c\u0005V,\u0002",
    "\u019c\u019d\u0007[\u0002\u0002\u019d5\u0003\u0002\u0002\u0002\u019e",
    "\u019f\u0007\u0014\u0002\u0002\u019f\u01a0\u0005\u00dco\u0002\u01a0",
    "7\u0003\u0002\u0002\u0002\u01a1\u01a2\u0007C\u0002\u0002\u01a2\u01a3",
    "\u0005\u00a6T\u0002\u01a3\u01a4\u0007T\u0002\u0002\u01a4\u01a5\u0005",
    "\u000e\b\u0002\u01a5\u01a6\u0005d3\u0002\u01a6\u01ba\u0003\u0002\u0002",
    "\u0002\u01a7\u01a8\u0007\b\u0002\u0002\u01a8\u01a9\u0005\u00a6T\u0002",
    "\u01a9\u01aa\u0007T\u0002\u0002\u01aa\u01ab\u0005\u000e\b\u0002\u01ab",
    "\u01ac\u0005f4\u0002\u01ac\u01ba\u0003\u0002\u0002\u0002\u01ad\u01ae",
    "\u0007\n\u0002\u0002\u01ae\u01af\u0005B\"\u0002\u01af\u01b0\u0007T\u0002",
    "\u0002\u01b0\u01b1\u0005\u000e\b\u0002\u01b1\u01b2\u0005j6\u0002\u01b2",
    "\u01ba\u0003\u0002\u0002\u0002\u01b3\u01b4\u0007A\u0002\u0002\u01b4",
    "\u01b5\u0005D#\u0002\u01b5\u01b6\u0007T\u0002\u0002\u01b6\u01b7\u0005",
    "\u000e\b\u0002\u01b7\u01b8\u0005h5\u0002\u01b8\u01ba\u0003\u0002\u0002",
    "\u0002\u01b9\u01a1\u0003\u0002\u0002\u0002\u01b9\u01a7\u0003\u0002\u0002",
    "\u0002\u01b9\u01ad\u0003\u0002\u0002\u0002\u01b9\u01b3\u0003\u0002\u0002",
    "\u0002\u01ba9\u0003\u0002\u0002\u0002\u01bb\u01bc\u0005P)\u0002\u01bc",
    "\u01bd\u0007I\u0002\u0002\u01bd\u01be\u0005<\u001f\u0002\u01be\u01bf",
    "\u0005N(\u0002\u01bf\u01c0\u0005\u000e\b\u0002\u01c0\u01c1\u00076\u0002",
    "\u0002\u01c1;\u0003\u0002\u0002\u0002\u01c2\u01c8\u0005\u00ecw\u0002",
    "\u01c3\u01c4\u0007Z\u0002\u0002\u01c4\u01c5\u0005\u00ecw\u0002\u01c5",
    "\u01c6\u0007[\u0002\u0002\u01c6\u01c8\u0003\u0002\u0002\u0002\u01c7",
    "\u01c2\u0003\u0002\u0002\u0002\u01c7\u01c3\u0003\u0002\u0002\u0002\u01c8",
    "=\u0003\u0002\u0002\u0002\u01c9\u01ca\u0007\u001d\u0002\u0002\u01ca",
    "\u01cb\u0005\u000e\b\u0002\u01cb\u01cc\u00076\u0002\u0002\u01cc?\u0003",
    "\u0002\u0002\u0002\u01cd\u01ce\u0007$\u0002\u0002\u01ce\u01cf\u0005",
    "\u000e\b\u0002\u01cf\u01d0\u00076\u0002\u0002\u01d0A\u0003\u0002\u0002",
    "\u0002\u01d1\u01d2\u0003\u0002\u0002\u0002\u01d2C\u0003\u0002\u0002",
    "\u0002\u01d3\u01d4\u0005H%\u0002\u01d4\u01d5\u0005F$\u0002\u01d5E\u0003",
    "\u0002\u0002\u0002\u01d6\u01d7\u0007M\u0002\u0002\u01d7\u01da\u0005",
    "D#\u0002\u01d8\u01da\u0003\u0002\u0002\u0002\u01d9\u01d6\u0003\u0002",
    "\u0002\u0002\u01d9\u01d8\u0003\u0002\u0002\u0002\u01daG\u0003\u0002",
    "\u0002\u0002\u01db\u01dc\u0005\u00c4c\u0002\u01dc\u01dd\u0007L\u0002",
    "\u0002\u01dd\u01de\u0005\u00c2b\u0002\u01de\u01df\u0007=\u0002\u0002",
    "\u01df\u01e0\u0005\u00c2b\u0002\u01e0I\u0003\u0002\u0002\u0002\u01e1",
    "\u01e2\u0005\u00c2b\u0002\u01e2\u01e3\u0007=\u0002\u0002\u01e3\u01e4",
    "\u0005\u00c2b\u0002\u01e4\u01e5\u0005L\'\u0002\u01e5K\u0003\u0002\u0002",
    "\u0002\u01e6\u01e7\u0007M\u0002\u0002\u01e7\u01ea\u0005J&\u0002\u01e8",
    "\u01ea\u0003\u0002\u0002\u0002\u01e9\u01e6\u0003\u0002\u0002\u0002\u01e9",
    "\u01e8\u0003\u0002\u0002\u0002\u01eaM\u0003\u0002\u0002\u0002\u01eb",
    "\u01ec\u0007)\u0002\u0002\u01ec\u01ef\u0007I\u0002\u0002\u01ed\u01ef",
    "\u0003\u0002\u0002\u0002\u01ee\u01eb\u0003\u0002\u0002\u0002\u01ee\u01ed",
    "\u0003\u0002\u0002\u0002\u01efO\u0003\u0002\u0002\u0002\u01f0\u01f1",
    "\t\u0002\u0002\u0002\u01f1Q\u0003\u0002\u0002\u0002\u01f2\u01f3\u0007",
    "O\u0002\u0002\u01f3\u01f4\u00052\u001a\u0002\u01f4\u01f5\u0007N\u0002",
    "\u0002\u01f5\u01fc\u0003\u0002\u0002\u0002\u01f6\u01f7\u0007)\u0002",
    "\u0002\u01f7\u01f8\u0007I\u0002\u0002\u01f8\u01f9\u0007S\u0002\u0002",
    "\u01f9\u01fc\u0005T+\u0002\u01fa\u01fc\u0003\u0002\u0002\u0002\u01fb",
    "\u01f2\u0003\u0002\u0002\u0002\u01fb\u01f6\u0003\u0002\u0002\u0002\u01fb",
    "\u01fa\u0003\u0002\u0002\u0002\u01fcS\u0003\u0002\u0002\u0002\u01fd",
    "\u0200\u0005\u00eav\u0002\u01fe\u0200\u0007I\u0002\u0002\u01ff\u01fd",
    "\u0003\u0002\u0002\u0002\u01ff\u01fe\u0003\u0002\u0002\u0002\u0200U",
    "\u0003\u0002\u0002\u0002\u0201\u0202\u0005\u00dco\u0002\u0202\u0203",
    "\u0007S\u0002\u0002\u0203\u0204\u0005\u00eav\u0002\u0204\u0205\u0005",
    "X-\u0002\u0205W\u0003\u0002\u0002\u0002\u0206\u0207\u0007\\\u0002\u0002",
    "\u0207\u020c\u0005V,\u0002\u0208\u0209\u0007M\u0002\u0002\u0209\u020c",
    "\u0005V,\u0002\u020a\u020c\u0003\u0002\u0002\u0002\u020b\u0206\u0003",
    "\u0002\u0002\u0002\u020b\u0208\u0003\u0002\u0002\u0002\u020b\u020a\u0003",
    "\u0002\u0002\u0002\u020cY\u0003\u0002\u0002\u0002\u020d\u020e\u0005",
    "\u00e6t\u0002\u020e[\u0003\u0002\u0002\u0002\u020f\u0210\u0007I\u0002",
    "\u0002\u0210\u0213\u0005^0\u0002\u0211\u0213\u0003\u0002\u0002\u0002",
    "\u0212\u020f\u0003\u0002\u0002\u0002\u0212\u0211\u0003\u0002\u0002\u0002",
    "\u0213]\u0003\u0002\u0002\u0002\u0214\u0215\u0007S\u0002\u0002\u0215",
    "\u0216\u0005\u00e0q\u0002\u0216\u0217\u0005\\/\u0002\u0217\u021c\u0003",
    "\u0002\u0002\u0002\u0218\u0219\u0007M\u0002\u0002\u0219\u021c\u0005",
    "\\/\u0002\u021a\u021c\u0003\u0002\u0002\u0002\u021b\u0214\u0003\u0002",
    "\u0002\u0002\u021b\u0218\u0003\u0002\u0002\u0002\u021b\u021a\u0003\u0002",
    "\u0002\u0002\u021c_\u0003\u0002\u0002\u0002\u021d\u021e\u0005\u00e0",
    "q\u0002\u021e\u021f\u0005b2\u0002\u021f\u0222\u0003\u0002\u0002\u0002",
    "\u0220\u0222\u0003\u0002\u0002\u0002\u0221\u021d\u0003\u0002\u0002\u0002",
    "\u0221\u0220\u0003\u0002\u0002\u0002\u0222a\u0003\u0002\u0002\u0002",
    "\u0223\u0224\u0007M\u0002\u0002\u0224\u0229\u0005`1\u0002\u0225\u0226",
    "\u0007S\u0002\u0002\u0226\u0229\u0005`1\u0002\u0227\u0229\u0003\u0002",
    "\u0002\u0002\u0228\u0223\u0003\u0002\u0002\u0002\u0228\u0225\u0003\u0002",
    "\u0002\u0002\u0228\u0227\u0003\u0002\u0002\u0002\u0229c\u0003\u0002",
    "\u0002\u0002\u022a\u022b\u0007`\u0002\u0002\u022b\u022e\u0007B\u0002",
    "\u0002\u022c\u022e\u0007B\u0002\u0002\u022d\u022a\u0003\u0002\u0002",
    "\u0002\u022d\u022c\u0003\u0002\u0002\u0002\u022ee\u0003\u0002\u0002",
    "\u0002\u022f\u0230\u0007`\u0002\u0002\u0230\u0233\u0007\t\u0002\u0002",
    "\u0231\u0233\u0007\t\u0002\u0002\u0232\u022f\u0003\u0002\u0002\u0002",
    "\u0232\u0231\u0003\u0002\u0002\u0002\u0233g\u0003\u0002\u0002\u0002",
    "\u0234\u0235\u0007`\u0002\u0002\u0235\u0238\u0007\u000b\u0002\u0002",
    "\u0236\u0238\u0007\u000b\u0002\u0002\u0237\u0234\u0003\u0002\u0002\u0002",
    "\u0237\u0236\u0003\u0002\u0002\u0002\u0238i\u0003\u0002\u0002\u0002",
    "\u0239\u023a\u0007`\u0002\u0002\u023a\u023d\u0007\n\u0002\u0002\u023b",
    "\u023d\u0007\n\u0002\u0002\u023c\u0239\u0003\u0002\u0002\u0002\u023c",
    "\u023b\u0003\u0002\u0002\u0002\u023dk\u0003\u0002\u0002\u0002\u023e",
    "\u023f\u0007Z\u0002\u0002\u023f\u0240\u0005n8\u0002\u0240\u0241\u0007",
    "[\u0002\u0002\u0241m\u0003\u0002\u0002\u0002\u0242\u0243\u0005p9\u0002",
    "\u0243\u0244\u0007S\u0002\u0002\u0244\u0245\u0005\u00eav\u0002\u0245",
    "\u024e\u0003\u0002\u0002\u0002\u0246\u0247\u0005p9\u0002\u0247\u0248",
    "\u0007S\u0002\u0002\u0248\u0249\u0005\u00eav\u0002\u0249\u024a\u0007",
    "\\\u0002\u0002\u024a\u024b\u0005n8\u0002\u024b\u024e\u0003\u0002\u0002",
    "\u0002\u024c\u024e\u0003\u0002\u0002\u0002\u024d\u0242\u0003\u0002\u0002",
    "\u0002\u024d\u0246\u0003\u0002\u0002\u0002\u024d\u024c\u0003\u0002\u0002",
    "\u0002\u024eo\u0003\u0002\u0002\u0002\u024f\u0254\u0007I\u0002\u0002",
    "\u0250\u0254\u0005r:\u0002\u0251\u0252\u00078\u0002\u0002\u0252\u0254",
    "\u0005r:\u0002\u0253\u024f\u0003\u0002\u0002\u0002\u0253\u0250\u0003",
    "\u0002\u0002\u0002\u0253\u0251\u0003\u0002\u0002\u0002\u0254q\u0003",
    "\u0002\u0002\u0002\u0255\u0256\u0007O\u0002\u0002\u0256\u0257\u0005",
    "\u00dco\u0002\u0257\u0258\u0007N\u0002\u0002\u0258\u025b\u0003\u0002",
    "\u0002\u0002\u0259\u025b\u0003\u0002\u0002\u0002\u025a\u0255\u0003\u0002",
    "\u0002\u0002\u025a\u0259\u0003\u0002\u0002\u0002\u025bs\u0003\u0002",
    "\u0002\u0002\u025c\u025f\u0005v<\u0002\u025d\u025f\u0003\u0002\u0002",
    "\u0002\u025e\u025c\u0003\u0002\u0002\u0002\u025e\u025d\u0003\u0002\u0002",
    "\u0002\u025fu\u0003\u0002\u0002\u0002\u0260\u0263\u0005\u00a6T\u0002",
    "\u0261\u0263\u0005\u00be`\u0002\u0262\u0260\u0003\u0002\u0002\u0002",
    "\u0262\u0261\u0003\u0002\u0002\u0002\u0263w\u0003\u0002\u0002\u0002",
    "\u0264\u0265\u0005\u0080A\u0002\u0265\u0266\u0005~@\u0002\u0266\u026c",
    "\u0003\u0002\u0002\u0002\u0267\u0268\u0007k\u0002\u0002\u0268\u026c",
    "\u0005~@\u0002\u0269\u026a\u0007I\u0002\u0002\u026a\u026c\u0005z>\u0002",
    "\u026b\u0264\u0003\u0002\u0002\u0002\u026b\u0267\u0003\u0002\u0002\u0002",
    "\u026b\u0269\u0003\u0002\u0002\u0002\u026cy\u0003\u0002\u0002\u0002",
    "\u026d\u026e\u0007d\u0002\u0002\u026e\u026f\u0007I\u0002\u0002\u026f",
    "\u0277\u0005|?\u0002\u0270\u0271\u0005\u00ceh\u0002\u0271\u0272\u0005",
    "~@\u0002\u0272\u0277\u0003\u0002\u0002\u0002\u0273\u0274\u0007M\u0002",
    "\u0002\u0274\u0277\u0005x=\u0002\u0275\u0277\u0003\u0002\u0002\u0002",
    "\u0276\u026d\u0003\u0002\u0002\u0002\u0276\u0270\u0003\u0002\u0002\u0002",
    "\u0276\u0273\u0003\u0002\u0002\u0002\u0276\u0275\u0003\u0002\u0002\u0002",
    "\u0277{\u0003\u0002\u0002\u0002\u0278\u0279\u0005\u00ceh\u0002\u0279",
    "\u027a\u0005~@\u0002\u027a\u027d\u0003\u0002\u0002\u0002\u027b\u027d",
    "\u0005~@\u0002\u027c\u0278\u0003\u0002\u0002\u0002\u027c\u027b\u0003",
    "\u0002\u0002\u0002\u027d}\u0003\u0002\u0002\u0002\u027e\u027f\u0007",
    "M\u0002\u0002\u027f\u0282\u0005x=\u0002\u0280\u0282\u0003\u0002\u0002",
    "\u0002\u0281\u027e\u0003\u0002\u0002\u0002\u0281\u0280\u0003\u0002\u0002",
    "\u0002\u0282\u007f\u0003\u0002\u0002\u0002\u0283\u0287\u0005\u0082B",
    "\u0002\u0284\u0287\u0005\u0084C\u0002\u0285\u0287\u0005\u0086D\u0002",
    "\u0286\u0283\u0003\u0002\u0002\u0002\u0286\u0284\u0003\u0002\u0002\u0002",
    "\u0286\u0285\u0003\u0002\u0002\u0002\u0287\u0081\u0003\u0002\u0002\u0002",
    "\u0288\u0289\u0005\u0088E\u0002\u0289\u028a\u0007Z\u0002\u0002\u028a",
    "\u028b\u0005\u008eH\u0002\u028b\u028c\u0007[\u0002\u0002\u028c\u028d",
    "\u0005\u00d6l\u0002\u028d\u029b\u0003\u0002\u0002\u0002\u028e\u028f",
    "\u0005\u008aF\u0002\u028f\u0290\u0007Z\u0002\u0002\u0290\u0291\u0005",
    "\u00eav\u0002\u0291\u0292\u0007[\u0002\u0002\u0292\u0293\u0005\u00d6",
    "l\u0002\u0293\u029b\u0003\u0002\u0002\u0002\u0294\u0295\u0005\u008c",
    "G\u0002\u0295\u0296\u0007Z\u0002\u0002\u0296\u0297\u0007I\u0002\u0002",
    "\u0297\u0298\u0007[\u0002\u0002\u0298\u0299\u0005\u00d6l\u0002\u0299",
    "\u029b\u0003\u0002\u0002\u0002\u029a\u0288\u0003\u0002\u0002\u0002\u029a",
    "\u028e\u0003\u0002\u0002\u0002\u029a\u0294\u0003\u0002\u0002\u0002\u029b",
    "\u0083\u0003\u0002\u0002\u0002\u029c\u029d\u0005\u0090I\u0002\u029d",
    "\u029e\u0007Z\u0002\u0002\u029e\u029f\u0007I\u0002\u0002\u029f\u02a0",
    "\u0005\u0096L\u0002\u02a0\u02a1\u0007[\u0002\u0002\u02a1\u02a2\u0005",
    "\u00d6l\u0002\u02a2\u0085\u0003\u0002\u0002\u0002\u02a3\u02a4\u0005",
    "\u0092J\u0002\u02a4\u02a5\u0007Z\u0002\u0002\u02a5\u02a6\u0005x=\u0002",
    "\u02a6\u02a7\u0007[\u0002\u0002\u02a7\u02a8\u0005\u00d6l\u0002\u02a8",
    "\u02b0\u0003\u0002\u0002\u0002\u02a9\u02aa\u0005\u0094K\u0002\u02aa",
    "\u02ab\u0007Z\u0002\u0002\u02ab\u02ac\u0005\u0098M\u0002\u02ac\u02ad",
    "\u0007[\u0002\u0002\u02ad\u02ae\u0005\u00d6l\u0002\u02ae\u02b0\u0003",
    "\u0002\u0002\u0002\u02af\u02a3\u0003\u0002\u0002\u0002\u02af\u02a9\u0003",
    "\u0002\u0002\u0002\u02b0\u0087\u0003\u0002\u0002\u0002\u02b1\u02b2\t",
    "\u0003\u0002\u0002\u02b2\u0089\u0003\u0002\u0002\u0002\u02b3\u02b4\t",
    "\u0004\u0002\u0002\u02b4\u008b\u0003\u0002\u0002\u0002\u02b5\u02b6\t",
    "\u0005\u0002\u0002\u02b6\u008d\u0003\u0002\u0002\u0002\u02b7\u02ba\u0005",
    "\u00acW\u0002\u02b8\u02ba\u0007]\u0002\u0002\u02b9\u02b7\u0003\u0002",
    "\u0002\u0002\u02b9\u02b8\u0003\u0002\u0002\u0002\u02ba\u008f\u0003\u0002",
    "\u0002\u0002\u02bb\u02bc\t\u0006\u0002\u0002\u02bc\u0091\u0003\u0002",
    "\u0002\u0002\u02bd\u02be\u00071\u0002\u0002\u02be\u0093\u0003\u0002",
    "\u0002\u0002\u02bf\u02c0\u0007F\u0002\u0002\u02c0\u0095\u0003\u0002",
    "\u0002\u0002\u02c1\u02c2\u0007M\u0002\u0002\u02c2\u02c5\u0007]\u0002",
    "\u0002\u02c3\u02c5\u0003\u0002\u0002\u0002\u02c4\u02c1\u0003\u0002\u0002",
    "\u0002\u02c4\u02c3\u0003\u0002\u0002\u0002\u02c5\u0097\u0003\u0002\u0002",
    "\u0002\u02c6\u02c9\u0005\u009aN\u0002\u02c7\u02c9\u0005\u00d0i\u0002",
    "\u02c8\u02c6\u0003\u0002\u0002\u0002\u02c8\u02c7\u0003\u0002\u0002\u0002",
    "\u02c9\u0099\u0003\u0002\u0002\u0002\u02ca\u02cb\u0007k\u0002\u0002",
    "\u02cb\u02cc\u0005\u009cO\u0002\u02cc\u009b\u0003\u0002\u0002\u0002",
    "\u02cd\u02ce\u0007M\u0002\u0002\u02ce\u02d1\u0005\u009aN\u0002\u02cf",
    "\u02d1\u0003\u0002\u0002\u0002\u02d0\u02cd\u0003\u0002\u0002\u0002\u02d0",
    "\u02cf\u0003\u0002\u0002\u0002\u02d1\u009d\u0003\u0002\u0002\u0002\u02d2",
    "\u02d3\u0007L\u0002\u0002\u02d3\u02d6\u0005\u00be`\u0002\u02d4\u02d6",
    "\u0003\u0002\u0002\u0002\u02d5\u02d2\u0003\u0002\u0002\u0002\u02d5\u02d4",
    "\u0003\u0002\u0002\u0002\u02d6\u009f\u0003\u0002\u0002\u0002\u02d7\u02d8",
    "\u0005\u00a2R\u0002\u02d8\u02d9\u0005\u00a0Q\u0002\u02d9\u00a1\u0003",
    "\u0002\u0002\u0002\u02da\u02db\u0005\u00a4S\u0002\u02db\u00a3\u0003",
    "\u0002\u0002\u0002\u02dc\u02e2\u0007\f\u0002\u0002\u02dd\u02e2\u0007",
    "\r\u0002\u0002\u02de\u02e2\u0007\u001f\u0002\u0002\u02df\u02e2\u0005",
    "\u00b6\\\u0002\u02e0\u02e2\u0005\u00acW\u0002\u02e1\u02dc\u0003\u0002",
    "\u0002\u0002\u02e1\u02dd\u0003\u0002\u0002\u0002\u02e1\u02de\u0003\u0002",
    "\u0002\u0002\u02e1\u02df\u0003\u0002\u0002\u0002\u02e1\u02e0\u0003\u0002",
    "\u0002\u0002\u02e2\u00a5\u0003\u0002\u0002\u0002\u02e3\u02e4\u0007Z",
    "\u0002\u0002\u02e4\u02e5\u0005\u00c2b\u0002\u02e5\u02e6\u0005\u00ca",
    "f\u0002\u02e6\u02e7\u0005\u00c2b\u0002\u02e7\u02e8\u0005\u00a8U\u0002",
    "\u02e8\u02ef\u0003\u0002\u0002\u0002\u02e9\u02ea\u0005\u00c2b\u0002",
    "\u02ea\u02eb\u0005\u00caf\u0002\u02eb\u02ec\u0005\u00c2b\u0002\u02ec",
    "\u02ed\u0005\u00aaV\u0002\u02ed\u02ef\u0003\u0002\u0002\u0002\u02ee",
    "\u02e3\u0003\u0002\u0002\u0002\u02ee\u02e9\u0003\u0002\u0002\u0002\u02ef",
    "\u00a7\u0003\u0002\u0002\u0002\u02f0\u02f1\u0005\u00caf\u0002\u02f1",
    "\u02f2\u0005\u00c2b\u0002\u02f2\u02f3\u0007[\u0002\u0002\u02f3\u02f6",
    "\u0003\u0002\u0002\u0002\u02f4\u02f6\u0007[\u0002\u0002\u02f5\u02f0",
    "\u0003\u0002\u0002\u0002\u02f5\u02f4\u0003\u0002\u0002\u0002\u02f6\u00a9",
    "\u0003\u0002\u0002\u0002\u02f7\u02f8\u0005\u00caf\u0002\u02f8\u02f9",
    "\u0005\u00c2b\u0002\u02f9\u02fc\u0003\u0002\u0002\u0002\u02fa\u02fc",
    "\u0003\u0002\u0002\u0002\u02fb\u02f7\u0003\u0002\u0002\u0002\u02fb\u02fa",
    "\u0003\u0002\u0002\u0002\u02fc\u00ab\u0003\u0002\u0002\u0002\u02fd\u02fe",
    "\u0007I\u0002\u0002\u02fe\u02ff\u0005\u00aeX\u0002\u02ff\u00ad\u0003",
    "\u0002\u0002\u0002\u0300\u0301\u0007d\u0002\u0002\u0301\u0314\u0007",
    "I\u0002\u0002\u0302\u0314\u0007^\u0002\u0002\u0303\u0314\u0007a\u0002",
    "\u0002\u0304\u0305\u0007M\u0002\u0002\u0305\u0314\u0005\u00dco\u0002",
    "\u0306\u0307\u0005\u00c8e\u0002\u0307\u0308\u0005\u00b0Y\u0002\u0308",
    "\u0314\u0003\u0002\u0002\u0002\u0309\u030a\u0005\u00b2Z\u0002\u030a",
    "\u030b\u0007L\u0002\u0002\u030b\u030c\u0005\u00b0Y\u0002\u030c\u0314",
    "\u0003\u0002\u0002\u0002\u030d\u030e\u0007L\u0002\u0002\u030e\u0314",
    "\u0005\u00b0Y\u0002\u030f\u0310\u0007e\u0002\u0002\u0310\u0314\u0005",
    "\u00b0Y\u0002\u0311\u0314\u0005\u00ccg\u0002\u0312\u0314\u0003\u0002",
    "\u0002\u0002\u0313\u0300\u0003\u0002\u0002\u0002\u0313\u0302\u0003\u0002",
    "\u0002\u0002\u0313\u0303\u0003\u0002\u0002\u0002\u0313\u0304\u0003\u0002",
    "\u0002\u0002\u0313\u0306\u0003\u0002\u0002\u0002\u0313\u0309\u0003\u0002",
    "\u0002\u0002\u0313\u030d\u0003\u0002\u0002\u0002\u0313\u030f\u0003\u0002",
    "\u0002\u0002\u0313\u0311\u0003\u0002\u0002\u0002\u0313\u0312\u0003\u0002",
    "\u0002\u0002\u0314\u00af\u0003\u0002\u0002\u0002\u0315\u0316\u0005\u00be",
    "`\u0002\u0316\u0317\u0005\u00c0a\u0002\u0317\u0318\u0005\u00d6l\u0002",
    "\u0318\u031e\u0003\u0002\u0002\u0002\u0319\u031e\u0005\u00ccg\u0002",
    "\u031a\u031b\u0007\u0007\u0002\u0002\u031b\u031c\u0007I\u0002\u0002",
    "\u031c\u031e\u0005\u00ccg\u0002\u031d\u0315\u0003\u0002\u0002\u0002",
    "\u031d\u0319\u0003\u0002\u0002\u0002\u031d\u031a\u0003\u0002\u0002\u0002",
    "\u031e\u00b1\u0003\u0002\u0002\u0002\u031f\u0320\u0005r:\u0002\u0320",
    "\u0321\u0005\u00b4[\u0002\u0321\u00b3\u0003\u0002\u0002\u0002\u0322",
    "\u0323\u0007M\u0002\u0002\u0323\u0326\u0005\u00b2Z\u0002\u0324\u0326",
    "\u0003\u0002\u0002\u0002\u0325\u0322\u0003\u0002\u0002\u0002\u0325\u0324",
    "\u0003\u0002\u0002\u0002\u0326\u00b5\u0003\u0002\u0002\u0002\u0327\u0328",
    "\u0007:\u0002\u0002\u0328\u0329\u0007I\u0002\u0002\u0329\u032a\u0005",
    "\u00b8]\u0002\u032a\u00b7\u0003\u0002\u0002\u0002\u032b\u032c\u0007",
    "S\u0002\u0002\u032c\u0331\u0005\u00ba^\u0002\u032d\u032e\u0005\u00de",
    "p\u0002\u032e\u032f\u0005\u00bc_\u0002\u032f\u0331\u0003\u0002\u0002",
    "\u0002\u0330\u032b\u0003\u0002\u0002\u0002\u0330\u032d\u0003\u0002\u0002",
    "\u0002\u0331\u00b9\u0003\u0002\u0002\u0002\u0332\u0333\u0005\u00eav",
    "\u0002\u0333\u0334\u0005\u00dan\u0002\u0334\u0337\u0003\u0002\u0002",
    "\u0002\u0335\u0337\u0005\u00d0i\u0002\u0336\u0332\u0003\u0002\u0002",
    "\u0002\u0336\u0335\u0003\u0002\u0002\u0002\u0337\u00bb\u0003\u0002\u0002",
    "\u0002\u0338\u0339\u0007S\u0002\u0002\u0339\u033c\u0005\u00eav\u0002",
    "\u033a\u033c\u0003\u0002\u0002\u0002\u033b\u0338\u0003\u0002\u0002\u0002",
    "\u033b\u033a\u0003\u0002\u0002\u0002\u033c\u00bd\u0003\u0002\u0002\u0002",
    "\u033d\u033e\u0007Z\u0002\u0002\u033e\u033f\u0005\u00c2b\u0002\u033f",
    "\u0340\u0005\u00c0a\u0002\u0340\u0341\u0007[\u0002\u0002\u0341\u0342",
    "\u0005\u00d6l\u0002\u0342\u0347\u0003\u0002\u0002\u0002\u0343\u0344",
    "\u0005\u00c2b\u0002\u0344\u0345\u0005\u00c0a\u0002\u0345\u0347\u0003",
    "\u0002\u0002\u0002\u0346\u033d\u0003\u0002\u0002\u0002\u0346\u0343\u0003",
    "\u0002\u0002\u0002\u0347\u00bf\u0003\u0002\u0002\u0002\u0348\u0349\u0005",
    "\u00c8e\u0002\u0349\u034a\u0005\u00be`\u0002\u034a\u034d\u0003\u0002",
    "\u0002\u0002\u034b\u034d\u0003\u0002\u0002\u0002\u034c\u0348\u0003\u0002",
    "\u0002\u0002\u034c\u034b\u0003\u0002\u0002\u0002\u034d\u00c1\u0003\u0002",
    "\u0002\u0002\u034e\u0351\u0005\u00d0i\u0002\u034f\u0351\u0007]\u0002",
    "\u0002\u0350\u034e\u0003\u0002\u0002\u0002\u0350\u034f\u0003\u0002\u0002",
    "\u0002\u0351\u00c3\u0003\u0002\u0002\u0002\u0352\u0353\u0007I\u0002",
    "\u0002\u0353\u0354\u0005\u00c6d\u0002\u0354\u00c5\u0003\u0002\u0002",
    "\u0002\u0355\u0356\u0007d\u0002\u0002\u0356\u0357\u0007I\u0002\u0002",
    "\u0357\u035a\u0005\u00c4c\u0002\u0358\u035a\u0003\u0002\u0002\u0002",
    "\u0359\u0355\u0003\u0002\u0002\u0002\u0359\u0358\u0003\u0002\u0002\u0002",
    "\u035a\u00c7\u0003\u0002\u0002\u0002\u035b\u035c\t\u0007\u0002\u0002",
    "\u035c\u00c9\u0003\u0002\u0002\u0002\u035d\u0366\u0007R\u0002\u0002",
    "\u035e\u0366\u0007V\u0002\u0002\u035f\u0366\u0007W\u0002\u0002\u0360",
    "\u0366\u0007U\u0002\u0002\u0361\u0362\u0007V\u0002\u0002\u0362\u0366",
    "\u0007U\u0002\u0002\u0363\u0364\u0007W\u0002\u0002\u0364\u0366\u0007",
    "U\u0002\u0002\u0365\u035d\u0003\u0002\u0002\u0002\u0365\u035e\u0003",
    "\u0002\u0002\u0002\u0365\u035f\u0003\u0002\u0002\u0002\u0365\u0360\u0003",
    "\u0002\u0002\u0002\u0365\u0361\u0003\u0002\u0002\u0002\u0365\u0363\u0003",
    "\u0002\u0002\u0002\u0366\u00cb\u0003\u0002\u0002\u0002\u0367\u0368\u0007",
    "Z\u0002\u0002\u0368\u0369\u0005\u00be`\u0002\u0369\u036a\u0005\u00c0",
    "a\u0002\u036a\u036b\u0007[\u0002\u0002\u036b\u036c\u0005\u00d6l\u0002",
    "\u036c\u00cd\u0003\u0002\u0002\u0002\u036d\u036e\u0007Z\u0002\u0002",
    "\u036e\u036f\u0005\u00d0i\u0002\u036f\u0370\u0007[\u0002\u0002\u0370",
    "\u00cf\u0003\u0002\u0002\u0002\u0371\u0372\u0007I\u0002\u0002\u0372",
    "\u0375\u0005\u00d2j\u0002\u0373\u0375\u0003\u0002\u0002\u0002\u0374",
    "\u0371\u0003\u0002\u0002\u0002\u0374\u0373\u0003\u0002\u0002\u0002\u0375",
    "\u00d1\u0003\u0002\u0002\u0002\u0376\u037c\u0005\u00d4k\u0002\u0377",
    "\u0378\u0007d\u0002\u0002\u0378\u0379\u0007I\u0002\u0002\u0379\u037c",
    "\u0005\u00d4k\u0002\u037a\u037c\u0003\u0002\u0002\u0002\u037b\u0376",
    "\u0003\u0002\u0002\u0002\u037b\u0377\u0003\u0002\u0002\u0002\u037b\u037a",
    "\u0003\u0002\u0002\u0002\u037c\u00d3\u0003\u0002\u0002\u0002\u037d\u037e",
    "\u0007M\u0002\u0002\u037e\u0381\u0005\u00d0i\u0002\u037f\u0381\u0003",
    "\u0002\u0002\u0002\u0380\u037d\u0003\u0002\u0002\u0002\u0380\u037f\u0003",
    "\u0002\u0002\u0002\u0381\u00d5\u0003\u0002\u0002\u0002\u0382\u0385\u0007",
    "\\\u0002\u0002\u0383\u0385\u0003\u0002\u0002\u0002\u0384\u0382\u0003",
    "\u0002\u0002\u0002\u0384\u0383\u0003\u0002\u0002\u0002\u0385\u00d7\u0003",
    "\u0002\u0002\u0002\u0386\u0387\u0007I\u0002\u0002\u0387\u0388\u0007",
    "S\u0002\u0002\u0388\u0389\u0005\u00eav\u0002\u0389\u038a\u0005\u00da",
    "n\u0002\u038a\u00d9\u0003\u0002\u0002\u0002\u038b\u038c\u0007M\u0002",
    "\u0002\u038c\u038f\u0005\u00d8m\u0002\u038d\u038f\u0003\u0002\u0002",
    "\u0002\u038e\u038b\u0003\u0002\u0002\u0002\u038e\u038d\u0003\u0002\u0002",
    "\u0002\u038f\u00db\u0003\u0002\u0002\u0002\u0390\u0391\u0007I\u0002",
    "\u0002\u0391\u0392\u0005\u00dep\u0002\u0392\u00dd\u0003\u0002\u0002",
    "\u0002\u0393\u0394\u0007M\u0002\u0002\u0394\u0397\u0005\u00dco\u0002",
    "\u0395\u0397\u0003\u0002\u0002\u0002\u0396\u0393\u0003\u0002\u0002\u0002",
    "\u0396\u0395\u0003\u0002\u0002\u0002\u0397\u00df\u0003\u0002\u0002\u0002",
    "\u0398\u0399\u0007I\u0002\u0002\u0399\u039f\u0005\u00e4s\u0002\u039a",
    "\u039b\u0005\u00eav\u0002\u039b\u039c\u0005\u00e2r\u0002\u039c\u039f",
    "\u0003\u0002\u0002\u0002\u039d\u039f\u0003\u0002\u0002\u0002\u039e\u0398",
    "\u0003\u0002\u0002\u0002\u039e\u039a\u0003\u0002\u0002\u0002\u039e\u039d",
    "\u0003\u0002\u0002\u0002\u039f\u00e1\u0003\u0002\u0002\u0002\u03a0\u03a8",
    "\u0005\u00e4s\u0002\u03a1\u03a2\u0007Z\u0002\u0002\u03a2\u03a3\u0005",
    "\u00e0q\u0002\u03a3\u03a4\u0007[\u0002\u0002\u03a4\u03a5\u0005\u00e4",
    "s\u0002\u03a5\u03a8\u0003\u0002\u0002\u0002\u03a6\u03a8\u0003\u0002",
    "\u0002\u0002\u03a7\u03a0\u0003\u0002\u0002\u0002\u03a7\u03a1\u0003\u0002",
    "\u0002\u0002\u03a7\u03a6\u0003\u0002\u0002\u0002\u03a8\u00e3\u0003\u0002",
    "\u0002\u0002\u03a9\u03aa\u0007M\u0002\u0002\u03aa\u03b1\u0005\u00e0",
    "q\u0002\u03ab\u03ac\u0007S\u0002\u0002\u03ac\u03b1\u0005\u00e0q\u0002",
    "\u03ad\u03ae\u0007\\\u0002\u0002\u03ae\u03b1\u0005\u00e0q\u0002\u03af",
    "\u03b1\u0003\u0002\u0002\u0002\u03b0\u03a9\u0003\u0002\u0002\u0002\u03b0",
    "\u03ab\u0003\u0002\u0002\u0002\u03b0\u03ad\u0003\u0002\u0002\u0002\u03b0",
    "\u03af\u0003\u0002\u0002\u0002\u03b1\u00e5\u0003\u0002\u0002\u0002\u03b2",
    "\u03b3\u0007I\u0002\u0002\u03b3\u03b9\u0005\u00e8u\u0002\u03b4\u03b5",
    "\u0005\u00eav\u0002\u03b5\u03b6\u0005\u00e8u\u0002\u03b6\u03b9\u0003",
    "\u0002\u0002\u0002\u03b7\u03b9\u0003\u0002\u0002\u0002\u03b8\u03b2\u0003",
    "\u0002\u0002\u0002\u03b8\u03b4\u0003\u0002\u0002\u0002\u03b8\u03b7\u0003",
    "\u0002\u0002\u0002\u03b9\u00e7\u0003\u0002\u0002\u0002\u03ba\u03bb\u0007",
    "S\u0002\u0002\u03bb\u03c2\u0005\u00e6t\u0002\u03bc\u03bd\u0007\\\u0002",
    "\u0002\u03bd\u03c2\u0005\u00e6t\u0002\u03be\u03bf\u0007\\\u0002\u0002",
    "\u03bf\u03c2\u0005\u00e6t\u0002\u03c0\u03c2\u0003\u0002\u0002\u0002",
    "\u03c1\u03ba\u0003\u0002\u0002\u0002\u03c1\u03bc\u0003\u0002\u0002\u0002",
    "\u03c1\u03be\u0003\u0002\u0002\u0002\u03c1\u03c0\u0003\u0002\u0002\u0002",
    "\u03c2\u00e9\u0003\u0002\u0002\u0002\u03c3\u03c4\t\b\u0002\u0002\u03c4",
    "\u00eb\u0003\u0002\u0002\u0002\u03c5\u03c6\u0007I\u0002\u0002\u03c6",
    "\u03c9\u0005\u00eex\u0002\u03c7\u03c9\u0003\u0002\u0002\u0002\u03c8",
    "\u03c5\u0003\u0002\u0002\u0002\u03c8\u03c7\u0003\u0002\u0002\u0002\u03c9",
    "\u00ed\u0003\u0002\u0002\u0002\u03ca\u03cb\u0007M\u0002\u0002\u03cb",
    "\u03ce\u0005\u00ecw\u0002\u03cc\u03ce\u0003\u0002\u0002\u0002\u03cd",
    "\u03ca\u0003\u0002\u0002\u0002\u03cd\u03cc\u0003\u0002\u0002\u0002\u03ce",
    "\u00ef\u0003\u0002\u0002\u0002P\u00f6\u00fc\u0105\u010b\u0110\u0116",
    "\u011c\u012e\u0137\u0142\u0146\u0155\u0159\u016a\u016e\u0172\u0189\u01b9",
    "\u01c7\u01d9\u01e9\u01ee\u01fb\u01ff\u020b\u0212\u021b\u0221\u0228\u022d",
    "\u0232\u0237\u023c\u024d\u0253\u025a\u025e\u0262\u026b\u0276\u027c\u0281",
    "\u0286\u029a\u02af\u02b9\u02c4\u02c8\u02d0\u02d5\u02e1\u02ee\u02f5\u02fb",
    "\u0313\u031d\u0325\u0330\u0336\u033b\u0346\u034c\u0350\u0359\u0365\u0374",
    "\u037b\u0380\u0384\u038e\u0396\u039e\u03a7\u03b0\u03b8\u03c1\u03c8\u03cd"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'global'", "'double'", "' body'", "'const '", 
                     "'create'", "'do'", "'od'", "'fs'", "'af'", "'skip'", 
                     "'exit'", "'maxlength'", "'length'", "'receive'", "'rec'", 
                     "'destroy'", "'external'", "'extend'", "'getarg'", 
                     "'get'", "'import'", "'mod'", "'new'", "'real'", "'procedure'", 
                     "'process'", "'final'", "'reply'", "'next'", "'proc'", 
                     "'read'", "'send'", "'spec'", "'initial'", "'char'", 
                     "'string'", "'bool'", "'resource'", "'returns'", "'scanf'", 
                     "'sem'", "'sprintf'", "'int'", "'stop'", "'high'", 
                     "'writes'", "'write'", "'pred'", "'cap'", "'low'", 
                     "'ref'", "'end'", "'abs'", "'res'", "'val'", "'var'", 
                     "'ni'", "'co'", "'to'", "'optype'", "'op'", "'or '", 
                     "'fa'", "'fi'", "'if'", "'lb'", "'ub'", "'put'", "'type'", 
                     "'succ'", null, "'+:='", "'-:='", "':='", "','", "']'", 
                     "'['", "'}'", "'{'", "'!='", "':'", "'->'", "'='", 
                     "'<'", "'>'", "'?'", "'*'", "'('", "')'", "';'", null, 
                     "'--'", "'-'", "'[]'", "'++'", "'+'", "'/'", "'.'", 
                     "':=:'", "'...'", "'%'", "'&'" ];

var symbolicNames = [ null, "GLOBAL", "DOUBLE", "BODY", "CONST", "CREATE", 
                      "DO", "OD", "FS", "AF", "SKIP_RESERVED", "EXIT", "MAXLENGTH", 
                      "LENGTH", "RECEIVE", "REC", "DESTROY", "EXTERNAL", 
                      "EXTEND", "GETARG", "GET", "IMPORT", "MOD", "NEW", 
                      "REAL", "PROCEDURE", "PROCESS", "FINAL", "REPLY", 
                      "NEXT", "PROC", "READ", "SEND", "SPEC", "INITIAL", 
                      "CHAR", "STRING", "BOOL", "RESOURCE", "RETURNS", "SCANF", 
                      "SEM", "SPRINTF", "INT", "STOP", "HIGH", "WRITES", 
                      "WRITE", "PRED", "CAP", "LOW", "REF", "END", "ABS", 
                      "RES", "VAL", "VAR", "NI", "CO", "TO", "OPTYPE", "OP", 
                      "OR", "FA", "FI", "IF", "LB", "UB", "PUT", "TYPE", 
                      "SUCC", "ID", "TK_SUMA_ASIG", "TK_MENOS_ASIG", "TK_ASIG", 
                      "TK_COMA", "TK_COR_DER", "TK_COR_IZQ", "TK_CORCHE_DER", 
                      "TK_CORCHE_IZQ", "TK_DISTINTO", "TK_DOS_PUNTOS", "TK_EJECUTA", 
                      "TK_IGUAL", "TK_MENORQUE", "TK_MAYORQUE", "TK_EXPR_SINC", 
                      "TK_MULTI", "TK_PAR_IZQ", "TK_PAR_DER", "TK_PUNTO_Y_COMA", 
                      "TK_NUM", "TK_MENOS_MENOS", "TK_MENOS", "TK_SEPARA", 
                      "TK_SUMA_SUMA", "TK_SUMA", "TK_DIV", "TK_PUNTO", "TK_SWAP", 
                      "TK_TRES_PUNTOS", "TK_PORCENTAJE", "TK_AMPERSAND", 
                      "ANY", "WS", "TK_CADENA" ];

var ruleNames =  [ "sr_program", "resources_body", "resource_body", "end_optional", 
                   "resource_body1", "resource_body11", "block", "interfaces_part", 
                   "interface_part", "body_declaration", "body_declaration1", 
                   "body_declaration11", "body_body", "global_specification", 
                   "global_bodies", "global_body", "resource_specification", 
                   "resource_specification_body", "optional_import", "separate_optional", 
                   "constant_declaration", "import_specification", "operation_declaration", 
                   "operation_declaration1", "operation_type_declaration", 
                   "type_declaration", "extend_declaration", "conditional_statement", 
                   "procedure_specification", "procedure_specification1", 
                   "final_declaration", "initial_declaration", "quantifier", 
                   "cycles", "cycle", "cycle_body", "terms_to_terms", "terms_to_term", 
                   "returns_rule", "procedure_reserved_word", "operation_end", 
                   "operation_end1", "type_specification", "type_specification1", 
                   "type_specification_op_type", "type_specification_op", 
                   "type_specification_op1", "type_specification_op_2", 
                   "type_specification_op_21", "end_if", "end_do", "end_fa", 
                   "end_fs", "parameter", "parameter_specification", "parameter_id", 
                   "array", "expression", "expression1", "fnp_parameter_type_1", 
                   "fnp_parameter_type_111", "fnp_parameter_type_1111", 
                   "fnp_parameter_type_11", "primitive_function", "function_one_parameter", 
                   "function_two_parameter", "function_n_parameters", "f1p_reserved_word_type1", 
                   "f1p_reserved_word_type2", "f1p_reserved_word_type3", 
                   "f1p_parameter", "f2p_reserved_word", "fnp_reserved_word_type_1", 
                   "fnp_reserved_word_type_2", "f2p_parameter", "fnp_parameter_type_2", 
                   "strings", "string", "expression_variable", "statements", 
                   "statement", "sequential_statement", "boolean_expression", 
                   "boolean_expression1", "boolean_expression11", "variable_instance", 
                   "variable_instance1", "variable_instance11", "array_declarations", 
                   "array_declaration", "variable_declaration", "variable_declaration1", 
                   "variable_declaration111", "variable_declaration11", 
                   "arithmethic_expression", "arithmethic_expressions", 
                   "term", "variable_instance2", "variable_instance21", 
                   "op_binario", "op_binario_boolean", "call_function", 
                   "call_function_in_function", "parameter_call_function", 
                   "parameter_call_function11", "parameter_call_function1", 
                   "semicolon_or_not", "ids_type_group", "ids_type_group1", 
                   "ids_group", "ids_group1", "ids_group_dos_puntos", "ids_group_dos_puntos11", 
                   "ids_group_dos_puntos1", "ids_group_dos_puntos_op_type", 
                   "ids_group_dos_puntos_op_type1", "var_type", "ids_group_0", 
                   "ids_group_01" ];

function SRParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

SRParser.prototype = Object.create(antlr4.Parser.prototype);
SRParser.prototype.constructor = SRParser;

Object.defineProperty(SRParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

SRParser.EOF = antlr4.Token.EOF;
SRParser.GLOBAL = 1;
SRParser.DOUBLE = 2;
SRParser.BODY = 3;
SRParser.CONST = 4;
SRParser.CREATE = 5;
SRParser.DO = 6;
SRParser.OD = 7;
SRParser.FS = 8;
SRParser.AF = 9;
SRParser.SKIP_RESERVED = 10;
SRParser.EXIT = 11;
SRParser.MAXLENGTH = 12;
SRParser.LENGTH = 13;
SRParser.RECEIVE = 14;
SRParser.REC = 15;
SRParser.DESTROY = 16;
SRParser.EXTERNAL = 17;
SRParser.EXTEND = 18;
SRParser.GETARG = 19;
SRParser.GET = 20;
SRParser.IMPORT = 21;
SRParser.MOD = 22;
SRParser.NEW = 23;
SRParser.REAL = 24;
SRParser.PROCEDURE = 25;
SRParser.PROCESS = 26;
SRParser.FINAL = 27;
SRParser.REPLY = 28;
SRParser.NEXT = 29;
SRParser.PROC = 30;
SRParser.READ = 31;
SRParser.SEND = 32;
SRParser.SPEC = 33;
SRParser.INITIAL = 34;
SRParser.CHAR = 35;
SRParser.STRING = 36;
SRParser.BOOL = 37;
SRParser.RESOURCE = 38;
SRParser.RETURNS = 39;
SRParser.SCANF = 40;
SRParser.SEM = 41;
SRParser.SPRINTF = 42;
SRParser.INT = 43;
SRParser.STOP = 44;
SRParser.HIGH = 45;
SRParser.WRITES = 46;
SRParser.WRITE = 47;
SRParser.PRED = 48;
SRParser.CAP = 49;
SRParser.LOW = 50;
SRParser.REF = 51;
SRParser.END = 52;
SRParser.ABS = 53;
SRParser.RES = 54;
SRParser.VAL = 55;
SRParser.VAR = 56;
SRParser.NI = 57;
SRParser.CO = 58;
SRParser.TO = 59;
SRParser.OPTYPE = 60;
SRParser.OP = 61;
SRParser.OR = 62;
SRParser.FA = 63;
SRParser.FI = 64;
SRParser.IF = 65;
SRParser.LB = 66;
SRParser.UB = 67;
SRParser.PUT = 68;
SRParser.TYPE = 69;
SRParser.SUCC = 70;
SRParser.ID = 71;
SRParser.TK_SUMA_ASIG = 72;
SRParser.TK_MENOS_ASIG = 73;
SRParser.TK_ASIG = 74;
SRParser.TK_COMA = 75;
SRParser.TK_COR_DER = 76;
SRParser.TK_COR_IZQ = 77;
SRParser.TK_CORCHE_DER = 78;
SRParser.TK_CORCHE_IZQ = 79;
SRParser.TK_DISTINTO = 80;
SRParser.TK_DOS_PUNTOS = 81;
SRParser.TK_EJECUTA = 82;
SRParser.TK_IGUAL = 83;
SRParser.TK_MENORQUE = 84;
SRParser.TK_MAYORQUE = 85;
SRParser.TK_EXPR_SINC = 86;
SRParser.TK_MULTI = 87;
SRParser.TK_PAR_IZQ = 88;
SRParser.TK_PAR_DER = 89;
SRParser.TK_PUNTO_Y_COMA = 90;
SRParser.TK_NUM = 91;
SRParser.TK_MENOS_MENOS = 92;
SRParser.TK_MENOS = 93;
SRParser.TK_SEPARA = 94;
SRParser.TK_SUMA_SUMA = 95;
SRParser.TK_SUMA = 96;
SRParser.TK_DIV = 97;
SRParser.TK_PUNTO = 98;
SRParser.TK_SWAP = 99;
SRParser.TK_TRES_PUNTOS = 100;
SRParser.TK_PORCENTAJE = 101;
SRParser.TK_AMPERSAND = 102;
SRParser.ANY = 103;
SRParser.WS = 104;
SRParser.TK_CADENA = 105;

SRParser.RULE_sr_program = 0;
SRParser.RULE_resources_body = 1;
SRParser.RULE_resource_body = 2;
SRParser.RULE_end_optional = 3;
SRParser.RULE_resource_body1 = 4;
SRParser.RULE_resource_body11 = 5;
SRParser.RULE_block = 6;
SRParser.RULE_interfaces_part = 7;
SRParser.RULE_interface_part = 8;
SRParser.RULE_body_declaration = 9;
SRParser.RULE_body_declaration1 = 10;
SRParser.RULE_body_declaration11 = 11;
SRParser.RULE_body_body = 12;
SRParser.RULE_global_specification = 13;
SRParser.RULE_global_bodies = 14;
SRParser.RULE_global_body = 15;
SRParser.RULE_resource_specification = 16;
SRParser.RULE_resource_specification_body = 17;
SRParser.RULE_optional_import = 18;
SRParser.RULE_separate_optional = 19;
SRParser.RULE_constant_declaration = 20;
SRParser.RULE_import_specification = 21;
SRParser.RULE_operation_declaration = 22;
SRParser.RULE_operation_declaration1 = 23;
SRParser.RULE_operation_type_declaration = 24;
SRParser.RULE_type_declaration = 25;
SRParser.RULE_extend_declaration = 26;
SRParser.RULE_conditional_statement = 27;
SRParser.RULE_procedure_specification = 28;
SRParser.RULE_procedure_specification1 = 29;
SRParser.RULE_final_declaration = 30;
SRParser.RULE_initial_declaration = 31;
SRParser.RULE_quantifier = 32;
SRParser.RULE_cycles = 33;
SRParser.RULE_cycle = 34;
SRParser.RULE_cycle_body = 35;
SRParser.RULE_terms_to_terms = 36;
SRParser.RULE_terms_to_term = 37;
SRParser.RULE_returns_rule = 38;
SRParser.RULE_procedure_reserved_word = 39;
SRParser.RULE_operation_end = 40;
SRParser.RULE_operation_end1 = 41;
SRParser.RULE_type_specification = 42;
SRParser.RULE_type_specification1 = 43;
SRParser.RULE_type_specification_op_type = 44;
SRParser.RULE_type_specification_op = 45;
SRParser.RULE_type_specification_op1 = 46;
SRParser.RULE_type_specification_op_2 = 47;
SRParser.RULE_type_specification_op_21 = 48;
SRParser.RULE_end_if = 49;
SRParser.RULE_end_do = 50;
SRParser.RULE_end_fa = 51;
SRParser.RULE_end_fs = 52;
SRParser.RULE_parameter = 53;
SRParser.RULE_parameter_specification = 54;
SRParser.RULE_parameter_id = 55;
SRParser.RULE_array = 56;
SRParser.RULE_expression = 57;
SRParser.RULE_expression1 = 58;
SRParser.RULE_fnp_parameter_type_1 = 59;
SRParser.RULE_fnp_parameter_type_111 = 60;
SRParser.RULE_fnp_parameter_type_1111 = 61;
SRParser.RULE_fnp_parameter_type_11 = 62;
SRParser.RULE_primitive_function = 63;
SRParser.RULE_function_one_parameter = 64;
SRParser.RULE_function_two_parameter = 65;
SRParser.RULE_function_n_parameters = 66;
SRParser.RULE_f1p_reserved_word_type1 = 67;
SRParser.RULE_f1p_reserved_word_type2 = 68;
SRParser.RULE_f1p_reserved_word_type3 = 69;
SRParser.RULE_f1p_parameter = 70;
SRParser.RULE_f2p_reserved_word = 71;
SRParser.RULE_fnp_reserved_word_type_1 = 72;
SRParser.RULE_fnp_reserved_word_type_2 = 73;
SRParser.RULE_f2p_parameter = 74;
SRParser.RULE_fnp_parameter_type_2 = 75;
SRParser.RULE_strings = 76;
SRParser.RULE_string = 77;
SRParser.RULE_expression_variable = 78;
SRParser.RULE_statements = 79;
SRParser.RULE_statement = 80;
SRParser.RULE_sequential_statement = 81;
SRParser.RULE_boolean_expression = 82;
SRParser.RULE_boolean_expression1 = 83;
SRParser.RULE_boolean_expression11 = 84;
SRParser.RULE_variable_instance = 85;
SRParser.RULE_variable_instance1 = 86;
SRParser.RULE_variable_instance11 = 87;
SRParser.RULE_array_declarations = 88;
SRParser.RULE_array_declaration = 89;
SRParser.RULE_variable_declaration = 90;
SRParser.RULE_variable_declaration1 = 91;
SRParser.RULE_variable_declaration111 = 92;
SRParser.RULE_variable_declaration11 = 93;
SRParser.RULE_arithmethic_expression = 94;
SRParser.RULE_arithmethic_expressions = 95;
SRParser.RULE_term = 96;
SRParser.RULE_variable_instance2 = 97;
SRParser.RULE_variable_instance21 = 98;
SRParser.RULE_op_binario = 99;
SRParser.RULE_op_binario_boolean = 100;
SRParser.RULE_call_function = 101;
SRParser.RULE_call_function_in_function = 102;
SRParser.RULE_parameter_call_function = 103;
SRParser.RULE_parameter_call_function11 = 104;
SRParser.RULE_parameter_call_function1 = 105;
SRParser.RULE_semicolon_or_not = 106;
SRParser.RULE_ids_type_group = 107;
SRParser.RULE_ids_type_group1 = 108;
SRParser.RULE_ids_group = 109;
SRParser.RULE_ids_group1 = 110;
SRParser.RULE_ids_group_dos_puntos = 111;
SRParser.RULE_ids_group_dos_puntos11 = 112;
SRParser.RULE_ids_group_dos_puntos1 = 113;
SRParser.RULE_ids_group_dos_puntos_op_type = 114;
SRParser.RULE_ids_group_dos_puntos_op_type1 = 115;
SRParser.RULE_var_type = 116;
SRParser.RULE_ids_group_0 = 117;
SRParser.RULE_ids_group_01 = 118;


function Sr_programContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_sr_program;
    return this;
}

Sr_programContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sr_programContext.prototype.constructor = Sr_programContext;

Sr_programContext.prototype.resource_body = function() {
    return this.getTypedRuleContext(Resource_bodyContext,0);
};

Sr_programContext.prototype.resources_body = function() {
    return this.getTypedRuleContext(Resources_bodyContext,0);
};

Sr_programContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterSr_program(this);
	}
};

Sr_programContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitSr_program(this);
	}
};




SRParser.Sr_programContext = Sr_programContext;

SRParser.prototype.sr_program = function() {

    var localctx = new Sr_programContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, SRParser.RULE_sr_program);
    try {
        this.state = 244;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 238;
            this.resource_body();
            this.state = 239;
            this.resources_body();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 241;
            this.resources_body();
            this.state = 242;
            this.resource_body();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Resources_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_resources_body;
    return this;
}

Resources_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Resources_bodyContext.prototype.constructor = Resources_bodyContext;

Resources_bodyContext.prototype.resource_body = function() {
    return this.getTypedRuleContext(Resource_bodyContext,0);
};

Resources_bodyContext.prototype.resources_body = function() {
    return this.getTypedRuleContext(Resources_bodyContext,0);
};

Resources_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterResources_body(this);
	}
};

Resources_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitResources_body(this);
	}
};




SRParser.Resources_bodyContext = Resources_bodyContext;

SRParser.prototype.resources_body = function() {

    var localctx = new Resources_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, SRParser.RULE_resources_body);
    try {
        this.state = 250;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 246;
            this.resource_body();
            this.state = 247;
            this.resources_body();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Resource_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_resource_body;
    return this;
}

Resource_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Resource_bodyContext.prototype.constructor = Resource_bodyContext;

Resource_bodyContext.prototype.RESOURCE = function() {
    return this.getToken(SRParser.RESOURCE, 0);
};

Resource_bodyContext.prototype.ID = function() {
    return this.getToken(SRParser.ID, 0);
};

Resource_bodyContext.prototype.resource_body1 = function() {
    return this.getTypedRuleContext(Resource_body1Context,0);
};

Resource_bodyContext.prototype.end_optional = function() {
    return this.getTypedRuleContext(End_optionalContext,0);
};

Resource_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterResource_body(this);
	}
};

Resource_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitResource_body(this);
	}
};




SRParser.Resource_bodyContext = Resource_bodyContext;

SRParser.prototype.resource_body = function() {

    var localctx = new Resource_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, SRParser.RULE_resource_body);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 252;
        this.match(SRParser.RESOURCE);
        this.state = 253;
        this.match(SRParser.ID);
        this.state = 254;
        this.resource_body1();
        this.state = 255;
        this.end_optional();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function End_optionalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_end_optional;
    return this;
}

End_optionalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
End_optionalContext.prototype.constructor = End_optionalContext;

End_optionalContext.prototype.END = function() {
    return this.getToken(SRParser.END, 0);
};

End_optionalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterEnd_optional(this);
	}
};

End_optionalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitEnd_optional(this);
	}
};




SRParser.End_optionalContext = End_optionalContext;

SRParser.prototype.end_optional = function() {

    var localctx = new End_optionalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, SRParser.RULE_end_optional);
    try {
        this.state = 259;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.END:
            this.enterOuterAlt(localctx, 1);
            this.state = 257;
            this.match(SRParser.END);
            break;
        case SRParser.EOF:
        case SRParser.RESOURCE:
            this.enterOuterAlt(localctx, 2);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Resource_body1Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_resource_body1;
    return this;
}

Resource_body1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Resource_body1Context.prototype.constructor = Resource_body1Context;

Resource_body1Context.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

Resource_body1Context.prototype.TK_PAR_IZQ = function() {
    return this.getToken(SRParser.TK_PAR_IZQ, 0);
};

Resource_body1Context.prototype.TK_PAR_DER = function() {
    return this.getToken(SRParser.TK_PAR_DER, 0);
};

Resource_body1Context.prototype.resource_body11 = function() {
    return this.getTypedRuleContext(Resource_body11Context,0);
};

Resource_body1Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterResource_body1(this);
	}
};

Resource_body1Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitResource_body1(this);
	}
};




SRParser.Resource_body1Context = Resource_body1Context;

SRParser.prototype.resource_body1 = function() {

    var localctx = new Resource_body1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 8, SRParser.RULE_resource_body1);
    try {
        this.state = 265;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.GLOBAL:
        case SRParser.BODY:
        case SRParser.CONST:
        case SRParser.DO:
        case SRParser.FS:
        case SRParser.SKIP_RESERVED:
        case SRParser.EXIT:
        case SRParser.MAXLENGTH:
        case SRParser.LENGTH:
        case SRParser.EXTEND:
        case SRParser.IMPORT:
        case SRParser.NEW:
        case SRParser.PROCESS:
        case SRParser.FINAL:
        case SRParser.NEXT:
        case SRParser.PROC:
        case SRParser.SPEC:
        case SRParser.INITIAL:
        case SRParser.HIGH:
        case SRParser.WRITE:
        case SRParser.PRED:
        case SRParser.LOW:
        case SRParser.ABS:
        case SRParser.VAR:
        case SRParser.OPTYPE:
        case SRParser.OP:
        case SRParser.FA:
        case SRParser.IF:
        case SRParser.LB:
        case SRParser.UB:
        case SRParser.PUT:
        case SRParser.TYPE:
        case SRParser.SUCC:
        case SRParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 261;
            this.block();
            break;
        case SRParser.TK_PAR_IZQ:
            this.enterOuterAlt(localctx, 2);
            this.state = 262;
            this.match(SRParser.TK_PAR_IZQ);
            this.state = 263;
            this.match(SRParser.TK_PAR_DER);
            this.state = 264;
            this.resource_body11();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Resource_body11Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_resource_body11;
    return this;
}

Resource_body11Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Resource_body11Context.prototype.constructor = Resource_body11Context;

Resource_body11Context.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

Resource_body11Context.prototype.TK_SEPARA = function() {
    return this.getToken(SRParser.TK_SEPARA, 0);
};

Resource_body11Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterResource_body11(this);
	}
};

Resource_body11Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitResource_body11(this);
	}
};




SRParser.Resource_body11Context = Resource_body11Context;

SRParser.prototype.resource_body11 = function() {

    var localctx = new Resource_body11Context(this, this._ctx, this.state);
    this.enterRule(localctx, 10, SRParser.RULE_resource_body11);
    try {
        this.state = 270;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.GLOBAL:
        case SRParser.BODY:
        case SRParser.CONST:
        case SRParser.DO:
        case SRParser.FS:
        case SRParser.SKIP_RESERVED:
        case SRParser.EXIT:
        case SRParser.MAXLENGTH:
        case SRParser.LENGTH:
        case SRParser.EXTEND:
        case SRParser.IMPORT:
        case SRParser.NEW:
        case SRParser.PROCESS:
        case SRParser.FINAL:
        case SRParser.NEXT:
        case SRParser.PROC:
        case SRParser.SPEC:
        case SRParser.INITIAL:
        case SRParser.HIGH:
        case SRParser.WRITE:
        case SRParser.PRED:
        case SRParser.LOW:
        case SRParser.ABS:
        case SRParser.VAR:
        case SRParser.OPTYPE:
        case SRParser.OP:
        case SRParser.FA:
        case SRParser.IF:
        case SRParser.LB:
        case SRParser.UB:
        case SRParser.PUT:
        case SRParser.TYPE:
        case SRParser.SUCC:
        case SRParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 267;
            this.block();
            break;
        case SRParser.TK_SEPARA:
            this.enterOuterAlt(localctx, 2);
            this.state = 268;
            this.match(SRParser.TK_SEPARA);
            this.state = 269;
            this.block();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.interface_part = function() {
    return this.getTypedRuleContext(Interface_partContext,0);
};

BlockContext.prototype.interfaces_part = function() {
    return this.getTypedRuleContext(Interfaces_partContext,0);
};

BlockContext.prototype.conditional_statement = function() {
    return this.getTypedRuleContext(Conditional_statementContext,0);
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitBlock(this);
	}
};




SRParser.BlockContext = BlockContext;

SRParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, SRParser.RULE_block);
    try {
        this.state = 276;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 272;
            this.interface_part();
            this.state = 273;
            this.interfaces_part();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 275;
            this.conditional_statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Interfaces_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_interfaces_part;
    return this;
}

Interfaces_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interfaces_partContext.prototype.constructor = Interfaces_partContext;

Interfaces_partContext.prototype.interface_part = function() {
    return this.getTypedRuleContext(Interface_partContext,0);
};

Interfaces_partContext.prototype.interfaces_part = function() {
    return this.getTypedRuleContext(Interfaces_partContext,0);
};

Interfaces_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterInterfaces_part(this);
	}
};

Interfaces_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitInterfaces_part(this);
	}
};




SRParser.Interfaces_partContext = Interfaces_partContext;

SRParser.prototype.interfaces_part = function() {

    var localctx = new Interfaces_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, SRParser.RULE_interfaces_part);
    try {
        this.state = 282;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 278;
            this.interface_part();
            this.state = 279;
            this.interfaces_part();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Interface_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_interface_part;
    return this;
}

Interface_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_partContext.prototype.constructor = Interface_partContext;

Interface_partContext.prototype.constant_declaration = function() {
    return this.getTypedRuleContext(Constant_declarationContext,0);
};

Interface_partContext.prototype.import_specification = function() {
    return this.getTypedRuleContext(Import_specificationContext,0);
};

Interface_partContext.prototype.conditional_statement = function() {
    return this.getTypedRuleContext(Conditional_statementContext,0);
};

Interface_partContext.prototype.global_specification = function() {
    return this.getTypedRuleContext(Global_specificationContext,0);
};

Interface_partContext.prototype.operation_type_declaration = function() {
    return this.getTypedRuleContext(Operation_type_declarationContext,0);
};

Interface_partContext.prototype.extend_declaration = function() {
    return this.getTypedRuleContext(Extend_declarationContext,0);
};

Interface_partContext.prototype.operation_declaration = function() {
    return this.getTypedRuleContext(Operation_declarationContext,0);
};

Interface_partContext.prototype.type_declaration = function() {
    return this.getTypedRuleContext(Type_declarationContext,0);
};

Interface_partContext.prototype.procedure_specification = function() {
    return this.getTypedRuleContext(Procedure_specificationContext,0);
};

Interface_partContext.prototype.resource_specification = function() {
    return this.getTypedRuleContext(Resource_specificationContext,0);
};

Interface_partContext.prototype.variable_declaration = function() {
    return this.getTypedRuleContext(Variable_declarationContext,0);
};

Interface_partContext.prototype.sequential_statement = function() {
    return this.getTypedRuleContext(Sequential_statementContext,0);
};

Interface_partContext.prototype.primitive_function = function() {
    return this.getTypedRuleContext(Primitive_functionContext,0);
};

Interface_partContext.prototype.body_declaration = function() {
    return this.getTypedRuleContext(Body_declarationContext,0);
};

Interface_partContext.prototype.final_declaration = function() {
    return this.getTypedRuleContext(Final_declarationContext,0);
};

Interface_partContext.prototype.initial_declaration = function() {
    return this.getTypedRuleContext(Initial_declarationContext,0);
};

Interface_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterInterface_part(this);
	}
};

Interface_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitInterface_part(this);
	}
};




SRParser.Interface_partContext = Interface_partContext;

SRParser.prototype.interface_part = function() {

    var localctx = new Interface_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, SRParser.RULE_interface_part);
    try {
        this.state = 300;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 284;
            this.constant_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 285;
            this.import_specification();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 286;
            this.conditional_statement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 287;
            this.global_specification();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 288;
            this.operation_type_declaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 289;
            this.extend_declaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 290;
            this.operation_declaration();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 291;
            this.type_declaration();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 292;
            this.procedure_specification();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 293;
            this.resource_specification();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 294;
            this.variable_declaration();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 295;
            this.sequential_statement();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 296;
            this.primitive_function();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 297;
            this.body_declaration();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 298;
            this.final_declaration();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 299;
            this.initial_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Body_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_body_declaration;
    return this;
}

Body_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Body_declarationContext.prototype.constructor = Body_declarationContext;

Body_declarationContext.prototype.BODY = function() {
    return this.getToken(SRParser.BODY, 0);
};

Body_declarationContext.prototype.ID = function() {
    return this.getToken(SRParser.ID, 0);
};

Body_declarationContext.prototype.body_declaration1 = function() {
    return this.getTypedRuleContext(Body_declaration1Context,0);
};

Body_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterBody_declaration(this);
	}
};

Body_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitBody_declaration(this);
	}
};




SRParser.Body_declarationContext = Body_declarationContext;

SRParser.prototype.body_declaration = function() {

    var localctx = new Body_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, SRParser.RULE_body_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 302;
        this.match(SRParser.BODY);
        this.state = 303;
        this.match(SRParser.ID);
        this.state = 304;
        this.body_declaration1();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Body_declaration1Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_body_declaration1;
    return this;
}

Body_declaration1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Body_declaration1Context.prototype.constructor = Body_declaration1Context;

Body_declaration1Context.prototype.TK_PAR_IZQ = function() {
    return this.getToken(SRParser.TK_PAR_IZQ, 0);
};

Body_declaration1Context.prototype.body_declaration11 = function() {
    return this.getTypedRuleContext(Body_declaration11Context,0);
};

Body_declaration1Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterBody_declaration1(this);
	}
};

Body_declaration1Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitBody_declaration1(this);
	}
};




SRParser.Body_declaration1Context = Body_declaration1Context;

SRParser.prototype.body_declaration1 = function() {

    var localctx = new Body_declaration1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 20, SRParser.RULE_body_declaration1);
    try {
        this.state = 309;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.TK_PAR_IZQ:
            this.enterOuterAlt(localctx, 1);
            this.state = 306;
            this.match(SRParser.TK_PAR_IZQ);
            this.state = 307;
            this.body_declaration11();
            break;
        case SRParser.EOF:
        case SRParser.GLOBAL:
        case SRParser.BODY:
        case SRParser.CONST:
        case SRParser.DO:
        case SRParser.OD:
        case SRParser.FS:
        case SRParser.AF:
        case SRParser.SKIP_RESERVED:
        case SRParser.EXIT:
        case SRParser.MAXLENGTH:
        case SRParser.LENGTH:
        case SRParser.EXTEND:
        case SRParser.IMPORT:
        case SRParser.NEW:
        case SRParser.PROCESS:
        case SRParser.FINAL:
        case SRParser.NEXT:
        case SRParser.PROC:
        case SRParser.SPEC:
        case SRParser.INITIAL:
        case SRParser.RESOURCE:
        case SRParser.HIGH:
        case SRParser.WRITE:
        case SRParser.PRED:
        case SRParser.LOW:
        case SRParser.END:
        case SRParser.ABS:
        case SRParser.VAR:
        case SRParser.OPTYPE:
        case SRParser.OP:
        case SRParser.FA:
        case SRParser.FI:
        case SRParser.IF:
        case SRParser.LB:
        case SRParser.UB:
        case SRParser.PUT:
        case SRParser.TYPE:
        case SRParser.SUCC:
        case SRParser.ID:
        case SRParser.TK_SEPARA:
            this.enterOuterAlt(localctx, 2);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Body_declaration11Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_body_declaration11;
    return this;
}

Body_declaration11Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Body_declaration11Context.prototype.constructor = Body_declaration11Context;

Body_declaration11Context.prototype.type_specification_op = function() {
    return this.getTypedRuleContext(Type_specification_opContext,0);
};

Body_declaration11Context.prototype.TK_PAR_DER = function() {
    return this.getToken(SRParser.TK_PAR_DER, 0);
};

Body_declaration11Context.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

Body_declaration11Context.prototype.END = function() {
    return this.getToken(SRParser.END, 0);
};

Body_declaration11Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterBody_declaration11(this);
	}
};

Body_declaration11Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitBody_declaration11(this);
	}
};




SRParser.Body_declaration11Context = Body_declaration11Context;

SRParser.prototype.body_declaration11 = function() {

    var localctx = new Body_declaration11Context(this, this._ctx, this.state);
    this.enterRule(localctx, 22, SRParser.RULE_body_declaration11);
    try {
        this.state = 320;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 311;
            this.type_specification_op();
            this.state = 312;
            this.match(SRParser.TK_PAR_DER);
            this.state = 313;
            this.block();
            this.state = 314;
            this.match(SRParser.END);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 316;
            this.match(SRParser.TK_PAR_DER);
            this.state = 317;
            this.block();
            this.state = 318;
            this.match(SRParser.END);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Body_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_body_body;
    return this;
}

Body_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Body_bodyContext.prototype.constructor = Body_bodyContext;

Body_bodyContext.prototype.variable_declaration = function() {
    return this.getTypedRuleContext(Variable_declarationContext,0);
};

Body_bodyContext.prototype.constant_declaration = function() {
    return this.getTypedRuleContext(Constant_declarationContext,0);
};

Body_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterBody_body(this);
	}
};

Body_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitBody_body(this);
	}
};




SRParser.Body_bodyContext = Body_bodyContext;

SRParser.prototype.body_body = function() {

    var localctx = new Body_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, SRParser.RULE_body_body);
    try {
        this.state = 324;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.VAR:
            this.enterOuterAlt(localctx, 1);
            this.state = 322;
            this.variable_declaration();
            break;
        case SRParser.CONST:
            this.enterOuterAlt(localctx, 2);
            this.state = 323;
            this.constant_declaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Global_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_global_specification;
    return this;
}

Global_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Global_specificationContext.prototype.constructor = Global_specificationContext;

Global_specificationContext.prototype.GLOBAL = function() {
    return this.getToken(SRParser.GLOBAL, 0);
};

Global_specificationContext.prototype.ID = function() {
    return this.getToken(SRParser.ID, 0);
};

Global_specificationContext.prototype.global_body = function() {
    return this.getTypedRuleContext(Global_bodyContext,0);
};

Global_specificationContext.prototype.global_bodies = function() {
    return this.getTypedRuleContext(Global_bodiesContext,0);
};

Global_specificationContext.prototype.END = function() {
    return this.getToken(SRParser.END, 0);
};

Global_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterGlobal_specification(this);
	}
};

Global_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitGlobal_specification(this);
	}
};




SRParser.Global_specificationContext = Global_specificationContext;

SRParser.prototype.global_specification = function() {

    var localctx = new Global_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, SRParser.RULE_global_specification);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 326;
        this.match(SRParser.GLOBAL);
        this.state = 327;
        this.match(SRParser.ID);
        this.state = 328;
        this.global_body();
        this.state = 329;
        this.global_bodies();
        this.state = 330;
        this.match(SRParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Global_bodiesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_global_bodies;
    return this;
}

Global_bodiesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Global_bodiesContext.prototype.constructor = Global_bodiesContext;

Global_bodiesContext.prototype.constant_declaration = function() {
    return this.getTypedRuleContext(Constant_declarationContext,0);
};

Global_bodiesContext.prototype.global_bodies = function() {
    return this.getTypedRuleContext(Global_bodiesContext,0);
};

Global_bodiesContext.prototype.type_declaration = function() {
    return this.getTypedRuleContext(Type_declarationContext,0);
};

Global_bodiesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterGlobal_bodies(this);
	}
};

Global_bodiesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitGlobal_bodies(this);
	}
};




SRParser.Global_bodiesContext = Global_bodiesContext;

SRParser.prototype.global_bodies = function() {

    var localctx = new Global_bodiesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, SRParser.RULE_global_bodies);
    try {
        this.state = 339;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.CONST:
            this.enterOuterAlt(localctx, 1);
            this.state = 332;
            this.constant_declaration();
            this.state = 333;
            this.global_bodies();
            break;
        case SRParser.TYPE:
            this.enterOuterAlt(localctx, 2);
            this.state = 335;
            this.type_declaration();
            this.state = 336;
            this.global_bodies();
            break;
        case SRParser.END:
            this.enterOuterAlt(localctx, 3);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Global_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_global_body;
    return this;
}

Global_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Global_bodyContext.prototype.constructor = Global_bodyContext;

Global_bodyContext.prototype.constant_declaration = function() {
    return this.getTypedRuleContext(Constant_declarationContext,0);
};

Global_bodyContext.prototype.type_declaration = function() {
    return this.getTypedRuleContext(Type_declarationContext,0);
};

Global_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterGlobal_body(this);
	}
};

Global_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitGlobal_body(this);
	}
};




SRParser.Global_bodyContext = Global_bodyContext;

SRParser.prototype.global_body = function() {

    var localctx = new Global_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, SRParser.RULE_global_body);
    try {
        this.state = 343;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.CONST:
            this.enterOuterAlt(localctx, 1);
            this.state = 341;
            this.constant_declaration();
            break;
        case SRParser.TYPE:
            this.enterOuterAlt(localctx, 2);
            this.state = 342;
            this.type_declaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Resource_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_resource_specification;
    return this;
}

Resource_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Resource_specificationContext.prototype.constructor = Resource_specificationContext;

Resource_specificationContext.prototype.SPEC = function() {
    return this.getToken(SRParser.SPEC, 0);
};

Resource_specificationContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SRParser.ID);
    } else {
        return this.getToken(SRParser.ID, i);
    }
};


Resource_specificationContext.prototype.optional_import = function() {
    return this.getTypedRuleContext(Optional_importContext,0);
};

Resource_specificationContext.prototype.resource_specification_body = function() {
    return this.getTypedRuleContext(Resource_specification_bodyContext,0);
};

Resource_specificationContext.prototype.RESOURCE = function() {
    return this.getToken(SRParser.RESOURCE, 0);
};

Resource_specificationContext.prototype.TK_PAR_IZQ = function() {
    return this.getToken(SRParser.TK_PAR_IZQ, 0);
};

Resource_specificationContext.prototype.parameter_call_function = function() {
    return this.getTypedRuleContext(Parameter_call_functionContext,0);
};

Resource_specificationContext.prototype.TK_PAR_DER = function() {
    return this.getToken(SRParser.TK_PAR_DER, 0);
};

Resource_specificationContext.prototype.separate_optional = function() {
    return this.getTypedRuleContext(Separate_optionalContext,0);
};

Resource_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterResource_specification(this);
	}
};

Resource_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitResource_specification(this);
	}
};




SRParser.Resource_specificationContext = Resource_specificationContext;

SRParser.prototype.resource_specification = function() {

    var localctx = new Resource_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, SRParser.RULE_resource_specification);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 345;
        this.match(SRParser.SPEC);
        this.state = 346;
        this.match(SRParser.ID);
        this.state = 347;
        this.optional_import();
        this.state = 348;
        this.resource_specification_body();
        this.state = 349;
        this.match(SRParser.RESOURCE);
        this.state = 350;
        this.match(SRParser.ID);
        this.state = 351;
        this.match(SRParser.TK_PAR_IZQ);
        this.state = 352;
        this.parameter_call_function();
        this.state = 353;
        this.match(SRParser.TK_PAR_DER);
        this.state = 354;
        this.separate_optional();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Resource_specification_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_resource_specification_body;
    return this;
}

Resource_specification_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Resource_specification_bodyContext.prototype.constructor = Resource_specification_bodyContext;

Resource_specification_bodyContext.prototype.constant_declaration = function() {
    return this.getTypedRuleContext(Constant_declarationContext,0);
};

Resource_specification_bodyContext.prototype.operation_declaration = function() {
    return this.getTypedRuleContext(Operation_declarationContext,0);
};

Resource_specification_bodyContext.prototype.type_declaration = function() {
    return this.getTypedRuleContext(Type_declarationContext,0);
};

Resource_specification_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterResource_specification_body(this);
	}
};

Resource_specification_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitResource_specification_body(this);
	}
};




SRParser.Resource_specification_bodyContext = Resource_specification_bodyContext;

SRParser.prototype.resource_specification_body = function() {

    var localctx = new Resource_specification_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, SRParser.RULE_resource_specification_body);
    try {
        this.state = 360;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.CONST:
            this.enterOuterAlt(localctx, 1);
            this.state = 356;
            this.constant_declaration();
            break;
        case SRParser.OP:
            this.enterOuterAlt(localctx, 2);
            this.state = 357;
            this.operation_declaration();
            break;
        case SRParser.TYPE:
            this.enterOuterAlt(localctx, 3);
            this.state = 358;
            this.type_declaration();
            break;
        case SRParser.RESOURCE:
            this.enterOuterAlt(localctx, 4);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Optional_importContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_optional_import;
    return this;
}

Optional_importContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Optional_importContext.prototype.constructor = Optional_importContext;

Optional_importContext.prototype.import_specification = function() {
    return this.getTypedRuleContext(Import_specificationContext,0);
};

Optional_importContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterOptional_import(this);
	}
};

Optional_importContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitOptional_import(this);
	}
};




SRParser.Optional_importContext = Optional_importContext;

SRParser.prototype.optional_import = function() {

    var localctx = new Optional_importContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, SRParser.RULE_optional_import);
    try {
        this.state = 364;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.IMPORT:
            this.enterOuterAlt(localctx, 1);
            this.state = 362;
            this.import_specification();
            break;
        case SRParser.CONST:
        case SRParser.RESOURCE:
        case SRParser.OP:
        case SRParser.TYPE:
            this.enterOuterAlt(localctx, 2);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Separate_optionalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_separate_optional;
    return this;
}

Separate_optionalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Separate_optionalContext.prototype.constructor = Separate_optionalContext;

Separate_optionalContext.prototype.TK_SEPARA = function() {
    return this.getToken(SRParser.TK_SEPARA, 0);
};

Separate_optionalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterSeparate_optional(this);
	}
};

Separate_optionalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitSeparate_optional(this);
	}
};




SRParser.Separate_optionalContext = Separate_optionalContext;

SRParser.prototype.separate_optional = function() {

    var localctx = new Separate_optionalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, SRParser.RULE_separate_optional);
    try {
        this.state = 368;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 366;
            this.match(SRParser.TK_SEPARA);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Constant_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_constant_declaration;
    return this;
}

Constant_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constant_declarationContext.prototype.constructor = Constant_declarationContext;

Constant_declarationContext.prototype.CONST = function() {
    return this.getToken(SRParser.CONST, 0);
};

Constant_declarationContext.prototype.ID = function() {
    return this.getToken(SRParser.ID, 0);
};

Constant_declarationContext.prototype.TK_ASIG = function() {
    return this.getToken(SRParser.TK_ASIG, 0);
};

Constant_declarationContext.prototype.arithmethic_expression = function() {
    return this.getTypedRuleContext(Arithmethic_expressionContext,0);
};

Constant_declarationContext.prototype.arithmethic_expressions = function() {
    return this.getTypedRuleContext(Arithmethic_expressionsContext,0);
};

Constant_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterConstant_declaration(this);
	}
};

Constant_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitConstant_declaration(this);
	}
};




SRParser.Constant_declarationContext = Constant_declarationContext;

SRParser.prototype.constant_declaration = function() {

    var localctx = new Constant_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, SRParser.RULE_constant_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 370;
        this.match(SRParser.CONST);
        this.state = 371;
        this.match(SRParser.ID);
        this.state = 372;
        this.match(SRParser.TK_ASIG);
        this.state = 373;
        this.arithmethic_expression();
        this.state = 374;
        this.arithmethic_expressions();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Import_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_import_specification;
    return this;
}

Import_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_specificationContext.prototype.constructor = Import_specificationContext;

Import_specificationContext.prototype.IMPORT = function() {
    return this.getToken(SRParser.IMPORT, 0);
};

Import_specificationContext.prototype.ids_group = function() {
    return this.getTypedRuleContext(Ids_groupContext,0);
};

Import_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterImport_specification(this);
	}
};

Import_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitImport_specification(this);
	}
};




SRParser.Import_specificationContext = Import_specificationContext;

SRParser.prototype.import_specification = function() {

    var localctx = new Import_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, SRParser.RULE_import_specification);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 376;
        this.match(SRParser.IMPORT);
        this.state = 377;
        this.ids_group();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Operation_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_operation_declaration;
    return this;
}

Operation_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Operation_declarationContext.prototype.constructor = Operation_declarationContext;

Operation_declarationContext.prototype.OP = function() {
    return this.getToken(SRParser.OP, 0);
};

Operation_declarationContext.prototype.ID = function() {
    return this.getToken(SRParser.ID, 0);
};

Operation_declarationContext.prototype.operation_declaration1 = function() {
    return this.getTypedRuleContext(Operation_declaration1Context,0);
};

Operation_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterOperation_declaration(this);
	}
};

Operation_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitOperation_declaration(this);
	}
};




SRParser.Operation_declarationContext = Operation_declarationContext;

SRParser.prototype.operation_declaration = function() {

    var localctx = new Operation_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, SRParser.RULE_operation_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 379;
        this.match(SRParser.OP);
        this.state = 380;
        this.match(SRParser.ID);
        this.state = 381;
        this.operation_declaration1();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Operation_declaration1Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_operation_declaration1;
    return this;
}

Operation_declaration1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Operation_declaration1Context.prototype.constructor = Operation_declaration1Context;

Operation_declaration1Context.prototype.TK_PAR_IZQ = function() {
    return this.getToken(SRParser.TK_PAR_IZQ, 0);
};

Operation_declaration1Context.prototype.type_specification_op = function() {
    return this.getTypedRuleContext(Type_specification_opContext,0);
};

Operation_declaration1Context.prototype.TK_PAR_DER = function() {
    return this.getToken(SRParser.TK_PAR_DER, 0);
};

Operation_declaration1Context.prototype.operation_end = function() {
    return this.getTypedRuleContext(Operation_endContext,0);
};

Operation_declaration1Context.prototype.type_specification_op_2 = function() {
    return this.getTypedRuleContext(Type_specification_op_2Context,0);
};

Operation_declaration1Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterOperation_declaration1(this);
	}
};

Operation_declaration1Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitOperation_declaration1(this);
	}
};




SRParser.Operation_declaration1Context = Operation_declaration1Context;

SRParser.prototype.operation_declaration1 = function() {

    var localctx = new Operation_declaration1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 46, SRParser.RULE_operation_declaration1);
    try {
        this.state = 391;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.TK_PAR_IZQ:
            this.enterOuterAlt(localctx, 1);
            this.state = 383;
            this.match(SRParser.TK_PAR_IZQ);
            this.state = 384;
            this.type_specification_op();
            this.state = 385;
            this.match(SRParser.TK_PAR_DER);
            this.state = 386;
            this.operation_end();
            break;
        case SRParser.EOF:
        case SRParser.GLOBAL:
        case SRParser.DOUBLE:
        case SRParser.BODY:
        case SRParser.CONST:
        case SRParser.DO:
        case SRParser.OD:
        case SRParser.FS:
        case SRParser.AF:
        case SRParser.SKIP_RESERVED:
        case SRParser.EXIT:
        case SRParser.MAXLENGTH:
        case SRParser.LENGTH:
        case SRParser.EXTEND:
        case SRParser.IMPORT:
        case SRParser.NEW:
        case SRParser.REAL:
        case SRParser.PROCESS:
        case SRParser.FINAL:
        case SRParser.NEXT:
        case SRParser.PROC:
        case SRParser.SPEC:
        case SRParser.INITIAL:
        case SRParser.CHAR:
        case SRParser.RESOURCE:
        case SRParser.RETURNS:
        case SRParser.INT:
        case SRParser.HIGH:
        case SRParser.WRITE:
        case SRParser.PRED:
        case SRParser.CAP:
        case SRParser.LOW:
        case SRParser.END:
        case SRParser.ABS:
        case SRParser.VAR:
        case SRParser.OPTYPE:
        case SRParser.OP:
        case SRParser.FA:
        case SRParser.FI:
        case SRParser.IF:
        case SRParser.LB:
        case SRParser.UB:
        case SRParser.PUT:
        case SRParser.TYPE:
        case SRParser.SUCC:
        case SRParser.ID:
        case SRParser.TK_COMA:
        case SRParser.TK_COR_IZQ:
        case SRParser.TK_DOS_PUNTOS:
        case SRParser.TK_SEPARA:
            this.enterOuterAlt(localctx, 2);
            this.state = 388;
            this.type_specification_op_2();
            this.state = 389;
            this.operation_end();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Operation_type_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_operation_type_declaration;
    return this;
}

Operation_type_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Operation_type_declarationContext.prototype.constructor = Operation_type_declarationContext;

Operation_type_declarationContext.prototype.OPTYPE = function() {
    return this.getToken(SRParser.OPTYPE, 0);
};

Operation_type_declarationContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SRParser.ID);
    } else {
        return this.getToken(SRParser.ID, i);
    }
};


Operation_type_declarationContext.prototype.TK_IGUAL = function() {
    return this.getToken(SRParser.TK_IGUAL, 0);
};

Operation_type_declarationContext.prototype.TK_PAR_IZQ = function() {
    return this.getToken(SRParser.TK_PAR_IZQ, 0);
};

Operation_type_declarationContext.prototype.type_specification_op_type = function() {
    return this.getTypedRuleContext(Type_specification_op_typeContext,0);
};

Operation_type_declarationContext.prototype.TK_PAR_DER = function() {
    return this.getToken(SRParser.TK_PAR_DER, 0);
};

Operation_type_declarationContext.prototype.RETURNS = function() {
    return this.getToken(SRParser.RETURNS, 0);
};

Operation_type_declarationContext.prototype.TK_DOS_PUNTOS = function() {
    return this.getToken(SRParser.TK_DOS_PUNTOS, 0);
};

Operation_type_declarationContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Operation_type_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterOperation_type_declaration(this);
	}
};

Operation_type_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitOperation_type_declaration(this);
	}
};




SRParser.Operation_type_declarationContext = Operation_type_declarationContext;

SRParser.prototype.operation_type_declaration = function() {

    var localctx = new Operation_type_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, SRParser.RULE_operation_type_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 393;
        this.match(SRParser.OPTYPE);
        this.state = 394;
        this.match(SRParser.ID);
        this.state = 395;
        this.match(SRParser.TK_IGUAL);
        this.state = 396;
        this.match(SRParser.TK_PAR_IZQ);
        this.state = 397;
        this.type_specification_op_type();
        this.state = 398;
        this.match(SRParser.TK_PAR_DER);
        this.state = 399;
        this.match(SRParser.RETURNS);
        this.state = 400;
        this.match(SRParser.ID);
        this.state = 401;
        this.match(SRParser.TK_DOS_PUNTOS);
        this.state = 402;
        this.var_type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Type_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_type_declaration;
    return this;
}

Type_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_declarationContext.prototype.constructor = Type_declarationContext;

Type_declarationContext.prototype.TYPE = function() {
    return this.getToken(SRParser.TYPE, 0);
};

Type_declarationContext.prototype.ID = function() {
    return this.getToken(SRParser.ID, 0);
};

Type_declarationContext.prototype.TK_IGUAL = function() {
    return this.getToken(SRParser.TK_IGUAL, 0);
};

Type_declarationContext.prototype.REC = function() {
    return this.getToken(SRParser.REC, 0);
};

Type_declarationContext.prototype.TK_PAR_IZQ = function() {
    return this.getToken(SRParser.TK_PAR_IZQ, 0);
};

Type_declarationContext.prototype.type_specification = function() {
    return this.getTypedRuleContext(Type_specificationContext,0);
};

Type_declarationContext.prototype.TK_PAR_DER = function() {
    return this.getToken(SRParser.TK_PAR_DER, 0);
};

Type_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterType_declaration(this);
	}
};

Type_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitType_declaration(this);
	}
};




SRParser.Type_declarationContext = Type_declarationContext;

SRParser.prototype.type_declaration = function() {

    var localctx = new Type_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, SRParser.RULE_type_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 404;
        this.match(SRParser.TYPE);
        this.state = 405;
        this.match(SRParser.ID);
        this.state = 406;
        this.match(SRParser.TK_IGUAL);
        this.state = 407;
        this.match(SRParser.REC);
        this.state = 408;
        this.match(SRParser.TK_PAR_IZQ);
        this.state = 409;
        this.type_specification();
        this.state = 410;
        this.match(SRParser.TK_PAR_DER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Extend_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_extend_declaration;
    return this;
}

Extend_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Extend_declarationContext.prototype.constructor = Extend_declarationContext;

Extend_declarationContext.prototype.EXTEND = function() {
    return this.getToken(SRParser.EXTEND, 0);
};

Extend_declarationContext.prototype.ids_group = function() {
    return this.getTypedRuleContext(Ids_groupContext,0);
};

Extend_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterExtend_declaration(this);
	}
};

Extend_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitExtend_declaration(this);
	}
};




SRParser.Extend_declarationContext = Extend_declarationContext;

SRParser.prototype.extend_declaration = function() {

    var localctx = new Extend_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, SRParser.RULE_extend_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 412;
        this.match(SRParser.EXTEND);
        this.state = 413;
        this.ids_group();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Conditional_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_conditional_statement;
    return this;
}

Conditional_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conditional_statementContext.prototype.constructor = Conditional_statementContext;

Conditional_statementContext.prototype.IF = function() {
    return this.getToken(SRParser.IF, 0);
};

Conditional_statementContext.prototype.boolean_expression = function() {
    return this.getTypedRuleContext(Boolean_expressionContext,0);
};

Conditional_statementContext.prototype.TK_EJECUTA = function() {
    return this.getToken(SRParser.TK_EJECUTA, 0);
};

Conditional_statementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

Conditional_statementContext.prototype.end_if = function() {
    return this.getTypedRuleContext(End_ifContext,0);
};

Conditional_statementContext.prototype.DO = function() {
    return this.getToken(SRParser.DO, 0);
};

Conditional_statementContext.prototype.end_do = function() {
    return this.getTypedRuleContext(End_doContext,0);
};

Conditional_statementContext.prototype.FS = function() {
    return this.getToken(SRParser.FS, 0);
};

Conditional_statementContext.prototype.quantifier = function() {
    return this.getTypedRuleContext(QuantifierContext,0);
};

Conditional_statementContext.prototype.end_fs = function() {
    return this.getTypedRuleContext(End_fsContext,0);
};

Conditional_statementContext.prototype.FA = function() {
    return this.getToken(SRParser.FA, 0);
};

Conditional_statementContext.prototype.cycles = function() {
    return this.getTypedRuleContext(CyclesContext,0);
};

Conditional_statementContext.prototype.end_fa = function() {
    return this.getTypedRuleContext(End_faContext,0);
};

Conditional_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterConditional_statement(this);
	}
};

Conditional_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitConditional_statement(this);
	}
};




SRParser.Conditional_statementContext = Conditional_statementContext;

SRParser.prototype.conditional_statement = function() {

    var localctx = new Conditional_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, SRParser.RULE_conditional_statement);
    try {
        this.state = 439;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.IF:
            this.enterOuterAlt(localctx, 1);
            this.state = 415;
            this.match(SRParser.IF);
            this.state = 416;
            this.boolean_expression();
            this.state = 417;
            this.match(SRParser.TK_EJECUTA);
            this.state = 418;
            this.block();
            this.state = 419;
            this.end_if();
            break;
        case SRParser.DO:
            this.enterOuterAlt(localctx, 2);
            this.state = 421;
            this.match(SRParser.DO);
            this.state = 422;
            this.boolean_expression();
            this.state = 423;
            this.match(SRParser.TK_EJECUTA);
            this.state = 424;
            this.block();
            this.state = 425;
            this.end_do();
            break;
        case SRParser.FS:
            this.enterOuterAlt(localctx, 3);
            this.state = 427;
            this.match(SRParser.FS);
            this.state = 428;
            this.quantifier();
            this.state = 429;
            this.match(SRParser.TK_EJECUTA);
            this.state = 430;
            this.block();
            this.state = 431;
            this.end_fs();
            break;
        case SRParser.FA:
            this.enterOuterAlt(localctx, 4);
            this.state = 433;
            this.match(SRParser.FA);
            this.state = 434;
            this.cycles();
            this.state = 435;
            this.match(SRParser.TK_EJECUTA);
            this.state = 436;
            this.block();
            this.state = 437;
            this.end_fa();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Procedure_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_procedure_specification;
    return this;
}

Procedure_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Procedure_specificationContext.prototype.constructor = Procedure_specificationContext;

Procedure_specificationContext.prototype.procedure_reserved_word = function() {
    return this.getTypedRuleContext(Procedure_reserved_wordContext,0);
};

Procedure_specificationContext.prototype.ID = function() {
    return this.getToken(SRParser.ID, 0);
};

Procedure_specificationContext.prototype.procedure_specification1 = function() {
    return this.getTypedRuleContext(Procedure_specification1Context,0);
};

Procedure_specificationContext.prototype.returns_rule = function() {
    return this.getTypedRuleContext(Returns_ruleContext,0);
};

Procedure_specificationContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

Procedure_specificationContext.prototype.END = function() {
    return this.getToken(SRParser.END, 0);
};

Procedure_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterProcedure_specification(this);
	}
};

Procedure_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitProcedure_specification(this);
	}
};




SRParser.Procedure_specificationContext = Procedure_specificationContext;

SRParser.prototype.procedure_specification = function() {

    var localctx = new Procedure_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, SRParser.RULE_procedure_specification);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 441;
        this.procedure_reserved_word();
        this.state = 442;
        this.match(SRParser.ID);
        this.state = 443;
        this.procedure_specification1();
        this.state = 444;
        this.returns_rule();
        this.state = 445;
        this.block();
        this.state = 446;
        this.match(SRParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Procedure_specification1Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_procedure_specification1;
    return this;
}

Procedure_specification1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Procedure_specification1Context.prototype.constructor = Procedure_specification1Context;

Procedure_specification1Context.prototype.ids_group_0 = function() {
    return this.getTypedRuleContext(Ids_group_0Context,0);
};

Procedure_specification1Context.prototype.TK_PAR_IZQ = function() {
    return this.getToken(SRParser.TK_PAR_IZQ, 0);
};

Procedure_specification1Context.prototype.TK_PAR_DER = function() {
    return this.getToken(SRParser.TK_PAR_DER, 0);
};

Procedure_specification1Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterProcedure_specification1(this);
	}
};

Procedure_specification1Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitProcedure_specification1(this);
	}
};




SRParser.Procedure_specification1Context = Procedure_specification1Context;

SRParser.prototype.procedure_specification1 = function() {

    var localctx = new Procedure_specification1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 58, SRParser.RULE_procedure_specification1);
    try {
        this.state = 453;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.GLOBAL:
        case SRParser.BODY:
        case SRParser.CONST:
        case SRParser.DO:
        case SRParser.FS:
        case SRParser.SKIP_RESERVED:
        case SRParser.EXIT:
        case SRParser.MAXLENGTH:
        case SRParser.LENGTH:
        case SRParser.EXTEND:
        case SRParser.IMPORT:
        case SRParser.NEW:
        case SRParser.PROCESS:
        case SRParser.FINAL:
        case SRParser.NEXT:
        case SRParser.PROC:
        case SRParser.SPEC:
        case SRParser.INITIAL:
        case SRParser.RETURNS:
        case SRParser.HIGH:
        case SRParser.WRITE:
        case SRParser.PRED:
        case SRParser.LOW:
        case SRParser.ABS:
        case SRParser.VAR:
        case SRParser.OPTYPE:
        case SRParser.OP:
        case SRParser.FA:
        case SRParser.IF:
        case SRParser.LB:
        case SRParser.UB:
        case SRParser.PUT:
        case SRParser.TYPE:
        case SRParser.SUCC:
        case SRParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 448;
            this.ids_group_0();
            break;
        case SRParser.TK_PAR_IZQ:
            this.enterOuterAlt(localctx, 2);
            this.state = 449;
            this.match(SRParser.TK_PAR_IZQ);
            this.state = 450;
            this.ids_group_0();
            this.state = 451;
            this.match(SRParser.TK_PAR_DER);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Final_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_final_declaration;
    return this;
}

Final_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Final_declarationContext.prototype.constructor = Final_declarationContext;

Final_declarationContext.prototype.FINAL = function() {
    return this.getToken(SRParser.FINAL, 0);
};

Final_declarationContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

Final_declarationContext.prototype.END = function() {
    return this.getToken(SRParser.END, 0);
};

Final_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterFinal_declaration(this);
	}
};

Final_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitFinal_declaration(this);
	}
};




SRParser.Final_declarationContext = Final_declarationContext;

SRParser.prototype.final_declaration = function() {

    var localctx = new Final_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, SRParser.RULE_final_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 455;
        this.match(SRParser.FINAL);
        this.state = 456;
        this.block();
        this.state = 457;
        this.match(SRParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Initial_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_initial_declaration;
    return this;
}

Initial_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Initial_declarationContext.prototype.constructor = Initial_declarationContext;

Initial_declarationContext.prototype.INITIAL = function() {
    return this.getToken(SRParser.INITIAL, 0);
};

Initial_declarationContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

Initial_declarationContext.prototype.END = function() {
    return this.getToken(SRParser.END, 0);
};

Initial_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterInitial_declaration(this);
	}
};

Initial_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitInitial_declaration(this);
	}
};




SRParser.Initial_declarationContext = Initial_declarationContext;

SRParser.prototype.initial_declaration = function() {

    var localctx = new Initial_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, SRParser.RULE_initial_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 459;
        this.match(SRParser.INITIAL);
        this.state = 460;
        this.block();
        this.state = 461;
        this.match(SRParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QuantifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_quantifier;
    return this;
}

QuantifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuantifierContext.prototype.constructor = QuantifierContext;


QuantifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterQuantifier(this);
	}
};

QuantifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitQuantifier(this);
	}
};




SRParser.QuantifierContext = QuantifierContext;

SRParser.prototype.quantifier = function() {

    var localctx = new QuantifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, SRParser.RULE_quantifier);
    try {
        this.enterOuterAlt(localctx, 1);

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CyclesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_cycles;
    return this;
}

CyclesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CyclesContext.prototype.constructor = CyclesContext;

CyclesContext.prototype.cycle_body = function() {
    return this.getTypedRuleContext(Cycle_bodyContext,0);
};

CyclesContext.prototype.cycle = function() {
    return this.getTypedRuleContext(CycleContext,0);
};

CyclesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterCycles(this);
	}
};

CyclesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitCycles(this);
	}
};




SRParser.CyclesContext = CyclesContext;

SRParser.prototype.cycles = function() {

    var localctx = new CyclesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, SRParser.RULE_cycles);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 465;
        this.cycle_body();
        this.state = 466;
        this.cycle();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CycleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_cycle;
    return this;
}

CycleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CycleContext.prototype.constructor = CycleContext;

CycleContext.prototype.TK_COMA = function() {
    return this.getToken(SRParser.TK_COMA, 0);
};

CycleContext.prototype.cycles = function() {
    return this.getTypedRuleContext(CyclesContext,0);
};

CycleContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterCycle(this);
	}
};

CycleContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitCycle(this);
	}
};




SRParser.CycleContext = CycleContext;

SRParser.prototype.cycle = function() {

    var localctx = new CycleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, SRParser.RULE_cycle);
    try {
        this.state = 471;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.TK_COMA:
            this.enterOuterAlt(localctx, 1);
            this.state = 468;
            this.match(SRParser.TK_COMA);
            this.state = 469;
            this.cycles();
            break;
        case SRParser.TK_EJECUTA:
            this.enterOuterAlt(localctx, 2);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Cycle_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_cycle_body;
    return this;
}

Cycle_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cycle_bodyContext.prototype.constructor = Cycle_bodyContext;

Cycle_bodyContext.prototype.variable_instance2 = function() {
    return this.getTypedRuleContext(Variable_instance2Context,0);
};

Cycle_bodyContext.prototype.TK_ASIG = function() {
    return this.getToken(SRParser.TK_ASIG, 0);
};

Cycle_bodyContext.prototype.term = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TermContext);
    } else {
        return this.getTypedRuleContext(TermContext,i);
    }
};

Cycle_bodyContext.prototype.TO = function() {
    return this.getToken(SRParser.TO, 0);
};

Cycle_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterCycle_body(this);
	}
};

Cycle_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitCycle_body(this);
	}
};




SRParser.Cycle_bodyContext = Cycle_bodyContext;

SRParser.prototype.cycle_body = function() {

    var localctx = new Cycle_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, SRParser.RULE_cycle_body);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 473;
        this.variable_instance2();
        this.state = 474;
        this.match(SRParser.TK_ASIG);
        this.state = 475;
        this.term();
        this.state = 476;
        this.match(SRParser.TO);
        this.state = 477;
        this.term();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Terms_to_termsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_terms_to_terms;
    return this;
}

Terms_to_termsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Terms_to_termsContext.prototype.constructor = Terms_to_termsContext;

Terms_to_termsContext.prototype.term = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TermContext);
    } else {
        return this.getTypedRuleContext(TermContext,i);
    }
};

Terms_to_termsContext.prototype.TO = function() {
    return this.getToken(SRParser.TO, 0);
};

Terms_to_termsContext.prototype.terms_to_term = function() {
    return this.getTypedRuleContext(Terms_to_termContext,0);
};

Terms_to_termsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterTerms_to_terms(this);
	}
};

Terms_to_termsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitTerms_to_terms(this);
	}
};




SRParser.Terms_to_termsContext = Terms_to_termsContext;

SRParser.prototype.terms_to_terms = function() {

    var localctx = new Terms_to_termsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, SRParser.RULE_terms_to_terms);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 479;
        this.term();
        this.state = 480;
        this.match(SRParser.TO);
        this.state = 481;
        this.term();
        this.state = 482;
        this.terms_to_term();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Terms_to_termContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_terms_to_term;
    return this;
}

Terms_to_termContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Terms_to_termContext.prototype.constructor = Terms_to_termContext;

Terms_to_termContext.prototype.TK_COMA = function() {
    return this.getToken(SRParser.TK_COMA, 0);
};

Terms_to_termContext.prototype.terms_to_terms = function() {
    return this.getTypedRuleContext(Terms_to_termsContext,0);
};

Terms_to_termContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterTerms_to_term(this);
	}
};

Terms_to_termContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitTerms_to_term(this);
	}
};




SRParser.Terms_to_termContext = Terms_to_termContext;

SRParser.prototype.terms_to_term = function() {

    var localctx = new Terms_to_termContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, SRParser.RULE_terms_to_term);
    try {
        this.state = 487;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 484;
            this.match(SRParser.TK_COMA);
            this.state = 485;
            this.terms_to_terms();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Returns_ruleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_returns_rule;
    return this;
}

Returns_ruleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Returns_ruleContext.prototype.constructor = Returns_ruleContext;

Returns_ruleContext.prototype.RETURNS = function() {
    return this.getToken(SRParser.RETURNS, 0);
};

Returns_ruleContext.prototype.ID = function() {
    return this.getToken(SRParser.ID, 0);
};

Returns_ruleContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterReturns_rule(this);
	}
};

Returns_ruleContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitReturns_rule(this);
	}
};




SRParser.Returns_ruleContext = Returns_ruleContext;

SRParser.prototype.returns_rule = function() {

    var localctx = new Returns_ruleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, SRParser.RULE_returns_rule);
    try {
        this.state = 492;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.RETURNS:
            this.enterOuterAlt(localctx, 1);
            this.state = 489;
            this.match(SRParser.RETURNS);
            this.state = 490;
            this.match(SRParser.ID);
            break;
        case SRParser.GLOBAL:
        case SRParser.BODY:
        case SRParser.CONST:
        case SRParser.DO:
        case SRParser.FS:
        case SRParser.SKIP_RESERVED:
        case SRParser.EXIT:
        case SRParser.MAXLENGTH:
        case SRParser.LENGTH:
        case SRParser.EXTEND:
        case SRParser.IMPORT:
        case SRParser.NEW:
        case SRParser.PROCESS:
        case SRParser.FINAL:
        case SRParser.NEXT:
        case SRParser.PROC:
        case SRParser.SPEC:
        case SRParser.INITIAL:
        case SRParser.HIGH:
        case SRParser.WRITE:
        case SRParser.PRED:
        case SRParser.LOW:
        case SRParser.ABS:
        case SRParser.VAR:
        case SRParser.OPTYPE:
        case SRParser.OP:
        case SRParser.FA:
        case SRParser.IF:
        case SRParser.LB:
        case SRParser.UB:
        case SRParser.PUT:
        case SRParser.TYPE:
        case SRParser.SUCC:
        case SRParser.ID:
            this.enterOuterAlt(localctx, 2);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Procedure_reserved_wordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_procedure_reserved_word;
    return this;
}

Procedure_reserved_wordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Procedure_reserved_wordContext.prototype.constructor = Procedure_reserved_wordContext;

Procedure_reserved_wordContext.prototype.PROC = function() {
    return this.getToken(SRParser.PROC, 0);
};

Procedure_reserved_wordContext.prototype.PROCESS = function() {
    return this.getToken(SRParser.PROCESS, 0);
};

Procedure_reserved_wordContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterProcedure_reserved_word(this);
	}
};

Procedure_reserved_wordContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitProcedure_reserved_word(this);
	}
};




SRParser.Procedure_reserved_wordContext = Procedure_reserved_wordContext;

SRParser.prototype.procedure_reserved_word = function() {

    var localctx = new Procedure_reserved_wordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, SRParser.RULE_procedure_reserved_word);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 494;
        _la = this._input.LA(1);
        if(!(_la===SRParser.PROCESS || _la===SRParser.PROC)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Operation_endContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_operation_end;
    return this;
}

Operation_endContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Operation_endContext.prototype.constructor = Operation_endContext;

Operation_endContext.prototype.TK_COR_IZQ = function() {
    return this.getToken(SRParser.TK_COR_IZQ, 0);
};

Operation_endContext.prototype.operation_type_declaration = function() {
    return this.getTypedRuleContext(Operation_type_declarationContext,0);
};

Operation_endContext.prototype.TK_COR_DER = function() {
    return this.getToken(SRParser.TK_COR_DER, 0);
};

Operation_endContext.prototype.RETURNS = function() {
    return this.getToken(SRParser.RETURNS, 0);
};

Operation_endContext.prototype.ID = function() {
    return this.getToken(SRParser.ID, 0);
};

Operation_endContext.prototype.TK_DOS_PUNTOS = function() {
    return this.getToken(SRParser.TK_DOS_PUNTOS, 0);
};

Operation_endContext.prototype.operation_end1 = function() {
    return this.getTypedRuleContext(Operation_end1Context,0);
};

Operation_endContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterOperation_end(this);
	}
};

Operation_endContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitOperation_end(this);
	}
};




SRParser.Operation_endContext = Operation_endContext;

SRParser.prototype.operation_end = function() {

    var localctx = new Operation_endContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, SRParser.RULE_operation_end);
    try {
        this.state = 505;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.TK_COR_IZQ:
            this.enterOuterAlt(localctx, 1);
            this.state = 496;
            this.match(SRParser.TK_COR_IZQ);
            this.state = 497;
            this.operation_type_declaration();
            this.state = 498;
            this.match(SRParser.TK_COR_DER);
            break;
        case SRParser.RETURNS:
            this.enterOuterAlt(localctx, 2);
            this.state = 500;
            this.match(SRParser.RETURNS);
            this.state = 501;
            this.match(SRParser.ID);
            this.state = 502;
            this.match(SRParser.TK_DOS_PUNTOS);
            this.state = 503;
            this.operation_end1();
            break;
        case SRParser.EOF:
        case SRParser.GLOBAL:
        case SRParser.BODY:
        case SRParser.CONST:
        case SRParser.DO:
        case SRParser.OD:
        case SRParser.FS:
        case SRParser.AF:
        case SRParser.SKIP_RESERVED:
        case SRParser.EXIT:
        case SRParser.MAXLENGTH:
        case SRParser.LENGTH:
        case SRParser.EXTEND:
        case SRParser.IMPORT:
        case SRParser.NEW:
        case SRParser.PROCESS:
        case SRParser.FINAL:
        case SRParser.NEXT:
        case SRParser.PROC:
        case SRParser.SPEC:
        case SRParser.INITIAL:
        case SRParser.RESOURCE:
        case SRParser.HIGH:
        case SRParser.WRITE:
        case SRParser.PRED:
        case SRParser.LOW:
        case SRParser.END:
        case SRParser.ABS:
        case SRParser.VAR:
        case SRParser.OPTYPE:
        case SRParser.OP:
        case SRParser.FA:
        case SRParser.FI:
        case SRParser.IF:
        case SRParser.LB:
        case SRParser.UB:
        case SRParser.PUT:
        case SRParser.TYPE:
        case SRParser.SUCC:
        case SRParser.ID:
        case SRParser.TK_SEPARA:
            this.enterOuterAlt(localctx, 3);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Operation_end1Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_operation_end1;
    return this;
}

Operation_end1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Operation_end1Context.prototype.constructor = Operation_end1Context;

Operation_end1Context.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Operation_end1Context.prototype.ID = function() {
    return this.getToken(SRParser.ID, 0);
};

Operation_end1Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterOperation_end1(this);
	}
};

Operation_end1Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitOperation_end1(this);
	}
};




SRParser.Operation_end1Context = Operation_end1Context;

SRParser.prototype.operation_end1 = function() {

    var localctx = new Operation_end1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 82, SRParser.RULE_operation_end1);
    try {
        this.state = 509;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.DOUBLE:
        case SRParser.REAL:
        case SRParser.CHAR:
        case SRParser.INT:
        case SRParser.CAP:
            this.enterOuterAlt(localctx, 1);
            this.state = 507;
            this.var_type();
            break;
        case SRParser.ID:
            this.enterOuterAlt(localctx, 2);
            this.state = 508;
            this.match(SRParser.ID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Type_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_type_specification;
    return this;
}

Type_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_specificationContext.prototype.constructor = Type_specificationContext;

Type_specificationContext.prototype.ids_group = function() {
    return this.getTypedRuleContext(Ids_groupContext,0);
};

Type_specificationContext.prototype.TK_DOS_PUNTOS = function() {
    return this.getToken(SRParser.TK_DOS_PUNTOS, 0);
};

Type_specificationContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Type_specificationContext.prototype.type_specification1 = function() {
    return this.getTypedRuleContext(Type_specification1Context,0);
};

Type_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterType_specification(this);
	}
};

Type_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitType_specification(this);
	}
};




SRParser.Type_specificationContext = Type_specificationContext;

SRParser.prototype.type_specification = function() {

    var localctx = new Type_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, SRParser.RULE_type_specification);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 511;
        this.ids_group();
        this.state = 512;
        this.match(SRParser.TK_DOS_PUNTOS);
        this.state = 513;
        this.var_type();
        this.state = 514;
        this.type_specification1();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Type_specification1Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_type_specification1;
    return this;
}

Type_specification1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_specification1Context.prototype.constructor = Type_specification1Context;

Type_specification1Context.prototype.TK_PUNTO_Y_COMA = function() {
    return this.getToken(SRParser.TK_PUNTO_Y_COMA, 0);
};

Type_specification1Context.prototype.type_specification = function() {
    return this.getTypedRuleContext(Type_specificationContext,0);
};

Type_specification1Context.prototype.TK_COMA = function() {
    return this.getToken(SRParser.TK_COMA, 0);
};

Type_specification1Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterType_specification1(this);
	}
};

Type_specification1Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitType_specification1(this);
	}
};




SRParser.Type_specification1Context = Type_specification1Context;

SRParser.prototype.type_specification1 = function() {

    var localctx = new Type_specification1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 86, SRParser.RULE_type_specification1);
    try {
        this.state = 521;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.TK_PUNTO_Y_COMA:
            this.enterOuterAlt(localctx, 1);
            this.state = 516;
            this.match(SRParser.TK_PUNTO_Y_COMA);
            this.state = 517;
            this.type_specification();
            break;
        case SRParser.TK_COMA:
            this.enterOuterAlt(localctx, 2);
            this.state = 518;
            this.match(SRParser.TK_COMA);
            this.state = 519;
            this.type_specification();
            break;
        case SRParser.TK_PAR_DER:
            this.enterOuterAlt(localctx, 3);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Type_specification_op_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_type_specification_op_type;
    return this;
}

Type_specification_op_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_specification_op_typeContext.prototype.constructor = Type_specification_op_typeContext;

Type_specification_op_typeContext.prototype.ids_group_dos_puntos_op_type = function() {
    return this.getTypedRuleContext(Ids_group_dos_puntos_op_typeContext,0);
};

Type_specification_op_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterType_specification_op_type(this);
	}
};

Type_specification_op_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitType_specification_op_type(this);
	}
};




SRParser.Type_specification_op_typeContext = Type_specification_op_typeContext;

SRParser.prototype.type_specification_op_type = function() {

    var localctx = new Type_specification_op_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, SRParser.RULE_type_specification_op_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 523;
        this.ids_group_dos_puntos_op_type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Type_specification_opContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_type_specification_op;
    return this;
}

Type_specification_opContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_specification_opContext.prototype.constructor = Type_specification_opContext;

Type_specification_opContext.prototype.ID = function() {
    return this.getToken(SRParser.ID, 0);
};

Type_specification_opContext.prototype.type_specification_op1 = function() {
    return this.getTypedRuleContext(Type_specification_op1Context,0);
};

Type_specification_opContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterType_specification_op(this);
	}
};

Type_specification_opContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitType_specification_op(this);
	}
};




SRParser.Type_specification_opContext = Type_specification_opContext;

SRParser.prototype.type_specification_op = function() {

    var localctx = new Type_specification_opContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, SRParser.RULE_type_specification_op);
    try {
        this.state = 528;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 525;
            this.match(SRParser.ID);
            this.state = 526;
            this.type_specification_op1();
            break;
        case SRParser.TK_PAR_DER:
            this.enterOuterAlt(localctx, 2);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Type_specification_op1Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_type_specification_op1;
    return this;
}

Type_specification_op1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_specification_op1Context.prototype.constructor = Type_specification_op1Context;

Type_specification_op1Context.prototype.TK_DOS_PUNTOS = function() {
    return this.getToken(SRParser.TK_DOS_PUNTOS, 0);
};

Type_specification_op1Context.prototype.ids_group_dos_puntos = function() {
    return this.getTypedRuleContext(Ids_group_dos_puntosContext,0);
};

Type_specification_op1Context.prototype.type_specification_op = function() {
    return this.getTypedRuleContext(Type_specification_opContext,0);
};

Type_specification_op1Context.prototype.TK_COMA = function() {
    return this.getToken(SRParser.TK_COMA, 0);
};

Type_specification_op1Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterType_specification_op1(this);
	}
};

Type_specification_op1Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitType_specification_op1(this);
	}
};




SRParser.Type_specification_op1Context = Type_specification_op1Context;

SRParser.prototype.type_specification_op1 = function() {

    var localctx = new Type_specification_op1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 92, SRParser.RULE_type_specification_op1);
    try {
        this.state = 537;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.TK_DOS_PUNTOS:
            this.enterOuterAlt(localctx, 1);
            this.state = 530;
            this.match(SRParser.TK_DOS_PUNTOS);
            this.state = 531;
            this.ids_group_dos_puntos();
            this.state = 532;
            this.type_specification_op();
            break;
        case SRParser.TK_COMA:
            this.enterOuterAlt(localctx, 2);
            this.state = 534;
            this.match(SRParser.TK_COMA);
            this.state = 535;
            this.type_specification_op();
            break;
        case SRParser.TK_PAR_DER:
            this.enterOuterAlt(localctx, 3);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Type_specification_op_2Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_type_specification_op_2;
    return this;
}

Type_specification_op_2Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_specification_op_2Context.prototype.constructor = Type_specification_op_2Context;

Type_specification_op_2Context.prototype.ids_group_dos_puntos = function() {
    return this.getTypedRuleContext(Ids_group_dos_puntosContext,0);
};

Type_specification_op_2Context.prototype.type_specification_op_21 = function() {
    return this.getTypedRuleContext(Type_specification_op_21Context,0);
};

Type_specification_op_2Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterType_specification_op_2(this);
	}
};

Type_specification_op_2Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitType_specification_op_2(this);
	}
};




SRParser.Type_specification_op_2Context = Type_specification_op_2Context;

SRParser.prototype.type_specification_op_2 = function() {

    var localctx = new Type_specification_op_2Context(this, this._ctx, this.state);
    this.enterRule(localctx, 94, SRParser.RULE_type_specification_op_2);
    try {
        this.state = 543;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 539;
            this.ids_group_dos_puntos();
            this.state = 540;
            this.type_specification_op_21();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Type_specification_op_21Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_type_specification_op_21;
    return this;
}

Type_specification_op_21Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_specification_op_21Context.prototype.constructor = Type_specification_op_21Context;

Type_specification_op_21Context.prototype.TK_COMA = function() {
    return this.getToken(SRParser.TK_COMA, 0);
};

Type_specification_op_21Context.prototype.type_specification_op_2 = function() {
    return this.getTypedRuleContext(Type_specification_op_2Context,0);
};

Type_specification_op_21Context.prototype.TK_DOS_PUNTOS = function() {
    return this.getToken(SRParser.TK_DOS_PUNTOS, 0);
};

Type_specification_op_21Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterType_specification_op_21(this);
	}
};

Type_specification_op_21Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitType_specification_op_21(this);
	}
};




SRParser.Type_specification_op_21Context = Type_specification_op_21Context;

SRParser.prototype.type_specification_op_21 = function() {

    var localctx = new Type_specification_op_21Context(this, this._ctx, this.state);
    this.enterRule(localctx, 96, SRParser.RULE_type_specification_op_21);
    try {
        this.state = 550;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.TK_COMA:
            this.enterOuterAlt(localctx, 1);
            this.state = 545;
            this.match(SRParser.TK_COMA);
            this.state = 546;
            this.type_specification_op_2();
            break;
        case SRParser.TK_DOS_PUNTOS:
            this.enterOuterAlt(localctx, 2);
            this.state = 547;
            this.match(SRParser.TK_DOS_PUNTOS);
            this.state = 548;
            this.type_specification_op_2();
            break;
        case SRParser.EOF:
        case SRParser.GLOBAL:
        case SRParser.BODY:
        case SRParser.CONST:
        case SRParser.DO:
        case SRParser.OD:
        case SRParser.FS:
        case SRParser.AF:
        case SRParser.SKIP_RESERVED:
        case SRParser.EXIT:
        case SRParser.MAXLENGTH:
        case SRParser.LENGTH:
        case SRParser.EXTEND:
        case SRParser.IMPORT:
        case SRParser.NEW:
        case SRParser.PROCESS:
        case SRParser.FINAL:
        case SRParser.NEXT:
        case SRParser.PROC:
        case SRParser.SPEC:
        case SRParser.INITIAL:
        case SRParser.RESOURCE:
        case SRParser.RETURNS:
        case SRParser.HIGH:
        case SRParser.WRITE:
        case SRParser.PRED:
        case SRParser.LOW:
        case SRParser.END:
        case SRParser.ABS:
        case SRParser.VAR:
        case SRParser.OPTYPE:
        case SRParser.OP:
        case SRParser.FA:
        case SRParser.FI:
        case SRParser.IF:
        case SRParser.LB:
        case SRParser.UB:
        case SRParser.PUT:
        case SRParser.TYPE:
        case SRParser.SUCC:
        case SRParser.ID:
        case SRParser.TK_COR_IZQ:
        case SRParser.TK_SEPARA:
            this.enterOuterAlt(localctx, 3);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function End_ifContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_end_if;
    return this;
}

End_ifContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
End_ifContext.prototype.constructor = End_ifContext;

End_ifContext.prototype.TK_SEPARA = function() {
    return this.getToken(SRParser.TK_SEPARA, 0);
};

End_ifContext.prototype.FI = function() {
    return this.getToken(SRParser.FI, 0);
};

End_ifContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterEnd_if(this);
	}
};

End_ifContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitEnd_if(this);
	}
};




SRParser.End_ifContext = End_ifContext;

SRParser.prototype.end_if = function() {

    var localctx = new End_ifContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, SRParser.RULE_end_if);
    try {
        this.state = 555;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.TK_SEPARA:
            this.enterOuterAlt(localctx, 1);
            this.state = 552;
            this.match(SRParser.TK_SEPARA);
            this.state = 553;
            this.match(SRParser.FI);
            break;
        case SRParser.FI:
            this.enterOuterAlt(localctx, 2);
            this.state = 554;
            this.match(SRParser.FI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function End_doContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_end_do;
    return this;
}

End_doContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
End_doContext.prototype.constructor = End_doContext;

End_doContext.prototype.TK_SEPARA = function() {
    return this.getToken(SRParser.TK_SEPARA, 0);
};

End_doContext.prototype.OD = function() {
    return this.getToken(SRParser.OD, 0);
};

End_doContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterEnd_do(this);
	}
};

End_doContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitEnd_do(this);
	}
};




SRParser.End_doContext = End_doContext;

SRParser.prototype.end_do = function() {

    var localctx = new End_doContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, SRParser.RULE_end_do);
    try {
        this.state = 560;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.TK_SEPARA:
            this.enterOuterAlt(localctx, 1);
            this.state = 557;
            this.match(SRParser.TK_SEPARA);
            this.state = 558;
            this.match(SRParser.OD);
            break;
        case SRParser.OD:
            this.enterOuterAlt(localctx, 2);
            this.state = 559;
            this.match(SRParser.OD);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function End_faContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_end_fa;
    return this;
}

End_faContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
End_faContext.prototype.constructor = End_faContext;

End_faContext.prototype.TK_SEPARA = function() {
    return this.getToken(SRParser.TK_SEPARA, 0);
};

End_faContext.prototype.AF = function() {
    return this.getToken(SRParser.AF, 0);
};

End_faContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterEnd_fa(this);
	}
};

End_faContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitEnd_fa(this);
	}
};




SRParser.End_faContext = End_faContext;

SRParser.prototype.end_fa = function() {

    var localctx = new End_faContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, SRParser.RULE_end_fa);
    try {
        this.state = 565;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.TK_SEPARA:
            this.enterOuterAlt(localctx, 1);
            this.state = 562;
            this.match(SRParser.TK_SEPARA);
            this.state = 563;
            this.match(SRParser.AF);
            break;
        case SRParser.AF:
            this.enterOuterAlt(localctx, 2);
            this.state = 564;
            this.match(SRParser.AF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function End_fsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_end_fs;
    return this;
}

End_fsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
End_fsContext.prototype.constructor = End_fsContext;

End_fsContext.prototype.TK_SEPARA = function() {
    return this.getToken(SRParser.TK_SEPARA, 0);
};

End_fsContext.prototype.FS = function() {
    return this.getToken(SRParser.FS, 0);
};

End_fsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterEnd_fs(this);
	}
};

End_fsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitEnd_fs(this);
	}
};




SRParser.End_fsContext = End_fsContext;

SRParser.prototype.end_fs = function() {

    var localctx = new End_fsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, SRParser.RULE_end_fs);
    try {
        this.state = 570;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.TK_SEPARA:
            this.enterOuterAlt(localctx, 1);
            this.state = 567;
            this.match(SRParser.TK_SEPARA);
            this.state = 568;
            this.match(SRParser.FS);
            break;
        case SRParser.FS:
            this.enterOuterAlt(localctx, 2);
            this.state = 569;
            this.match(SRParser.FS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_parameter;
    return this;
}

ParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterContext.prototype.constructor = ParameterContext;

ParameterContext.prototype.TK_PAR_IZQ = function() {
    return this.getToken(SRParser.TK_PAR_IZQ, 0);
};

ParameterContext.prototype.parameter_specification = function() {
    return this.getTypedRuleContext(Parameter_specificationContext,0);
};

ParameterContext.prototype.TK_PAR_DER = function() {
    return this.getToken(SRParser.TK_PAR_DER, 0);
};

ParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterParameter(this);
	}
};

ParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitParameter(this);
	}
};




SRParser.ParameterContext = ParameterContext;

SRParser.prototype.parameter = function() {

    var localctx = new ParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, SRParser.RULE_parameter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 572;
        this.match(SRParser.TK_PAR_IZQ);
        this.state = 573;
        this.parameter_specification();
        this.state = 574;
        this.match(SRParser.TK_PAR_DER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Parameter_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_parameter_specification;
    return this;
}

Parameter_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parameter_specificationContext.prototype.constructor = Parameter_specificationContext;

Parameter_specificationContext.prototype.parameter_id = function() {
    return this.getTypedRuleContext(Parameter_idContext,0);
};

Parameter_specificationContext.prototype.TK_DOS_PUNTOS = function() {
    return this.getToken(SRParser.TK_DOS_PUNTOS, 0);
};

Parameter_specificationContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Parameter_specificationContext.prototype.TK_PUNTO_Y_COMA = function() {
    return this.getToken(SRParser.TK_PUNTO_Y_COMA, 0);
};

Parameter_specificationContext.prototype.parameter_specification = function() {
    return this.getTypedRuleContext(Parameter_specificationContext,0);
};

Parameter_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterParameter_specification(this);
	}
};

Parameter_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitParameter_specification(this);
	}
};




SRParser.Parameter_specificationContext = Parameter_specificationContext;

SRParser.prototype.parameter_specification = function() {

    var localctx = new Parameter_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, SRParser.RULE_parameter_specification);
    try {
        this.state = 587;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 576;
            this.parameter_id();
            this.state = 577;
            this.match(SRParser.TK_DOS_PUNTOS);
            this.state = 578;
            this.var_type();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 580;
            this.parameter_id();
            this.state = 581;
            this.match(SRParser.TK_DOS_PUNTOS);
            this.state = 582;
            this.var_type();
            this.state = 583;
            this.match(SRParser.TK_PUNTO_Y_COMA);
            this.state = 584;
            this.parameter_specification();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Parameter_idContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_parameter_id;
    return this;
}

Parameter_idContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parameter_idContext.prototype.constructor = Parameter_idContext;

Parameter_idContext.prototype.ID = function() {
    return this.getToken(SRParser.ID, 0);
};

Parameter_idContext.prototype.array = function() {
    return this.getTypedRuleContext(ArrayContext,0);
};

Parameter_idContext.prototype.RES = function() {
    return this.getToken(SRParser.RES, 0);
};

Parameter_idContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterParameter_id(this);
	}
};

Parameter_idContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitParameter_id(this);
	}
};




SRParser.Parameter_idContext = Parameter_idContext;

SRParser.prototype.parameter_id = function() {

    var localctx = new Parameter_idContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, SRParser.RULE_parameter_id);
    try {
        this.state = 593;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 589;
            this.match(SRParser.ID);
            break;
        case SRParser.TK_COR_IZQ:
        case SRParser.TK_DOS_PUNTOS:
            this.enterOuterAlt(localctx, 2);
            this.state = 590;
            this.array();
            break;
        case SRParser.RES:
            this.enterOuterAlt(localctx, 3);
            this.state = 591;
            this.match(SRParser.RES);
            this.state = 592;
            this.array();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrayContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_array;
    return this;
}

ArrayContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayContext.prototype.constructor = ArrayContext;

ArrayContext.prototype.TK_COR_IZQ = function() {
    return this.getToken(SRParser.TK_COR_IZQ, 0);
};

ArrayContext.prototype.ids_group = function() {
    return this.getTypedRuleContext(Ids_groupContext,0);
};

ArrayContext.prototype.TK_COR_DER = function() {
    return this.getToken(SRParser.TK_COR_DER, 0);
};

ArrayContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterArray(this);
	}
};

ArrayContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitArray(this);
	}
};




SRParser.ArrayContext = ArrayContext;

SRParser.prototype.array = function() {

    var localctx = new ArrayContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, SRParser.RULE_array);
    try {
        this.state = 600;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.TK_COR_IZQ:
            this.enterOuterAlt(localctx, 1);
            this.state = 595;
            this.match(SRParser.TK_COR_IZQ);
            this.state = 596;
            this.ids_group();
            this.state = 597;
            this.match(SRParser.TK_COR_DER);
            break;
        case SRParser.TK_ASIG:
        case SRParser.TK_COMA:
        case SRParser.TK_DOS_PUNTOS:
            this.enterOuterAlt(localctx, 2);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.expression1 = function() {
    return this.getTypedRuleContext(Expression1Context,0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitExpression(this);
	}
};




SRParser.ExpressionContext = ExpressionContext;

SRParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, SRParser.RULE_expression);
    try {
        this.state = 604;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 602;
            this.expression1();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Expression1Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_expression1;
    return this;
}

Expression1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression1Context.prototype.constructor = Expression1Context;

Expression1Context.prototype.boolean_expression = function() {
    return this.getTypedRuleContext(Boolean_expressionContext,0);
};

Expression1Context.prototype.arithmethic_expression = function() {
    return this.getTypedRuleContext(Arithmethic_expressionContext,0);
};

Expression1Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterExpression1(this);
	}
};

Expression1Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitExpression1(this);
	}
};




SRParser.Expression1Context = Expression1Context;

SRParser.prototype.expression1 = function() {

    var localctx = new Expression1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 116, SRParser.RULE_expression1);
    try {
        this.state = 608;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 606;
            this.boolean_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 607;
            this.arithmethic_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Fnp_parameter_type_1Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_fnp_parameter_type_1;
    return this;
}

Fnp_parameter_type_1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fnp_parameter_type_1Context.prototype.constructor = Fnp_parameter_type_1Context;

Fnp_parameter_type_1Context.prototype.primitive_function = function() {
    return this.getTypedRuleContext(Primitive_functionContext,0);
};

Fnp_parameter_type_1Context.prototype.fnp_parameter_type_11 = function() {
    return this.getTypedRuleContext(Fnp_parameter_type_11Context,0);
};

Fnp_parameter_type_1Context.prototype.TK_CADENA = function() {
    return this.getToken(SRParser.TK_CADENA, 0);
};

Fnp_parameter_type_1Context.prototype.ID = function() {
    return this.getToken(SRParser.ID, 0);
};

Fnp_parameter_type_1Context.prototype.fnp_parameter_type_111 = function() {
    return this.getTypedRuleContext(Fnp_parameter_type_111Context,0);
};

Fnp_parameter_type_1Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterFnp_parameter_type_1(this);
	}
};

Fnp_parameter_type_1Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitFnp_parameter_type_1(this);
	}
};




SRParser.Fnp_parameter_type_1Context = Fnp_parameter_type_1Context;

SRParser.prototype.fnp_parameter_type_1 = function() {

    var localctx = new Fnp_parameter_type_1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 118, SRParser.RULE_fnp_parameter_type_1);
    try {
        this.state = 617;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.MAXLENGTH:
        case SRParser.LENGTH:
        case SRParser.NEW:
        case SRParser.HIGH:
        case SRParser.WRITE:
        case SRParser.PRED:
        case SRParser.LOW:
        case SRParser.ABS:
        case SRParser.LB:
        case SRParser.UB:
        case SRParser.PUT:
        case SRParser.SUCC:
            this.enterOuterAlt(localctx, 1);
            this.state = 610;
            this.primitive_function();
            this.state = 611;
            this.fnp_parameter_type_11();
            break;
        case SRParser.TK_CADENA:
            this.enterOuterAlt(localctx, 2);
            this.state = 613;
            this.match(SRParser.TK_CADENA);
            this.state = 614;
            this.fnp_parameter_type_11();
            break;
        case SRParser.ID:
            this.enterOuterAlt(localctx, 3);
            this.state = 615;
            this.match(SRParser.ID);
            this.state = 616;
            this.fnp_parameter_type_111();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Fnp_parameter_type_111Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_fnp_parameter_type_111;
    return this;
}

Fnp_parameter_type_111Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fnp_parameter_type_111Context.prototype.constructor = Fnp_parameter_type_111Context;

Fnp_parameter_type_111Context.prototype.TK_PUNTO = function() {
    return this.getToken(SRParser.TK_PUNTO, 0);
};

Fnp_parameter_type_111Context.prototype.ID = function() {
    return this.getToken(SRParser.ID, 0);
};

Fnp_parameter_type_111Context.prototype.fnp_parameter_type_1111 = function() {
    return this.getTypedRuleContext(Fnp_parameter_type_1111Context,0);
};

Fnp_parameter_type_111Context.prototype.call_function_in_function = function() {
    return this.getTypedRuleContext(Call_function_in_functionContext,0);
};

Fnp_parameter_type_111Context.prototype.fnp_parameter_type_11 = function() {
    return this.getTypedRuleContext(Fnp_parameter_type_11Context,0);
};

Fnp_parameter_type_111Context.prototype.TK_COMA = function() {
    return this.getToken(SRParser.TK_COMA, 0);
};

Fnp_parameter_type_111Context.prototype.fnp_parameter_type_1 = function() {
    return this.getTypedRuleContext(Fnp_parameter_type_1Context,0);
};

Fnp_parameter_type_111Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterFnp_parameter_type_111(this);
	}
};

Fnp_parameter_type_111Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitFnp_parameter_type_111(this);
	}
};




SRParser.Fnp_parameter_type_111Context = Fnp_parameter_type_111Context;

SRParser.prototype.fnp_parameter_type_111 = function() {

    var localctx = new Fnp_parameter_type_111Context(this, this._ctx, this.state);
    this.enterRule(localctx, 120, SRParser.RULE_fnp_parameter_type_111);
    try {
        this.state = 628;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.TK_PUNTO:
            this.enterOuterAlt(localctx, 1);
            this.state = 619;
            this.match(SRParser.TK_PUNTO);
            this.state = 620;
            this.match(SRParser.ID);
            this.state = 621;
            this.fnp_parameter_type_1111();
            break;
        case SRParser.TK_PAR_IZQ:
            this.enterOuterAlt(localctx, 2);
            this.state = 622;
            this.call_function_in_function();
            this.state = 623;
            this.fnp_parameter_type_11();
            break;
        case SRParser.TK_COMA:
            this.enterOuterAlt(localctx, 3);
            this.state = 625;
            this.match(SRParser.TK_COMA);
            this.state = 626;
            this.fnp_parameter_type_1();
            break;
        case SRParser.TK_PAR_DER:
            this.enterOuterAlt(localctx, 4);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Fnp_parameter_type_1111Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_fnp_parameter_type_1111;
    return this;
}

Fnp_parameter_type_1111Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fnp_parameter_type_1111Context.prototype.constructor = Fnp_parameter_type_1111Context;

Fnp_parameter_type_1111Context.prototype.call_function_in_function = function() {
    return this.getTypedRuleContext(Call_function_in_functionContext,0);
};

Fnp_parameter_type_1111Context.prototype.fnp_parameter_type_11 = function() {
    return this.getTypedRuleContext(Fnp_parameter_type_11Context,0);
};

Fnp_parameter_type_1111Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterFnp_parameter_type_1111(this);
	}
};

Fnp_parameter_type_1111Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitFnp_parameter_type_1111(this);
	}
};




SRParser.Fnp_parameter_type_1111Context = Fnp_parameter_type_1111Context;

SRParser.prototype.fnp_parameter_type_1111 = function() {

    var localctx = new Fnp_parameter_type_1111Context(this, this._ctx, this.state);
    this.enterRule(localctx, 122, SRParser.RULE_fnp_parameter_type_1111);
    try {
        this.state = 634;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.TK_PAR_IZQ:
            this.enterOuterAlt(localctx, 1);
            this.state = 630;
            this.call_function_in_function();
            this.state = 631;
            this.fnp_parameter_type_11();
            break;
        case SRParser.TK_COMA:
        case SRParser.TK_PAR_DER:
            this.enterOuterAlt(localctx, 2);
            this.state = 633;
            this.fnp_parameter_type_11();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Fnp_parameter_type_11Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_fnp_parameter_type_11;
    return this;
}

Fnp_parameter_type_11Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fnp_parameter_type_11Context.prototype.constructor = Fnp_parameter_type_11Context;

Fnp_parameter_type_11Context.prototype.TK_COMA = function() {
    return this.getToken(SRParser.TK_COMA, 0);
};

Fnp_parameter_type_11Context.prototype.fnp_parameter_type_1 = function() {
    return this.getTypedRuleContext(Fnp_parameter_type_1Context,0);
};

Fnp_parameter_type_11Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterFnp_parameter_type_11(this);
	}
};

Fnp_parameter_type_11Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitFnp_parameter_type_11(this);
	}
};




SRParser.Fnp_parameter_type_11Context = Fnp_parameter_type_11Context;

SRParser.prototype.fnp_parameter_type_11 = function() {

    var localctx = new Fnp_parameter_type_11Context(this, this._ctx, this.state);
    this.enterRule(localctx, 124, SRParser.RULE_fnp_parameter_type_11);
    try {
        this.state = 639;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.TK_COMA:
            this.enterOuterAlt(localctx, 1);
            this.state = 636;
            this.match(SRParser.TK_COMA);
            this.state = 637;
            this.fnp_parameter_type_1();
            break;
        case SRParser.TK_PAR_DER:
            this.enterOuterAlt(localctx, 2);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Primitive_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_primitive_function;
    return this;
}

Primitive_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Primitive_functionContext.prototype.constructor = Primitive_functionContext;

Primitive_functionContext.prototype.function_one_parameter = function() {
    return this.getTypedRuleContext(Function_one_parameterContext,0);
};

Primitive_functionContext.prototype.function_two_parameter = function() {
    return this.getTypedRuleContext(Function_two_parameterContext,0);
};

Primitive_functionContext.prototype.function_n_parameters = function() {
    return this.getTypedRuleContext(Function_n_parametersContext,0);
};

Primitive_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterPrimitive_function(this);
	}
};

Primitive_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitPrimitive_function(this);
	}
};




SRParser.Primitive_functionContext = Primitive_functionContext;

SRParser.prototype.primitive_function = function() {

    var localctx = new Primitive_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, SRParser.RULE_primitive_function);
    try {
        this.state = 644;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.MAXLENGTH:
        case SRParser.LENGTH:
        case SRParser.NEW:
        case SRParser.HIGH:
        case SRParser.PRED:
        case SRParser.LOW:
        case SRParser.ABS:
        case SRParser.SUCC:
            this.enterOuterAlt(localctx, 1);
            this.state = 641;
            this.function_one_parameter();
            break;
        case SRParser.LB:
        case SRParser.UB:
            this.enterOuterAlt(localctx, 2);
            this.state = 642;
            this.function_two_parameter();
            break;
        case SRParser.WRITE:
        case SRParser.PUT:
            this.enterOuterAlt(localctx, 3);
            this.state = 643;
            this.function_n_parameters();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_one_parameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_function_one_parameter;
    return this;
}

Function_one_parameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_one_parameterContext.prototype.constructor = Function_one_parameterContext;

Function_one_parameterContext.prototype.f1p_reserved_word_type1 = function() {
    return this.getTypedRuleContext(F1p_reserved_word_type1Context,0);
};

Function_one_parameterContext.prototype.TK_PAR_IZQ = function() {
    return this.getToken(SRParser.TK_PAR_IZQ, 0);
};

Function_one_parameterContext.prototype.f1p_parameter = function() {
    return this.getTypedRuleContext(F1p_parameterContext,0);
};

Function_one_parameterContext.prototype.TK_PAR_DER = function() {
    return this.getToken(SRParser.TK_PAR_DER, 0);
};

Function_one_parameterContext.prototype.semicolon_or_not = function() {
    return this.getTypedRuleContext(Semicolon_or_notContext,0);
};

Function_one_parameterContext.prototype.f1p_reserved_word_type2 = function() {
    return this.getTypedRuleContext(F1p_reserved_word_type2Context,0);
};

Function_one_parameterContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Function_one_parameterContext.prototype.f1p_reserved_word_type3 = function() {
    return this.getTypedRuleContext(F1p_reserved_word_type3Context,0);
};

Function_one_parameterContext.prototype.ID = function() {
    return this.getToken(SRParser.ID, 0);
};

Function_one_parameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterFunction_one_parameter(this);
	}
};

Function_one_parameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitFunction_one_parameter(this);
	}
};




SRParser.Function_one_parameterContext = Function_one_parameterContext;

SRParser.prototype.function_one_parameter = function() {

    var localctx = new Function_one_parameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, SRParser.RULE_function_one_parameter);
    try {
        this.state = 664;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.PRED:
        case SRParser.ABS:
        case SRParser.SUCC:
            this.enterOuterAlt(localctx, 1);
            this.state = 646;
            this.f1p_reserved_word_type1();
            this.state = 647;
            this.match(SRParser.TK_PAR_IZQ);
            this.state = 648;
            this.f1p_parameter();
            this.state = 649;
            this.match(SRParser.TK_PAR_DER);
            this.state = 650;
            this.semicolon_or_not();
            break;
        case SRParser.NEW:
        case SRParser.HIGH:
        case SRParser.LOW:
            this.enterOuterAlt(localctx, 2);
            this.state = 652;
            this.f1p_reserved_word_type2();
            this.state = 653;
            this.match(SRParser.TK_PAR_IZQ);
            this.state = 654;
            this.var_type();
            this.state = 655;
            this.match(SRParser.TK_PAR_DER);
            this.state = 656;
            this.semicolon_or_not();
            break;
        case SRParser.MAXLENGTH:
        case SRParser.LENGTH:
            this.enterOuterAlt(localctx, 3);
            this.state = 658;
            this.f1p_reserved_word_type3();
            this.state = 659;
            this.match(SRParser.TK_PAR_IZQ);
            this.state = 660;
            this.match(SRParser.ID);
            this.state = 661;
            this.match(SRParser.TK_PAR_DER);
            this.state = 662;
            this.semicolon_or_not();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_two_parameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_function_two_parameter;
    return this;
}

Function_two_parameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_two_parameterContext.prototype.constructor = Function_two_parameterContext;

Function_two_parameterContext.prototype.f2p_reserved_word = function() {
    return this.getTypedRuleContext(F2p_reserved_wordContext,0);
};

Function_two_parameterContext.prototype.TK_PAR_IZQ = function() {
    return this.getToken(SRParser.TK_PAR_IZQ, 0);
};

Function_two_parameterContext.prototype.ID = function() {
    return this.getToken(SRParser.ID, 0);
};

Function_two_parameterContext.prototype.f2p_parameter = function() {
    return this.getTypedRuleContext(F2p_parameterContext,0);
};

Function_two_parameterContext.prototype.TK_PAR_DER = function() {
    return this.getToken(SRParser.TK_PAR_DER, 0);
};

Function_two_parameterContext.prototype.semicolon_or_not = function() {
    return this.getTypedRuleContext(Semicolon_or_notContext,0);
};

Function_two_parameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterFunction_two_parameter(this);
	}
};

Function_two_parameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitFunction_two_parameter(this);
	}
};




SRParser.Function_two_parameterContext = Function_two_parameterContext;

SRParser.prototype.function_two_parameter = function() {

    var localctx = new Function_two_parameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, SRParser.RULE_function_two_parameter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 666;
        this.f2p_reserved_word();
        this.state = 667;
        this.match(SRParser.TK_PAR_IZQ);
        this.state = 668;
        this.match(SRParser.ID);
        this.state = 669;
        this.f2p_parameter();
        this.state = 670;
        this.match(SRParser.TK_PAR_DER);
        this.state = 671;
        this.semicolon_or_not();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_n_parametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_function_n_parameters;
    return this;
}

Function_n_parametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_n_parametersContext.prototype.constructor = Function_n_parametersContext;

Function_n_parametersContext.prototype.fnp_reserved_word_type_1 = function() {
    return this.getTypedRuleContext(Fnp_reserved_word_type_1Context,0);
};

Function_n_parametersContext.prototype.TK_PAR_IZQ = function() {
    return this.getToken(SRParser.TK_PAR_IZQ, 0);
};

Function_n_parametersContext.prototype.fnp_parameter_type_1 = function() {
    return this.getTypedRuleContext(Fnp_parameter_type_1Context,0);
};

Function_n_parametersContext.prototype.TK_PAR_DER = function() {
    return this.getToken(SRParser.TK_PAR_DER, 0);
};

Function_n_parametersContext.prototype.semicolon_or_not = function() {
    return this.getTypedRuleContext(Semicolon_or_notContext,0);
};

Function_n_parametersContext.prototype.fnp_reserved_word_type_2 = function() {
    return this.getTypedRuleContext(Fnp_reserved_word_type_2Context,0);
};

Function_n_parametersContext.prototype.fnp_parameter_type_2 = function() {
    return this.getTypedRuleContext(Fnp_parameter_type_2Context,0);
};

Function_n_parametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterFunction_n_parameters(this);
	}
};

Function_n_parametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitFunction_n_parameters(this);
	}
};




SRParser.Function_n_parametersContext = Function_n_parametersContext;

SRParser.prototype.function_n_parameters = function() {

    var localctx = new Function_n_parametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, SRParser.RULE_function_n_parameters);
    try {
        this.state = 685;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.WRITE:
            this.enterOuterAlt(localctx, 1);
            this.state = 673;
            this.fnp_reserved_word_type_1();
            this.state = 674;
            this.match(SRParser.TK_PAR_IZQ);
            this.state = 675;
            this.fnp_parameter_type_1();
            this.state = 676;
            this.match(SRParser.TK_PAR_DER);
            this.state = 677;
            this.semicolon_or_not();
            break;
        case SRParser.PUT:
            this.enterOuterAlt(localctx, 2);
            this.state = 679;
            this.fnp_reserved_word_type_2();
            this.state = 680;
            this.match(SRParser.TK_PAR_IZQ);
            this.state = 681;
            this.fnp_parameter_type_2();
            this.state = 682;
            this.match(SRParser.TK_PAR_DER);
            this.state = 683;
            this.semicolon_or_not();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function F1p_reserved_word_type1Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_f1p_reserved_word_type1;
    return this;
}

F1p_reserved_word_type1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
F1p_reserved_word_type1Context.prototype.constructor = F1p_reserved_word_type1Context;

F1p_reserved_word_type1Context.prototype.ABS = function() {
    return this.getToken(SRParser.ABS, 0);
};

F1p_reserved_word_type1Context.prototype.PRED = function() {
    return this.getToken(SRParser.PRED, 0);
};

F1p_reserved_word_type1Context.prototype.SUCC = function() {
    return this.getToken(SRParser.SUCC, 0);
};

F1p_reserved_word_type1Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterF1p_reserved_word_type1(this);
	}
};

F1p_reserved_word_type1Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitF1p_reserved_word_type1(this);
	}
};




SRParser.F1p_reserved_word_type1Context = F1p_reserved_word_type1Context;

SRParser.prototype.f1p_reserved_word_type1 = function() {

    var localctx = new F1p_reserved_word_type1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 134, SRParser.RULE_f1p_reserved_word_type1);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 687;
        _la = this._input.LA(1);
        if(!(((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (SRParser.PRED - 48)) | (1 << (SRParser.ABS - 48)) | (1 << (SRParser.SUCC - 48)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function F1p_reserved_word_type2Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_f1p_reserved_word_type2;
    return this;
}

F1p_reserved_word_type2Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
F1p_reserved_word_type2Context.prototype.constructor = F1p_reserved_word_type2Context;

F1p_reserved_word_type2Context.prototype.LOW = function() {
    return this.getToken(SRParser.LOW, 0);
};

F1p_reserved_word_type2Context.prototype.HIGH = function() {
    return this.getToken(SRParser.HIGH, 0);
};

F1p_reserved_word_type2Context.prototype.NEW = function() {
    return this.getToken(SRParser.NEW, 0);
};

F1p_reserved_word_type2Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterF1p_reserved_word_type2(this);
	}
};

F1p_reserved_word_type2Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitF1p_reserved_word_type2(this);
	}
};




SRParser.F1p_reserved_word_type2Context = F1p_reserved_word_type2Context;

SRParser.prototype.f1p_reserved_word_type2 = function() {

    var localctx = new F1p_reserved_word_type2Context(this, this._ctx, this.state);
    this.enterRule(localctx, 136, SRParser.RULE_f1p_reserved_word_type2);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 689;
        _la = this._input.LA(1);
        if(!(((((_la - 23)) & ~0x1f) == 0 && ((1 << (_la - 23)) & ((1 << (SRParser.NEW - 23)) | (1 << (SRParser.HIGH - 23)) | (1 << (SRParser.LOW - 23)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function F1p_reserved_word_type3Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_f1p_reserved_word_type3;
    return this;
}

F1p_reserved_word_type3Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
F1p_reserved_word_type3Context.prototype.constructor = F1p_reserved_word_type3Context;

F1p_reserved_word_type3Context.prototype.LENGTH = function() {
    return this.getToken(SRParser.LENGTH, 0);
};

F1p_reserved_word_type3Context.prototype.MAXLENGTH = function() {
    return this.getToken(SRParser.MAXLENGTH, 0);
};

F1p_reserved_word_type3Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterF1p_reserved_word_type3(this);
	}
};

F1p_reserved_word_type3Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitF1p_reserved_word_type3(this);
	}
};




SRParser.F1p_reserved_word_type3Context = F1p_reserved_word_type3Context;

SRParser.prototype.f1p_reserved_word_type3 = function() {

    var localctx = new F1p_reserved_word_type3Context(this, this._ctx, this.state);
    this.enterRule(localctx, 138, SRParser.RULE_f1p_reserved_word_type3);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 691;
        _la = this._input.LA(1);
        if(!(_la===SRParser.MAXLENGTH || _la===SRParser.LENGTH)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function F1p_parameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_f1p_parameter;
    return this;
}

F1p_parameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
F1p_parameterContext.prototype.constructor = F1p_parameterContext;

F1p_parameterContext.prototype.variable_instance = function() {
    return this.getTypedRuleContext(Variable_instanceContext,0);
};

F1p_parameterContext.prototype.TK_NUM = function() {
    return this.getToken(SRParser.TK_NUM, 0);
};

F1p_parameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterF1p_parameter(this);
	}
};

F1p_parameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitF1p_parameter(this);
	}
};




SRParser.F1p_parameterContext = F1p_parameterContext;

SRParser.prototype.f1p_parameter = function() {

    var localctx = new F1p_parameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, SRParser.RULE_f1p_parameter);
    try {
        this.state = 695;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 693;
            this.variable_instance();
            break;
        case SRParser.TK_NUM:
            this.enterOuterAlt(localctx, 2);
            this.state = 694;
            this.match(SRParser.TK_NUM);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function F2p_reserved_wordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_f2p_reserved_word;
    return this;
}

F2p_reserved_wordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
F2p_reserved_wordContext.prototype.constructor = F2p_reserved_wordContext;

F2p_reserved_wordContext.prototype.UB = function() {
    return this.getToken(SRParser.UB, 0);
};

F2p_reserved_wordContext.prototype.LB = function() {
    return this.getToken(SRParser.LB, 0);
};

F2p_reserved_wordContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterF2p_reserved_word(this);
	}
};

F2p_reserved_wordContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitF2p_reserved_word(this);
	}
};




SRParser.F2p_reserved_wordContext = F2p_reserved_wordContext;

SRParser.prototype.f2p_reserved_word = function() {

    var localctx = new F2p_reserved_wordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, SRParser.RULE_f2p_reserved_word);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 697;
        _la = this._input.LA(1);
        if(!(_la===SRParser.LB || _la===SRParser.UB)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Fnp_reserved_word_type_1Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_fnp_reserved_word_type_1;
    return this;
}

Fnp_reserved_word_type_1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fnp_reserved_word_type_1Context.prototype.constructor = Fnp_reserved_word_type_1Context;

Fnp_reserved_word_type_1Context.prototype.WRITE = function() {
    return this.getToken(SRParser.WRITE, 0);
};

Fnp_reserved_word_type_1Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterFnp_reserved_word_type_1(this);
	}
};

Fnp_reserved_word_type_1Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitFnp_reserved_word_type_1(this);
	}
};




SRParser.Fnp_reserved_word_type_1Context = Fnp_reserved_word_type_1Context;

SRParser.prototype.fnp_reserved_word_type_1 = function() {

    var localctx = new Fnp_reserved_word_type_1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 144, SRParser.RULE_fnp_reserved_word_type_1);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 699;
        this.match(SRParser.WRITE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Fnp_reserved_word_type_2Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_fnp_reserved_word_type_2;
    return this;
}

Fnp_reserved_word_type_2Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fnp_reserved_word_type_2Context.prototype.constructor = Fnp_reserved_word_type_2Context;

Fnp_reserved_word_type_2Context.prototype.PUT = function() {
    return this.getToken(SRParser.PUT, 0);
};

Fnp_reserved_word_type_2Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterFnp_reserved_word_type_2(this);
	}
};

Fnp_reserved_word_type_2Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitFnp_reserved_word_type_2(this);
	}
};




SRParser.Fnp_reserved_word_type_2Context = Fnp_reserved_word_type_2Context;

SRParser.prototype.fnp_reserved_word_type_2 = function() {

    var localctx = new Fnp_reserved_word_type_2Context(this, this._ctx, this.state);
    this.enterRule(localctx, 146, SRParser.RULE_fnp_reserved_word_type_2);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 701;
        this.match(SRParser.PUT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function F2p_parameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_f2p_parameter;
    return this;
}

F2p_parameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
F2p_parameterContext.prototype.constructor = F2p_parameterContext;

F2p_parameterContext.prototype.TK_COMA = function() {
    return this.getToken(SRParser.TK_COMA, 0);
};

F2p_parameterContext.prototype.TK_NUM = function() {
    return this.getToken(SRParser.TK_NUM, 0);
};

F2p_parameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterF2p_parameter(this);
	}
};

F2p_parameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitF2p_parameter(this);
	}
};




SRParser.F2p_parameterContext = F2p_parameterContext;

SRParser.prototype.f2p_parameter = function() {

    var localctx = new F2p_parameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, SRParser.RULE_f2p_parameter);
    try {
        this.state = 706;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.TK_COMA:
            this.enterOuterAlt(localctx, 1);
            this.state = 703;
            this.match(SRParser.TK_COMA);
            this.state = 704;
            this.match(SRParser.TK_NUM);
            break;
        case SRParser.TK_PAR_DER:
            this.enterOuterAlt(localctx, 2);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Fnp_parameter_type_2Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_fnp_parameter_type_2;
    return this;
}

Fnp_parameter_type_2Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fnp_parameter_type_2Context.prototype.constructor = Fnp_parameter_type_2Context;

Fnp_parameter_type_2Context.prototype.strings = function() {
    return this.getTypedRuleContext(StringsContext,0);
};

Fnp_parameter_type_2Context.prototype.parameter_call_function = function() {
    return this.getTypedRuleContext(Parameter_call_functionContext,0);
};

Fnp_parameter_type_2Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterFnp_parameter_type_2(this);
	}
};

Fnp_parameter_type_2Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitFnp_parameter_type_2(this);
	}
};




SRParser.Fnp_parameter_type_2Context = Fnp_parameter_type_2Context;

SRParser.prototype.fnp_parameter_type_2 = function() {

    var localctx = new Fnp_parameter_type_2Context(this, this._ctx, this.state);
    this.enterRule(localctx, 150, SRParser.RULE_fnp_parameter_type_2);
    try {
        this.state = 710;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.TK_CADENA:
            this.enterOuterAlt(localctx, 1);
            this.state = 708;
            this.strings();
            break;
        case SRParser.ID:
        case SRParser.TK_PAR_DER:
            this.enterOuterAlt(localctx, 2);
            this.state = 709;
            this.parameter_call_function();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StringsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_strings;
    return this;
}

StringsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringsContext.prototype.constructor = StringsContext;

StringsContext.prototype.TK_CADENA = function() {
    return this.getToken(SRParser.TK_CADENA, 0);
};

StringsContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

StringsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterStrings(this);
	}
};

StringsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitStrings(this);
	}
};




SRParser.StringsContext = StringsContext;

SRParser.prototype.strings = function() {

    var localctx = new StringsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, SRParser.RULE_strings);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 712;
        this.match(SRParser.TK_CADENA);
        this.state = 713;
        this.string();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_string;
    return this;
}

StringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringContext.prototype.constructor = StringContext;

StringContext.prototype.TK_COMA = function() {
    return this.getToken(SRParser.TK_COMA, 0);
};

StringContext.prototype.strings = function() {
    return this.getTypedRuleContext(StringsContext,0);
};

StringContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterString(this);
	}
};

StringContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitString(this);
	}
};




SRParser.StringContext = StringContext;

SRParser.prototype.string = function() {

    var localctx = new StringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, SRParser.RULE_string);
    try {
        this.state = 718;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.TK_COMA:
            this.enterOuterAlt(localctx, 1);
            this.state = 715;
            this.match(SRParser.TK_COMA);
            this.state = 716;
            this.strings();
            break;
        case SRParser.TK_PAR_DER:
            this.enterOuterAlt(localctx, 2);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Expression_variableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_expression_variable;
    return this;
}

Expression_variableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_variableContext.prototype.constructor = Expression_variableContext;

Expression_variableContext.prototype.TK_ASIG = function() {
    return this.getToken(SRParser.TK_ASIG, 0);
};

Expression_variableContext.prototype.arithmethic_expression = function() {
    return this.getTypedRuleContext(Arithmethic_expressionContext,0);
};

Expression_variableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterExpression_variable(this);
	}
};

Expression_variableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitExpression_variable(this);
	}
};




SRParser.Expression_variableContext = Expression_variableContext;

SRParser.prototype.expression_variable = function() {

    var localctx = new Expression_variableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, SRParser.RULE_expression_variable);
    try {
        this.state = 723;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.TK_ASIG:
            this.enterOuterAlt(localctx, 1);
            this.state = 720;
            this.match(SRParser.TK_ASIG);
            this.state = 721;
            this.arithmethic_expression();
            break;
        case SRParser.EOF:
            this.enterOuterAlt(localctx, 2);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_statements;
    return this;
}

StatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementsContext.prototype.constructor = StatementsContext;

StatementsContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

StatementsContext.prototype.statements = function() {
    return this.getTypedRuleContext(StatementsContext,0);
};

StatementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterStatements(this);
	}
};

StatementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitStatements(this);
	}
};




SRParser.StatementsContext = StatementsContext;

SRParser.prototype.statements = function() {

    var localctx = new StatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, SRParser.RULE_statements);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 725;
        this.statement();
        this.state = 726;
        this.statements();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.sequential_statement = function() {
    return this.getTypedRuleContext(Sequential_statementContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitStatement(this);
	}
};




SRParser.StatementContext = StatementContext;

SRParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, SRParser.RULE_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 728;
        this.sequential_statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sequential_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_sequential_statement;
    return this;
}

Sequential_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sequential_statementContext.prototype.constructor = Sequential_statementContext;

Sequential_statementContext.prototype.SKIP_RESERVED = function() {
    return this.getToken(SRParser.SKIP_RESERVED, 0);
};

Sequential_statementContext.prototype.EXIT = function() {
    return this.getToken(SRParser.EXIT, 0);
};

Sequential_statementContext.prototype.NEXT = function() {
    return this.getToken(SRParser.NEXT, 0);
};

Sequential_statementContext.prototype.variable_declaration = function() {
    return this.getTypedRuleContext(Variable_declarationContext,0);
};

Sequential_statementContext.prototype.variable_instance = function() {
    return this.getTypedRuleContext(Variable_instanceContext,0);
};

Sequential_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterSequential_statement(this);
	}
};

Sequential_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitSequential_statement(this);
	}
};




SRParser.Sequential_statementContext = Sequential_statementContext;

SRParser.prototype.sequential_statement = function() {

    var localctx = new Sequential_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, SRParser.RULE_sequential_statement);
    try {
        this.state = 735;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.SKIP_RESERVED:
            this.enterOuterAlt(localctx, 1);
            this.state = 730;
            this.match(SRParser.SKIP_RESERVED);
            break;
        case SRParser.EXIT:
            this.enterOuterAlt(localctx, 2);
            this.state = 731;
            this.match(SRParser.EXIT);
            break;
        case SRParser.NEXT:
            this.enterOuterAlt(localctx, 3);
            this.state = 732;
            this.match(SRParser.NEXT);
            break;
        case SRParser.VAR:
            this.enterOuterAlt(localctx, 4);
            this.state = 733;
            this.variable_declaration();
            break;
        case SRParser.ID:
            this.enterOuterAlt(localctx, 5);
            this.state = 734;
            this.variable_instance();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Boolean_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_boolean_expression;
    return this;
}

Boolean_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Boolean_expressionContext.prototype.constructor = Boolean_expressionContext;

Boolean_expressionContext.prototype.TK_PAR_IZQ = function() {
    return this.getToken(SRParser.TK_PAR_IZQ, 0);
};

Boolean_expressionContext.prototype.term = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TermContext);
    } else {
        return this.getTypedRuleContext(TermContext,i);
    }
};

Boolean_expressionContext.prototype.op_binario_boolean = function() {
    return this.getTypedRuleContext(Op_binario_booleanContext,0);
};

Boolean_expressionContext.prototype.boolean_expression1 = function() {
    return this.getTypedRuleContext(Boolean_expression1Context,0);
};

Boolean_expressionContext.prototype.boolean_expression11 = function() {
    return this.getTypedRuleContext(Boolean_expression11Context,0);
};

Boolean_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterBoolean_expression(this);
	}
};

Boolean_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitBoolean_expression(this);
	}
};




SRParser.Boolean_expressionContext = Boolean_expressionContext;

SRParser.prototype.boolean_expression = function() {

    var localctx = new Boolean_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, SRParser.RULE_boolean_expression);
    try {
        this.state = 748;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.TK_PAR_IZQ:
            this.enterOuterAlt(localctx, 1);
            this.state = 737;
            this.match(SRParser.TK_PAR_IZQ);
            this.state = 738;
            this.term();
            this.state = 739;
            this.op_binario_boolean();
            this.state = 740;
            this.term();
            this.state = 741;
            this.boolean_expression1();
            break;
        case SRParser.ID:
        case SRParser.TK_DISTINTO:
        case SRParser.TK_IGUAL:
        case SRParser.TK_MENORQUE:
        case SRParser.TK_MAYORQUE:
        case SRParser.TK_NUM:
            this.enterOuterAlt(localctx, 2);
            this.state = 743;
            this.term();
            this.state = 744;
            this.op_binario_boolean();
            this.state = 745;
            this.term();
            this.state = 746;
            this.boolean_expression11();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Boolean_expression1Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_boolean_expression1;
    return this;
}

Boolean_expression1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Boolean_expression1Context.prototype.constructor = Boolean_expression1Context;

Boolean_expression1Context.prototype.op_binario_boolean = function() {
    return this.getTypedRuleContext(Op_binario_booleanContext,0);
};

Boolean_expression1Context.prototype.term = function() {
    return this.getTypedRuleContext(TermContext,0);
};

Boolean_expression1Context.prototype.TK_PAR_DER = function() {
    return this.getToken(SRParser.TK_PAR_DER, 0);
};

Boolean_expression1Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterBoolean_expression1(this);
	}
};

Boolean_expression1Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitBoolean_expression1(this);
	}
};




SRParser.Boolean_expression1Context = Boolean_expression1Context;

SRParser.prototype.boolean_expression1 = function() {

    var localctx = new Boolean_expression1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 166, SRParser.RULE_boolean_expression1);
    try {
        this.state = 755;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.TK_DISTINTO:
        case SRParser.TK_IGUAL:
        case SRParser.TK_MENORQUE:
        case SRParser.TK_MAYORQUE:
            this.enterOuterAlt(localctx, 1);
            this.state = 750;
            this.op_binario_boolean();
            this.state = 751;
            this.term();
            this.state = 752;
            this.match(SRParser.TK_PAR_DER);
            break;
        case SRParser.TK_PAR_DER:
            this.enterOuterAlt(localctx, 2);
            this.state = 754;
            this.match(SRParser.TK_PAR_DER);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Boolean_expression11Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_boolean_expression11;
    return this;
}

Boolean_expression11Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Boolean_expression11Context.prototype.constructor = Boolean_expression11Context;

Boolean_expression11Context.prototype.op_binario_boolean = function() {
    return this.getTypedRuleContext(Op_binario_booleanContext,0);
};

Boolean_expression11Context.prototype.term = function() {
    return this.getTypedRuleContext(TermContext,0);
};

Boolean_expression11Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterBoolean_expression11(this);
	}
};

Boolean_expression11Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitBoolean_expression11(this);
	}
};




SRParser.Boolean_expression11Context = Boolean_expression11Context;

SRParser.prototype.boolean_expression11 = function() {

    var localctx = new Boolean_expression11Context(this, this._ctx, this.state);
    this.enterRule(localctx, 168, SRParser.RULE_boolean_expression11);
    try {
        this.state = 761;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.TK_DISTINTO:
        case SRParser.TK_IGUAL:
        case SRParser.TK_MENORQUE:
        case SRParser.TK_MAYORQUE:
            this.enterOuterAlt(localctx, 1);
            this.state = 757;
            this.op_binario_boolean();
            this.state = 758;
            this.term();
            break;
        case SRParser.EOF:
        case SRParser.TK_EJECUTA:
            this.enterOuterAlt(localctx, 2);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Variable_instanceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_variable_instance;
    return this;
}

Variable_instanceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_instanceContext.prototype.constructor = Variable_instanceContext;

Variable_instanceContext.prototype.ID = function() {
    return this.getToken(SRParser.ID, 0);
};

Variable_instanceContext.prototype.variable_instance1 = function() {
    return this.getTypedRuleContext(Variable_instance1Context,0);
};

Variable_instanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterVariable_instance(this);
	}
};

Variable_instanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitVariable_instance(this);
	}
};




SRParser.Variable_instanceContext = Variable_instanceContext;

SRParser.prototype.variable_instance = function() {

    var localctx = new Variable_instanceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, SRParser.RULE_variable_instance);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 763;
        this.match(SRParser.ID);
        this.state = 764;
        this.variable_instance1();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Variable_instance1Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_variable_instance1;
    return this;
}

Variable_instance1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_instance1Context.prototype.constructor = Variable_instance1Context;

Variable_instance1Context.prototype.TK_PUNTO = function() {
    return this.getToken(SRParser.TK_PUNTO, 0);
};

Variable_instance1Context.prototype.ID = function() {
    return this.getToken(SRParser.ID, 0);
};

Variable_instance1Context.prototype.TK_MENOS_MENOS = function() {
    return this.getToken(SRParser.TK_MENOS_MENOS, 0);
};

Variable_instance1Context.prototype.TK_SUMA_SUMA = function() {
    return this.getToken(SRParser.TK_SUMA_SUMA, 0);
};

Variable_instance1Context.prototype.TK_COMA = function() {
    return this.getToken(SRParser.TK_COMA, 0);
};

Variable_instance1Context.prototype.ids_group = function() {
    return this.getTypedRuleContext(Ids_groupContext,0);
};

Variable_instance1Context.prototype.op_binario = function() {
    return this.getTypedRuleContext(Op_binarioContext,0);
};

Variable_instance1Context.prototype.variable_instance11 = function() {
    return this.getTypedRuleContext(Variable_instance11Context,0);
};

Variable_instance1Context.prototype.array_declarations = function() {
    return this.getTypedRuleContext(Array_declarationsContext,0);
};

Variable_instance1Context.prototype.TK_ASIG = function() {
    return this.getToken(SRParser.TK_ASIG, 0);
};

Variable_instance1Context.prototype.TK_SWAP = function() {
    return this.getToken(SRParser.TK_SWAP, 0);
};

Variable_instance1Context.prototype.call_function = function() {
    return this.getTypedRuleContext(Call_functionContext,0);
};

Variable_instance1Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterVariable_instance1(this);
	}
};

Variable_instance1Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitVariable_instance1(this);
	}
};




SRParser.Variable_instance1Context = Variable_instance1Context;

SRParser.prototype.variable_instance1 = function() {

    var localctx = new Variable_instance1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 172, SRParser.RULE_variable_instance1);
    try {
        this.state = 785;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 766;
            this.match(SRParser.TK_PUNTO);
            this.state = 767;
            this.match(SRParser.ID);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 768;
            this.match(SRParser.TK_MENOS_MENOS);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 769;
            this.match(SRParser.TK_SUMA_SUMA);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 770;
            this.match(SRParser.TK_COMA);
            this.state = 771;
            this.ids_group();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 772;
            this.op_binario();
            this.state = 773;
            this.variable_instance11();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 775;
            this.array_declarations();
            this.state = 776;
            this.match(SRParser.TK_ASIG);
            this.state = 777;
            this.variable_instance11();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 779;
            this.match(SRParser.TK_ASIG);
            this.state = 780;
            this.variable_instance11();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 781;
            this.match(SRParser.TK_SWAP);
            this.state = 782;
            this.variable_instance11();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 783;
            this.call_function();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Variable_instance11Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_variable_instance11;
    return this;
}

Variable_instance11Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_instance11Context.prototype.constructor = Variable_instance11Context;

Variable_instance11Context.prototype.arithmethic_expression = function() {
    return this.getTypedRuleContext(Arithmethic_expressionContext,0);
};

Variable_instance11Context.prototype.arithmethic_expressions = function() {
    return this.getTypedRuleContext(Arithmethic_expressionsContext,0);
};

Variable_instance11Context.prototype.semicolon_or_not = function() {
    return this.getTypedRuleContext(Semicolon_or_notContext,0);
};

Variable_instance11Context.prototype.call_function = function() {
    return this.getTypedRuleContext(Call_functionContext,0);
};

Variable_instance11Context.prototype.CREATE = function() {
    return this.getToken(SRParser.CREATE, 0);
};

Variable_instance11Context.prototype.ID = function() {
    return this.getToken(SRParser.ID, 0);
};

Variable_instance11Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterVariable_instance11(this);
	}
};

Variable_instance11Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitVariable_instance11(this);
	}
};




SRParser.Variable_instance11Context = Variable_instance11Context;

SRParser.prototype.variable_instance11 = function() {

    var localctx = new Variable_instance11Context(this, this._ctx, this.state);
    this.enterRule(localctx, 174, SRParser.RULE_variable_instance11);
    try {
        this.state = 795;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 787;
            this.arithmethic_expression();
            this.state = 788;
            this.arithmethic_expressions();
            this.state = 789;
            this.semicolon_or_not();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 791;
            this.call_function();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 792;
            this.match(SRParser.CREATE);
            this.state = 793;
            this.match(SRParser.ID);
            this.state = 794;
            this.call_function();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Array_declarationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_array_declarations;
    return this;
}

Array_declarationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Array_declarationsContext.prototype.constructor = Array_declarationsContext;

Array_declarationsContext.prototype.array = function() {
    return this.getTypedRuleContext(ArrayContext,0);
};

Array_declarationsContext.prototype.array_declaration = function() {
    return this.getTypedRuleContext(Array_declarationContext,0);
};

Array_declarationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterArray_declarations(this);
	}
};

Array_declarationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitArray_declarations(this);
	}
};




SRParser.Array_declarationsContext = Array_declarationsContext;

SRParser.prototype.array_declarations = function() {

    var localctx = new Array_declarationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, SRParser.RULE_array_declarations);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 797;
        this.array();
        this.state = 798;
        this.array_declaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Array_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_array_declaration;
    return this;
}

Array_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Array_declarationContext.prototype.constructor = Array_declarationContext;

Array_declarationContext.prototype.TK_COMA = function() {
    return this.getToken(SRParser.TK_COMA, 0);
};

Array_declarationContext.prototype.array_declarations = function() {
    return this.getTypedRuleContext(Array_declarationsContext,0);
};

Array_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterArray_declaration(this);
	}
};

Array_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitArray_declaration(this);
	}
};




SRParser.Array_declarationContext = Array_declarationContext;

SRParser.prototype.array_declaration = function() {

    var localctx = new Array_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, SRParser.RULE_array_declaration);
    try {
        this.state = 803;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.TK_COMA:
            this.enterOuterAlt(localctx, 1);
            this.state = 800;
            this.match(SRParser.TK_COMA);
            this.state = 801;
            this.array_declarations();
            break;
        case SRParser.TK_ASIG:
            this.enterOuterAlt(localctx, 2);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Variable_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_variable_declaration;
    return this;
}

Variable_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_declarationContext.prototype.constructor = Variable_declarationContext;

Variable_declarationContext.prototype.VAR = function() {
    return this.getToken(SRParser.VAR, 0);
};

Variable_declarationContext.prototype.ID = function() {
    return this.getToken(SRParser.ID, 0);
};

Variable_declarationContext.prototype.variable_declaration1 = function() {
    return this.getTypedRuleContext(Variable_declaration1Context,0);
};

Variable_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterVariable_declaration(this);
	}
};

Variable_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitVariable_declaration(this);
	}
};




SRParser.Variable_declarationContext = Variable_declarationContext;

SRParser.prototype.variable_declaration = function() {

    var localctx = new Variable_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, SRParser.RULE_variable_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 805;
        this.match(SRParser.VAR);
        this.state = 806;
        this.match(SRParser.ID);
        this.state = 807;
        this.variable_declaration1();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Variable_declaration1Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_variable_declaration1;
    return this;
}

Variable_declaration1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_declaration1Context.prototype.constructor = Variable_declaration1Context;

Variable_declaration1Context.prototype.TK_DOS_PUNTOS = function() {
    return this.getToken(SRParser.TK_DOS_PUNTOS, 0);
};

Variable_declaration1Context.prototype.variable_declaration111 = function() {
    return this.getTypedRuleContext(Variable_declaration111Context,0);
};

Variable_declaration1Context.prototype.ids_group1 = function() {
    return this.getTypedRuleContext(Ids_group1Context,0);
};

Variable_declaration1Context.prototype.variable_declaration11 = function() {
    return this.getTypedRuleContext(Variable_declaration11Context,0);
};

Variable_declaration1Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterVariable_declaration1(this);
	}
};

Variable_declaration1Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitVariable_declaration1(this);
	}
};




SRParser.Variable_declaration1Context = Variable_declaration1Context;

SRParser.prototype.variable_declaration1 = function() {

    var localctx = new Variable_declaration1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 182, SRParser.RULE_variable_declaration1);
    try {
        this.state = 814;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 809;
            this.match(SRParser.TK_DOS_PUNTOS);
            this.state = 810;
            this.variable_declaration111();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 811;
            this.ids_group1();
            this.state = 812;
            this.variable_declaration11();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Variable_declaration111Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_variable_declaration111;
    return this;
}

Variable_declaration111Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_declaration111Context.prototype.constructor = Variable_declaration111Context;

Variable_declaration111Context.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Variable_declaration111Context.prototype.ids_type_group1 = function() {
    return this.getTypedRuleContext(Ids_type_group1Context,0);
};

Variable_declaration111Context.prototype.parameter_call_function = function() {
    return this.getTypedRuleContext(Parameter_call_functionContext,0);
};

Variable_declaration111Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterVariable_declaration111(this);
	}
};

Variable_declaration111Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitVariable_declaration111(this);
	}
};




SRParser.Variable_declaration111Context = Variable_declaration111Context;

SRParser.prototype.variable_declaration111 = function() {

    var localctx = new Variable_declaration111Context(this, this._ctx, this.state);
    this.enterRule(localctx, 184, SRParser.RULE_variable_declaration111);
    try {
        this.state = 820;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.DOUBLE:
        case SRParser.REAL:
        case SRParser.CHAR:
        case SRParser.INT:
        case SRParser.CAP:
            this.enterOuterAlt(localctx, 1);
            this.state = 816;
            this.var_type();
            this.state = 817;
            this.ids_type_group1();
            break;
        case SRParser.EOF:
        case SRParser.GLOBAL:
        case SRParser.BODY:
        case SRParser.CONST:
        case SRParser.DO:
        case SRParser.OD:
        case SRParser.FS:
        case SRParser.AF:
        case SRParser.SKIP_RESERVED:
        case SRParser.EXIT:
        case SRParser.MAXLENGTH:
        case SRParser.LENGTH:
        case SRParser.EXTEND:
        case SRParser.IMPORT:
        case SRParser.NEW:
        case SRParser.PROCESS:
        case SRParser.FINAL:
        case SRParser.NEXT:
        case SRParser.PROC:
        case SRParser.SPEC:
        case SRParser.INITIAL:
        case SRParser.RESOURCE:
        case SRParser.HIGH:
        case SRParser.WRITE:
        case SRParser.PRED:
        case SRParser.LOW:
        case SRParser.END:
        case SRParser.ABS:
        case SRParser.VAR:
        case SRParser.OPTYPE:
        case SRParser.OP:
        case SRParser.FA:
        case SRParser.FI:
        case SRParser.IF:
        case SRParser.LB:
        case SRParser.UB:
        case SRParser.PUT:
        case SRParser.TYPE:
        case SRParser.SUCC:
        case SRParser.ID:
        case SRParser.TK_SEPARA:
            this.enterOuterAlt(localctx, 2);
            this.state = 819;
            this.parameter_call_function();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Variable_declaration11Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_variable_declaration11;
    return this;
}

Variable_declaration11Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_declaration11Context.prototype.constructor = Variable_declaration11Context;

Variable_declaration11Context.prototype.TK_DOS_PUNTOS = function() {
    return this.getToken(SRParser.TK_DOS_PUNTOS, 0);
};

Variable_declaration11Context.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Variable_declaration11Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterVariable_declaration11(this);
	}
};

Variable_declaration11Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitVariable_declaration11(this);
	}
};




SRParser.Variable_declaration11Context = Variable_declaration11Context;

SRParser.prototype.variable_declaration11 = function() {

    var localctx = new Variable_declaration11Context(this, this._ctx, this.state);
    this.enterRule(localctx, 186, SRParser.RULE_variable_declaration11);
    try {
        this.state = 825;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.TK_DOS_PUNTOS:
            this.enterOuterAlt(localctx, 1);
            this.state = 822;
            this.match(SRParser.TK_DOS_PUNTOS);
            this.state = 823;
            this.var_type();
            break;
        case SRParser.EOF:
        case SRParser.GLOBAL:
        case SRParser.BODY:
        case SRParser.CONST:
        case SRParser.DO:
        case SRParser.OD:
        case SRParser.FS:
        case SRParser.AF:
        case SRParser.SKIP_RESERVED:
        case SRParser.EXIT:
        case SRParser.MAXLENGTH:
        case SRParser.LENGTH:
        case SRParser.EXTEND:
        case SRParser.IMPORT:
        case SRParser.NEW:
        case SRParser.PROCESS:
        case SRParser.FINAL:
        case SRParser.NEXT:
        case SRParser.PROC:
        case SRParser.SPEC:
        case SRParser.INITIAL:
        case SRParser.RESOURCE:
        case SRParser.HIGH:
        case SRParser.WRITE:
        case SRParser.PRED:
        case SRParser.LOW:
        case SRParser.END:
        case SRParser.ABS:
        case SRParser.VAR:
        case SRParser.OPTYPE:
        case SRParser.OP:
        case SRParser.FA:
        case SRParser.FI:
        case SRParser.IF:
        case SRParser.LB:
        case SRParser.UB:
        case SRParser.PUT:
        case SRParser.TYPE:
        case SRParser.SUCC:
        case SRParser.ID:
        case SRParser.TK_SEPARA:
            this.enterOuterAlt(localctx, 2);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Arithmethic_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_arithmethic_expression;
    return this;
}

Arithmethic_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Arithmethic_expressionContext.prototype.constructor = Arithmethic_expressionContext;

Arithmethic_expressionContext.prototype.TK_PAR_IZQ = function() {
    return this.getToken(SRParser.TK_PAR_IZQ, 0);
};

Arithmethic_expressionContext.prototype.term = function() {
    return this.getTypedRuleContext(TermContext,0);
};

Arithmethic_expressionContext.prototype.arithmethic_expressions = function() {
    return this.getTypedRuleContext(Arithmethic_expressionsContext,0);
};

Arithmethic_expressionContext.prototype.TK_PAR_DER = function() {
    return this.getToken(SRParser.TK_PAR_DER, 0);
};

Arithmethic_expressionContext.prototype.semicolon_or_not = function() {
    return this.getTypedRuleContext(Semicolon_or_notContext,0);
};

Arithmethic_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterArithmethic_expression(this);
	}
};

Arithmethic_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitArithmethic_expression(this);
	}
};




SRParser.Arithmethic_expressionContext = Arithmethic_expressionContext;

SRParser.prototype.arithmethic_expression = function() {

    var localctx = new Arithmethic_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, SRParser.RULE_arithmethic_expression);
    try {
        this.state = 836;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.TK_PAR_IZQ:
            this.enterOuterAlt(localctx, 1);
            this.state = 827;
            this.match(SRParser.TK_PAR_IZQ);
            this.state = 828;
            this.term();
            this.state = 829;
            this.arithmethic_expressions();
            this.state = 830;
            this.match(SRParser.TK_PAR_DER);
            this.state = 831;
            this.semicolon_or_not();
            break;
        case SRParser.EOF:
        case SRParser.GLOBAL:
        case SRParser.BODY:
        case SRParser.CONST:
        case SRParser.DO:
        case SRParser.OD:
        case SRParser.FS:
        case SRParser.AF:
        case SRParser.SKIP_RESERVED:
        case SRParser.EXIT:
        case SRParser.MAXLENGTH:
        case SRParser.LENGTH:
        case SRParser.EXTEND:
        case SRParser.IMPORT:
        case SRParser.NEW:
        case SRParser.PROCESS:
        case SRParser.FINAL:
        case SRParser.NEXT:
        case SRParser.PROC:
        case SRParser.SPEC:
        case SRParser.INITIAL:
        case SRParser.RESOURCE:
        case SRParser.HIGH:
        case SRParser.WRITE:
        case SRParser.PRED:
        case SRParser.LOW:
        case SRParser.END:
        case SRParser.ABS:
        case SRParser.VAR:
        case SRParser.OPTYPE:
        case SRParser.OP:
        case SRParser.FA:
        case SRParser.FI:
        case SRParser.IF:
        case SRParser.LB:
        case SRParser.UB:
        case SRParser.PUT:
        case SRParser.TYPE:
        case SRParser.SUCC:
        case SRParser.ID:
        case SRParser.TK_SUMA_ASIG:
        case SRParser.TK_MENOS_ASIG:
        case SRParser.TK_MULTI:
        case SRParser.TK_PAR_DER:
        case SRParser.TK_PUNTO_Y_COMA:
        case SRParser.TK_NUM:
        case SRParser.TK_MENOS:
        case SRParser.TK_SEPARA:
        case SRParser.TK_SUMA:
        case SRParser.TK_DIV:
            this.enterOuterAlt(localctx, 2);
            this.state = 833;
            this.term();
            this.state = 834;
            this.arithmethic_expressions();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Arithmethic_expressionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_arithmethic_expressions;
    return this;
}

Arithmethic_expressionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Arithmethic_expressionsContext.prototype.constructor = Arithmethic_expressionsContext;

Arithmethic_expressionsContext.prototype.op_binario = function() {
    return this.getTypedRuleContext(Op_binarioContext,0);
};

Arithmethic_expressionsContext.prototype.arithmethic_expression = function() {
    return this.getTypedRuleContext(Arithmethic_expressionContext,0);
};

Arithmethic_expressionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterArithmethic_expressions(this);
	}
};

Arithmethic_expressionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitArithmethic_expressions(this);
	}
};




SRParser.Arithmethic_expressionsContext = Arithmethic_expressionsContext;

SRParser.prototype.arithmethic_expressions = function() {

    var localctx = new Arithmethic_expressionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, SRParser.RULE_arithmethic_expressions);
    try {
        this.state = 842;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 838;
            this.op_binario();
            this.state = 839;
            this.arithmethic_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_term;
    return this;
}

TermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TermContext.prototype.constructor = TermContext;

TermContext.prototype.parameter_call_function = function() {
    return this.getTypedRuleContext(Parameter_call_functionContext,0);
};

TermContext.prototype.TK_NUM = function() {
    return this.getToken(SRParser.TK_NUM, 0);
};

TermContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterTerm(this);
	}
};

TermContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitTerm(this);
	}
};




SRParser.TermContext = TermContext;

SRParser.prototype.term = function() {

    var localctx = new TermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, SRParser.RULE_term);
    try {
        this.state = 846;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.EOF:
        case SRParser.GLOBAL:
        case SRParser.BODY:
        case SRParser.CONST:
        case SRParser.DO:
        case SRParser.OD:
        case SRParser.FS:
        case SRParser.AF:
        case SRParser.SKIP_RESERVED:
        case SRParser.EXIT:
        case SRParser.MAXLENGTH:
        case SRParser.LENGTH:
        case SRParser.EXTEND:
        case SRParser.IMPORT:
        case SRParser.NEW:
        case SRParser.PROCESS:
        case SRParser.FINAL:
        case SRParser.NEXT:
        case SRParser.PROC:
        case SRParser.SPEC:
        case SRParser.INITIAL:
        case SRParser.RESOURCE:
        case SRParser.HIGH:
        case SRParser.WRITE:
        case SRParser.PRED:
        case SRParser.LOW:
        case SRParser.END:
        case SRParser.ABS:
        case SRParser.VAR:
        case SRParser.TO:
        case SRParser.OPTYPE:
        case SRParser.OP:
        case SRParser.FA:
        case SRParser.FI:
        case SRParser.IF:
        case SRParser.LB:
        case SRParser.UB:
        case SRParser.PUT:
        case SRParser.TYPE:
        case SRParser.SUCC:
        case SRParser.ID:
        case SRParser.TK_SUMA_ASIG:
        case SRParser.TK_MENOS_ASIG:
        case SRParser.TK_COMA:
        case SRParser.TK_DISTINTO:
        case SRParser.TK_EJECUTA:
        case SRParser.TK_IGUAL:
        case SRParser.TK_MENORQUE:
        case SRParser.TK_MAYORQUE:
        case SRParser.TK_MULTI:
        case SRParser.TK_PAR_DER:
        case SRParser.TK_PUNTO_Y_COMA:
        case SRParser.TK_MENOS:
        case SRParser.TK_SEPARA:
        case SRParser.TK_SUMA:
        case SRParser.TK_DIV:
            this.enterOuterAlt(localctx, 1);
            this.state = 844;
            this.parameter_call_function();
            break;
        case SRParser.TK_NUM:
            this.enterOuterAlt(localctx, 2);
            this.state = 845;
            this.match(SRParser.TK_NUM);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Variable_instance2Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_variable_instance2;
    return this;
}

Variable_instance2Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_instance2Context.prototype.constructor = Variable_instance2Context;

Variable_instance2Context.prototype.ID = function() {
    return this.getToken(SRParser.ID, 0);
};

Variable_instance2Context.prototype.variable_instance21 = function() {
    return this.getTypedRuleContext(Variable_instance21Context,0);
};

Variable_instance2Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterVariable_instance2(this);
	}
};

Variable_instance2Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitVariable_instance2(this);
	}
};




SRParser.Variable_instance2Context = Variable_instance2Context;

SRParser.prototype.variable_instance2 = function() {

    var localctx = new Variable_instance2Context(this, this._ctx, this.state);
    this.enterRule(localctx, 194, SRParser.RULE_variable_instance2);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 848;
        this.match(SRParser.ID);
        this.state = 849;
        this.variable_instance21();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Variable_instance21Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_variable_instance21;
    return this;
}

Variable_instance21Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_instance21Context.prototype.constructor = Variable_instance21Context;

Variable_instance21Context.prototype.TK_PUNTO = function() {
    return this.getToken(SRParser.TK_PUNTO, 0);
};

Variable_instance21Context.prototype.ID = function() {
    return this.getToken(SRParser.ID, 0);
};

Variable_instance21Context.prototype.variable_instance2 = function() {
    return this.getTypedRuleContext(Variable_instance2Context,0);
};

Variable_instance21Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterVariable_instance21(this);
	}
};

Variable_instance21Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitVariable_instance21(this);
	}
};




SRParser.Variable_instance21Context = Variable_instance21Context;

SRParser.prototype.variable_instance21 = function() {

    var localctx = new Variable_instance21Context(this, this._ctx, this.state);
    this.enterRule(localctx, 196, SRParser.RULE_variable_instance21);
    try {
        this.state = 855;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.TK_PUNTO:
            this.enterOuterAlt(localctx, 1);
            this.state = 851;
            this.match(SRParser.TK_PUNTO);
            this.state = 852;
            this.match(SRParser.ID);
            this.state = 853;
            this.variable_instance2();
            break;
        case SRParser.TK_ASIG:
            this.enterOuterAlt(localctx, 2);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Op_binarioContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_op_binario;
    return this;
}

Op_binarioContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Op_binarioContext.prototype.constructor = Op_binarioContext;

Op_binarioContext.prototype.TK_SUMA = function() {
    return this.getToken(SRParser.TK_SUMA, 0);
};

Op_binarioContext.prototype.TK_DIV = function() {
    return this.getToken(SRParser.TK_DIV, 0);
};

Op_binarioContext.prototype.TK_MENOS = function() {
    return this.getToken(SRParser.TK_MENOS, 0);
};

Op_binarioContext.prototype.TK_MULTI = function() {
    return this.getToken(SRParser.TK_MULTI, 0);
};

Op_binarioContext.prototype.TK_SUMA_ASIG = function() {
    return this.getToken(SRParser.TK_SUMA_ASIG, 0);
};

Op_binarioContext.prototype.TK_MENOS_ASIG = function() {
    return this.getToken(SRParser.TK_MENOS_ASIG, 0);
};

Op_binarioContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterOp_binario(this);
	}
};

Op_binarioContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitOp_binario(this);
	}
};




SRParser.Op_binarioContext = Op_binarioContext;

SRParser.prototype.op_binario = function() {

    var localctx = new Op_binarioContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, SRParser.RULE_op_binario);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 857;
        _la = this._input.LA(1);
        if(!(((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (SRParser.TK_SUMA_ASIG - 72)) | (1 << (SRParser.TK_MENOS_ASIG - 72)) | (1 << (SRParser.TK_MULTI - 72)) | (1 << (SRParser.TK_MENOS - 72)) | (1 << (SRParser.TK_SUMA - 72)) | (1 << (SRParser.TK_DIV - 72)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Op_binario_booleanContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_op_binario_boolean;
    return this;
}

Op_binario_booleanContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Op_binario_booleanContext.prototype.constructor = Op_binario_booleanContext;

Op_binario_booleanContext.prototype.TK_DISTINTO = function() {
    return this.getToken(SRParser.TK_DISTINTO, 0);
};

Op_binario_booleanContext.prototype.TK_MENORQUE = function() {
    return this.getToken(SRParser.TK_MENORQUE, 0);
};

Op_binario_booleanContext.prototype.TK_MAYORQUE = function() {
    return this.getToken(SRParser.TK_MAYORQUE, 0);
};

Op_binario_booleanContext.prototype.TK_IGUAL = function() {
    return this.getToken(SRParser.TK_IGUAL, 0);
};

Op_binario_booleanContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterOp_binario_boolean(this);
	}
};

Op_binario_booleanContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitOp_binario_boolean(this);
	}
};




SRParser.Op_binario_booleanContext = Op_binario_booleanContext;

SRParser.prototype.op_binario_boolean = function() {

    var localctx = new Op_binario_booleanContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, SRParser.RULE_op_binario_boolean);
    try {
        this.state = 867;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 859;
            this.match(SRParser.TK_DISTINTO);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 860;
            this.match(SRParser.TK_MENORQUE);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 861;
            this.match(SRParser.TK_MAYORQUE);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 862;
            this.match(SRParser.TK_IGUAL);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 863;
            this.match(SRParser.TK_MENORQUE);
            this.state = 864;
            this.match(SRParser.TK_IGUAL);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 865;
            this.match(SRParser.TK_MAYORQUE);
            this.state = 866;
            this.match(SRParser.TK_IGUAL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Call_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_call_function;
    return this;
}

Call_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Call_functionContext.prototype.constructor = Call_functionContext;

Call_functionContext.prototype.TK_PAR_IZQ = function() {
    return this.getToken(SRParser.TK_PAR_IZQ, 0);
};

Call_functionContext.prototype.arithmethic_expression = function() {
    return this.getTypedRuleContext(Arithmethic_expressionContext,0);
};

Call_functionContext.prototype.arithmethic_expressions = function() {
    return this.getTypedRuleContext(Arithmethic_expressionsContext,0);
};

Call_functionContext.prototype.TK_PAR_DER = function() {
    return this.getToken(SRParser.TK_PAR_DER, 0);
};

Call_functionContext.prototype.semicolon_or_not = function() {
    return this.getTypedRuleContext(Semicolon_or_notContext,0);
};

Call_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterCall_function(this);
	}
};

Call_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitCall_function(this);
	}
};




SRParser.Call_functionContext = Call_functionContext;

SRParser.prototype.call_function = function() {

    var localctx = new Call_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, SRParser.RULE_call_function);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 869;
        this.match(SRParser.TK_PAR_IZQ);
        this.state = 870;
        this.arithmethic_expression();
        this.state = 871;
        this.arithmethic_expressions();
        this.state = 872;
        this.match(SRParser.TK_PAR_DER);
        this.state = 873;
        this.semicolon_or_not();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Call_function_in_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_call_function_in_function;
    return this;
}

Call_function_in_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Call_function_in_functionContext.prototype.constructor = Call_function_in_functionContext;

Call_function_in_functionContext.prototype.TK_PAR_IZQ = function() {
    return this.getToken(SRParser.TK_PAR_IZQ, 0);
};

Call_function_in_functionContext.prototype.parameter_call_function = function() {
    return this.getTypedRuleContext(Parameter_call_functionContext,0);
};

Call_function_in_functionContext.prototype.TK_PAR_DER = function() {
    return this.getToken(SRParser.TK_PAR_DER, 0);
};

Call_function_in_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterCall_function_in_function(this);
	}
};

Call_function_in_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitCall_function_in_function(this);
	}
};




SRParser.Call_function_in_functionContext = Call_function_in_functionContext;

SRParser.prototype.call_function_in_function = function() {

    var localctx = new Call_function_in_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, SRParser.RULE_call_function_in_function);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 875;
        this.match(SRParser.TK_PAR_IZQ);
        this.state = 876;
        this.parameter_call_function();
        this.state = 877;
        this.match(SRParser.TK_PAR_DER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Parameter_call_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_parameter_call_function;
    return this;
}

Parameter_call_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parameter_call_functionContext.prototype.constructor = Parameter_call_functionContext;

Parameter_call_functionContext.prototype.ID = function() {
    return this.getToken(SRParser.ID, 0);
};

Parameter_call_functionContext.prototype.parameter_call_function11 = function() {
    return this.getTypedRuleContext(Parameter_call_function11Context,0);
};

Parameter_call_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterParameter_call_function(this);
	}
};

Parameter_call_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitParameter_call_function(this);
	}
};




SRParser.Parameter_call_functionContext = Parameter_call_functionContext;

SRParser.prototype.parameter_call_function = function() {

    var localctx = new Parameter_call_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, SRParser.RULE_parameter_call_function);
    try {
        this.state = 882;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 879;
            this.match(SRParser.ID);
            this.state = 880;
            this.parameter_call_function11();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Parameter_call_function11Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_parameter_call_function11;
    return this;
}

Parameter_call_function11Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parameter_call_function11Context.prototype.constructor = Parameter_call_function11Context;

Parameter_call_function11Context.prototype.parameter_call_function1 = function() {
    return this.getTypedRuleContext(Parameter_call_function1Context,0);
};

Parameter_call_function11Context.prototype.TK_PUNTO = function() {
    return this.getToken(SRParser.TK_PUNTO, 0);
};

Parameter_call_function11Context.prototype.ID = function() {
    return this.getToken(SRParser.ID, 0);
};

Parameter_call_function11Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterParameter_call_function11(this);
	}
};

Parameter_call_function11Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitParameter_call_function11(this);
	}
};




SRParser.Parameter_call_function11Context = Parameter_call_function11Context;

SRParser.prototype.parameter_call_function11 = function() {

    var localctx = new Parameter_call_function11Context(this, this._ctx, this.state);
    this.enterRule(localctx, 208, SRParser.RULE_parameter_call_function11);
    try {
        this.state = 889;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 884;
            this.parameter_call_function1();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 885;
            this.match(SRParser.TK_PUNTO);
            this.state = 886;
            this.match(SRParser.ID);
            this.state = 887;
            this.parameter_call_function1();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Parameter_call_function1Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_parameter_call_function1;
    return this;
}

Parameter_call_function1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parameter_call_function1Context.prototype.constructor = Parameter_call_function1Context;

Parameter_call_function1Context.prototype.TK_COMA = function() {
    return this.getToken(SRParser.TK_COMA, 0);
};

Parameter_call_function1Context.prototype.parameter_call_function = function() {
    return this.getTypedRuleContext(Parameter_call_functionContext,0);
};

Parameter_call_function1Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterParameter_call_function1(this);
	}
};

Parameter_call_function1Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitParameter_call_function1(this);
	}
};




SRParser.Parameter_call_function1Context = Parameter_call_function1Context;

SRParser.prototype.parameter_call_function1 = function() {

    var localctx = new Parameter_call_function1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 210, SRParser.RULE_parameter_call_function1);
    try {
        this.state = 894;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 891;
            this.match(SRParser.TK_COMA);
            this.state = 892;
            this.parameter_call_function();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Semicolon_or_notContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_semicolon_or_not;
    return this;
}

Semicolon_or_notContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Semicolon_or_notContext.prototype.constructor = Semicolon_or_notContext;

Semicolon_or_notContext.prototype.TK_PUNTO_Y_COMA = function() {
    return this.getToken(SRParser.TK_PUNTO_Y_COMA, 0);
};

Semicolon_or_notContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterSemicolon_or_not(this);
	}
};

Semicolon_or_notContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitSemicolon_or_not(this);
	}
};




SRParser.Semicolon_or_notContext = Semicolon_or_notContext;

SRParser.prototype.semicolon_or_not = function() {

    var localctx = new Semicolon_or_notContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, SRParser.RULE_semicolon_or_not);
    try {
        this.state = 898;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 896;
            this.match(SRParser.TK_PUNTO_Y_COMA);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Ids_type_groupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_ids_type_group;
    return this;
}

Ids_type_groupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ids_type_groupContext.prototype.constructor = Ids_type_groupContext;

Ids_type_groupContext.prototype.ID = function() {
    return this.getToken(SRParser.ID, 0);
};

Ids_type_groupContext.prototype.TK_DOS_PUNTOS = function() {
    return this.getToken(SRParser.TK_DOS_PUNTOS, 0);
};

Ids_type_groupContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Ids_type_groupContext.prototype.ids_type_group1 = function() {
    return this.getTypedRuleContext(Ids_type_group1Context,0);
};

Ids_type_groupContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterIds_type_group(this);
	}
};

Ids_type_groupContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitIds_type_group(this);
	}
};




SRParser.Ids_type_groupContext = Ids_type_groupContext;

SRParser.prototype.ids_type_group = function() {

    var localctx = new Ids_type_groupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, SRParser.RULE_ids_type_group);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 900;
        this.match(SRParser.ID);
        this.state = 901;
        this.match(SRParser.TK_DOS_PUNTOS);
        this.state = 902;
        this.var_type();
        this.state = 903;
        this.ids_type_group1();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Ids_type_group1Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_ids_type_group1;
    return this;
}

Ids_type_group1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ids_type_group1Context.prototype.constructor = Ids_type_group1Context;

Ids_type_group1Context.prototype.TK_COMA = function() {
    return this.getToken(SRParser.TK_COMA, 0);
};

Ids_type_group1Context.prototype.ids_type_group = function() {
    return this.getTypedRuleContext(Ids_type_groupContext,0);
};

Ids_type_group1Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterIds_type_group1(this);
	}
};

Ids_type_group1Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitIds_type_group1(this);
	}
};




SRParser.Ids_type_group1Context = Ids_type_group1Context;

SRParser.prototype.ids_type_group1 = function() {

    var localctx = new Ids_type_group1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 216, SRParser.RULE_ids_type_group1);
    try {
        this.state = 908;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.TK_COMA:
            this.enterOuterAlt(localctx, 1);
            this.state = 905;
            this.match(SRParser.TK_COMA);
            this.state = 906;
            this.ids_type_group();
            break;
        case SRParser.EOF:
        case SRParser.GLOBAL:
        case SRParser.BODY:
        case SRParser.CONST:
        case SRParser.DO:
        case SRParser.OD:
        case SRParser.FS:
        case SRParser.AF:
        case SRParser.SKIP_RESERVED:
        case SRParser.EXIT:
        case SRParser.MAXLENGTH:
        case SRParser.LENGTH:
        case SRParser.EXTEND:
        case SRParser.IMPORT:
        case SRParser.NEW:
        case SRParser.PROCESS:
        case SRParser.FINAL:
        case SRParser.NEXT:
        case SRParser.PROC:
        case SRParser.SPEC:
        case SRParser.INITIAL:
        case SRParser.RESOURCE:
        case SRParser.HIGH:
        case SRParser.WRITE:
        case SRParser.PRED:
        case SRParser.LOW:
        case SRParser.END:
        case SRParser.ABS:
        case SRParser.VAR:
        case SRParser.OPTYPE:
        case SRParser.OP:
        case SRParser.FA:
        case SRParser.FI:
        case SRParser.IF:
        case SRParser.LB:
        case SRParser.UB:
        case SRParser.PUT:
        case SRParser.TYPE:
        case SRParser.SUCC:
        case SRParser.ID:
        case SRParser.TK_SEPARA:
            this.enterOuterAlt(localctx, 2);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Ids_groupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_ids_group;
    return this;
}

Ids_groupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ids_groupContext.prototype.constructor = Ids_groupContext;

Ids_groupContext.prototype.ID = function() {
    return this.getToken(SRParser.ID, 0);
};

Ids_groupContext.prototype.ids_group1 = function() {
    return this.getTypedRuleContext(Ids_group1Context,0);
};

Ids_groupContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterIds_group(this);
	}
};

Ids_groupContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitIds_group(this);
	}
};




SRParser.Ids_groupContext = Ids_groupContext;

SRParser.prototype.ids_group = function() {

    var localctx = new Ids_groupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, SRParser.RULE_ids_group);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 910;
        this.match(SRParser.ID);
        this.state = 911;
        this.ids_group1();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Ids_group1Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_ids_group1;
    return this;
}

Ids_group1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ids_group1Context.prototype.constructor = Ids_group1Context;

Ids_group1Context.prototype.TK_COMA = function() {
    return this.getToken(SRParser.TK_COMA, 0);
};

Ids_group1Context.prototype.ids_group = function() {
    return this.getTypedRuleContext(Ids_groupContext,0);
};

Ids_group1Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterIds_group1(this);
	}
};

Ids_group1Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitIds_group1(this);
	}
};




SRParser.Ids_group1Context = Ids_group1Context;

SRParser.prototype.ids_group1 = function() {

    var localctx = new Ids_group1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 220, SRParser.RULE_ids_group1);
    try {
        this.state = 916;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.TK_COMA:
            this.enterOuterAlt(localctx, 1);
            this.state = 913;
            this.match(SRParser.TK_COMA);
            this.state = 914;
            this.ids_group();
            break;
        case SRParser.EOF:
        case SRParser.GLOBAL:
        case SRParser.BODY:
        case SRParser.CONST:
        case SRParser.DO:
        case SRParser.OD:
        case SRParser.FS:
        case SRParser.AF:
        case SRParser.SKIP_RESERVED:
        case SRParser.EXIT:
        case SRParser.MAXLENGTH:
        case SRParser.LENGTH:
        case SRParser.EXTEND:
        case SRParser.IMPORT:
        case SRParser.NEW:
        case SRParser.PROCESS:
        case SRParser.FINAL:
        case SRParser.NEXT:
        case SRParser.PROC:
        case SRParser.SPEC:
        case SRParser.INITIAL:
        case SRParser.RESOURCE:
        case SRParser.HIGH:
        case SRParser.WRITE:
        case SRParser.PRED:
        case SRParser.LOW:
        case SRParser.END:
        case SRParser.ABS:
        case SRParser.VAR:
        case SRParser.OPTYPE:
        case SRParser.OP:
        case SRParser.FA:
        case SRParser.FI:
        case SRParser.IF:
        case SRParser.LB:
        case SRParser.UB:
        case SRParser.PUT:
        case SRParser.TYPE:
        case SRParser.SUCC:
        case SRParser.ID:
        case SRParser.TK_COR_DER:
        case SRParser.TK_DOS_PUNTOS:
        case SRParser.TK_PAR_DER:
        case SRParser.TK_SEPARA:
            this.enterOuterAlt(localctx, 2);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Ids_group_dos_puntosContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_ids_group_dos_puntos;
    return this;
}

Ids_group_dos_puntosContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ids_group_dos_puntosContext.prototype.constructor = Ids_group_dos_puntosContext;

Ids_group_dos_puntosContext.prototype.ID = function() {
    return this.getToken(SRParser.ID, 0);
};

Ids_group_dos_puntosContext.prototype.ids_group_dos_puntos1 = function() {
    return this.getTypedRuleContext(Ids_group_dos_puntos1Context,0);
};

Ids_group_dos_puntosContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Ids_group_dos_puntosContext.prototype.ids_group_dos_puntos11 = function() {
    return this.getTypedRuleContext(Ids_group_dos_puntos11Context,0);
};

Ids_group_dos_puntosContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterIds_group_dos_puntos(this);
	}
};

Ids_group_dos_puntosContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitIds_group_dos_puntos(this);
	}
};




SRParser.Ids_group_dos_puntosContext = Ids_group_dos_puntosContext;

SRParser.prototype.ids_group_dos_puntos = function() {

    var localctx = new Ids_group_dos_puntosContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, SRParser.RULE_ids_group_dos_puntos);
    try {
        this.state = 924;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 918;
            this.match(SRParser.ID);
            this.state = 919;
            this.ids_group_dos_puntos1();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 920;
            this.var_type();
            this.state = 921;
            this.ids_group_dos_puntos11();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Ids_group_dos_puntos11Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_ids_group_dos_puntos11;
    return this;
}

Ids_group_dos_puntos11Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ids_group_dos_puntos11Context.prototype.constructor = Ids_group_dos_puntos11Context;

Ids_group_dos_puntos11Context.prototype.ids_group_dos_puntos1 = function() {
    return this.getTypedRuleContext(Ids_group_dos_puntos1Context,0);
};

Ids_group_dos_puntos11Context.prototype.TK_PAR_IZQ = function() {
    return this.getToken(SRParser.TK_PAR_IZQ, 0);
};

Ids_group_dos_puntos11Context.prototype.ids_group_dos_puntos = function() {
    return this.getTypedRuleContext(Ids_group_dos_puntosContext,0);
};

Ids_group_dos_puntos11Context.prototype.TK_PAR_DER = function() {
    return this.getToken(SRParser.TK_PAR_DER, 0);
};

Ids_group_dos_puntos11Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterIds_group_dos_puntos11(this);
	}
};

Ids_group_dos_puntos11Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitIds_group_dos_puntos11(this);
	}
};




SRParser.Ids_group_dos_puntos11Context = Ids_group_dos_puntos11Context;

SRParser.prototype.ids_group_dos_puntos11 = function() {

    var localctx = new Ids_group_dos_puntos11Context(this, this._ctx, this.state);
    this.enterRule(localctx, 224, SRParser.RULE_ids_group_dos_puntos11);
    try {
        this.state = 933;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 926;
            this.ids_group_dos_puntos1();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 927;
            this.match(SRParser.TK_PAR_IZQ);
            this.state = 928;
            this.ids_group_dos_puntos();
            this.state = 929;
            this.match(SRParser.TK_PAR_DER);
            this.state = 930;
            this.ids_group_dos_puntos1();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Ids_group_dos_puntos1Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_ids_group_dos_puntos1;
    return this;
}

Ids_group_dos_puntos1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ids_group_dos_puntos1Context.prototype.constructor = Ids_group_dos_puntos1Context;

Ids_group_dos_puntos1Context.prototype.TK_COMA = function() {
    return this.getToken(SRParser.TK_COMA, 0);
};

Ids_group_dos_puntos1Context.prototype.ids_group_dos_puntos = function() {
    return this.getTypedRuleContext(Ids_group_dos_puntosContext,0);
};

Ids_group_dos_puntos1Context.prototype.TK_DOS_PUNTOS = function() {
    return this.getToken(SRParser.TK_DOS_PUNTOS, 0);
};

Ids_group_dos_puntos1Context.prototype.TK_PUNTO_Y_COMA = function() {
    return this.getToken(SRParser.TK_PUNTO_Y_COMA, 0);
};

Ids_group_dos_puntos1Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterIds_group_dos_puntos1(this);
	}
};

Ids_group_dos_puntos1Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitIds_group_dos_puntos1(this);
	}
};




SRParser.Ids_group_dos_puntos1Context = Ids_group_dos_puntos1Context;

SRParser.prototype.ids_group_dos_puntos1 = function() {

    var localctx = new Ids_group_dos_puntos1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 226, SRParser.RULE_ids_group_dos_puntos1);
    try {
        this.state = 942;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 935;
            this.match(SRParser.TK_COMA);
            this.state = 936;
            this.ids_group_dos_puntos();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 937;
            this.match(SRParser.TK_DOS_PUNTOS);
            this.state = 938;
            this.ids_group_dos_puntos();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 939;
            this.match(SRParser.TK_PUNTO_Y_COMA);
            this.state = 940;
            this.ids_group_dos_puntos();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Ids_group_dos_puntos_op_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_ids_group_dos_puntos_op_type;
    return this;
}

Ids_group_dos_puntos_op_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ids_group_dos_puntos_op_typeContext.prototype.constructor = Ids_group_dos_puntos_op_typeContext;

Ids_group_dos_puntos_op_typeContext.prototype.ID = function() {
    return this.getToken(SRParser.ID, 0);
};

Ids_group_dos_puntos_op_typeContext.prototype.ids_group_dos_puntos_op_type1 = function() {
    return this.getTypedRuleContext(Ids_group_dos_puntos_op_type1Context,0);
};

Ids_group_dos_puntos_op_typeContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Ids_group_dos_puntos_op_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterIds_group_dos_puntos_op_type(this);
	}
};

Ids_group_dos_puntos_op_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitIds_group_dos_puntos_op_type(this);
	}
};




SRParser.Ids_group_dos_puntos_op_typeContext = Ids_group_dos_puntos_op_typeContext;

SRParser.prototype.ids_group_dos_puntos_op_type = function() {

    var localctx = new Ids_group_dos_puntos_op_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, SRParser.RULE_ids_group_dos_puntos_op_type);
    try {
        this.state = 950;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 944;
            this.match(SRParser.ID);
            this.state = 945;
            this.ids_group_dos_puntos_op_type1();
            break;
        case SRParser.DOUBLE:
        case SRParser.REAL:
        case SRParser.CHAR:
        case SRParser.INT:
        case SRParser.CAP:
            this.enterOuterAlt(localctx, 2);
            this.state = 946;
            this.var_type();
            this.state = 947;
            this.ids_group_dos_puntos_op_type1();
            break;
        case SRParser.TK_PAR_DER:
            this.enterOuterAlt(localctx, 3);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Ids_group_dos_puntos_op_type1Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_ids_group_dos_puntos_op_type1;
    return this;
}

Ids_group_dos_puntos_op_type1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ids_group_dos_puntos_op_type1Context.prototype.constructor = Ids_group_dos_puntos_op_type1Context;

Ids_group_dos_puntos_op_type1Context.prototype.TK_DOS_PUNTOS = function() {
    return this.getToken(SRParser.TK_DOS_PUNTOS, 0);
};

Ids_group_dos_puntos_op_type1Context.prototype.ids_group_dos_puntos_op_type = function() {
    return this.getTypedRuleContext(Ids_group_dos_puntos_op_typeContext,0);
};

Ids_group_dos_puntos_op_type1Context.prototype.TK_PUNTO_Y_COMA = function() {
    return this.getToken(SRParser.TK_PUNTO_Y_COMA, 0);
};

Ids_group_dos_puntos_op_type1Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterIds_group_dos_puntos_op_type1(this);
	}
};

Ids_group_dos_puntos_op_type1Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitIds_group_dos_puntos_op_type1(this);
	}
};




SRParser.Ids_group_dos_puntos_op_type1Context = Ids_group_dos_puntos_op_type1Context;

SRParser.prototype.ids_group_dos_puntos_op_type1 = function() {

    var localctx = new Ids_group_dos_puntos_op_type1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 230, SRParser.RULE_ids_group_dos_puntos_op_type1);
    try {
        this.state = 959;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 952;
            this.match(SRParser.TK_DOS_PUNTOS);
            this.state = 953;
            this.ids_group_dos_puntos_op_type();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 954;
            this.match(SRParser.TK_PUNTO_Y_COMA);
            this.state = 955;
            this.ids_group_dos_puntos_op_type();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 956;
            this.match(SRParser.TK_PUNTO_Y_COMA);
            this.state = 957;
            this.ids_group_dos_puntos_op_type();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Var_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_var_type;
    return this;
}

Var_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Var_typeContext.prototype.constructor = Var_typeContext;

Var_typeContext.prototype.INT = function() {
    return this.getToken(SRParser.INT, 0);
};

Var_typeContext.prototype.CAP = function() {
    return this.getToken(SRParser.CAP, 0);
};

Var_typeContext.prototype.DOUBLE = function() {
    return this.getToken(SRParser.DOUBLE, 0);
};

Var_typeContext.prototype.CHAR = function() {
    return this.getToken(SRParser.CHAR, 0);
};

Var_typeContext.prototype.REAL = function() {
    return this.getToken(SRParser.REAL, 0);
};

Var_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterVar_type(this);
	}
};

Var_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitVar_type(this);
	}
};




SRParser.Var_typeContext = Var_typeContext;

SRParser.prototype.var_type = function() {

    var localctx = new Var_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, SRParser.RULE_var_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 961;
        _la = this._input.LA(1);
        if(!(_la===SRParser.DOUBLE || _la===SRParser.REAL || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (SRParser.CHAR - 35)) | (1 << (SRParser.INT - 35)) | (1 << (SRParser.CAP - 35)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Ids_group_0Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_ids_group_0;
    return this;
}

Ids_group_0Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ids_group_0Context.prototype.constructor = Ids_group_0Context;

Ids_group_0Context.prototype.ID = function() {
    return this.getToken(SRParser.ID, 0);
};

Ids_group_0Context.prototype.ids_group_01 = function() {
    return this.getTypedRuleContext(Ids_group_01Context,0);
};

Ids_group_0Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterIds_group_0(this);
	}
};

Ids_group_0Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitIds_group_0(this);
	}
};




SRParser.Ids_group_0Context = Ids_group_0Context;

SRParser.prototype.ids_group_0 = function() {

    var localctx = new Ids_group_0Context(this, this._ctx, this.state);
    this.enterRule(localctx, 234, SRParser.RULE_ids_group_0);
    try {
        this.state = 966;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 963;
            this.match(SRParser.ID);
            this.state = 964;
            this.ids_group_01();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Ids_group_01Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SRParser.RULE_ids_group_01;
    return this;
}

Ids_group_01Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ids_group_01Context.prototype.constructor = Ids_group_01Context;

Ids_group_01Context.prototype.TK_COMA = function() {
    return this.getToken(SRParser.TK_COMA, 0);
};

Ids_group_01Context.prototype.ids_group_0 = function() {
    return this.getTypedRuleContext(Ids_group_0Context,0);
};

Ids_group_01Context.prototype.enterRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.enterIds_group_01(this);
	}
};

Ids_group_01Context.prototype.exitRule = function(listener) {
    if(listener instanceof SRListener ) {
        listener.exitIds_group_01(this);
	}
};




SRParser.Ids_group_01Context = Ids_group_01Context;

SRParser.prototype.ids_group_01 = function() {

    var localctx = new Ids_group_01Context(this, this._ctx, this.state);
    this.enterRule(localctx, 236, SRParser.RULE_ids_group_01);
    try {
        this.state = 971;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SRParser.TK_COMA:
            this.enterOuterAlt(localctx, 1);
            this.state = 968;
            this.match(SRParser.TK_COMA);
            this.state = 969;
            this.ids_group_0();
            break;
        case SRParser.GLOBAL:
        case SRParser.BODY:
        case SRParser.CONST:
        case SRParser.DO:
        case SRParser.FS:
        case SRParser.SKIP_RESERVED:
        case SRParser.EXIT:
        case SRParser.MAXLENGTH:
        case SRParser.LENGTH:
        case SRParser.EXTEND:
        case SRParser.IMPORT:
        case SRParser.NEW:
        case SRParser.PROCESS:
        case SRParser.FINAL:
        case SRParser.NEXT:
        case SRParser.PROC:
        case SRParser.SPEC:
        case SRParser.INITIAL:
        case SRParser.RETURNS:
        case SRParser.HIGH:
        case SRParser.WRITE:
        case SRParser.PRED:
        case SRParser.LOW:
        case SRParser.ABS:
        case SRParser.VAR:
        case SRParser.OPTYPE:
        case SRParser.OP:
        case SRParser.FA:
        case SRParser.IF:
        case SRParser.LB:
        case SRParser.UB:
        case SRParser.PUT:
        case SRParser.TYPE:
        case SRParser.SUCC:
        case SRParser.ID:
        case SRParser.TK_PAR_DER:
            this.enterOuterAlt(localctx, 2);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.SRParser = SRParser;
